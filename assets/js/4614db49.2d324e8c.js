"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[773],{5907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"expectations/events","title":"Events","description":"Describes the possible expectations for verifying events.","source":"@site/docs/expectations/events.md","sourceDirName":"expectations","slug":"/expectations/events","permalink":"/aweXpect/docs/expectations/events","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/events.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"Delegates","permalink":"/aweXpect/docs/expectations/delegates"},"next":{"title":"Extensibility","permalink":"/aweXpect/docs/category/extensibility"}}');var r=t(4848),a=t(8453);const c={sidebar_position:15},i="Events",h={},o=[{value:"Triggering",id:"triggering",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Sender",id:"sender",level:3},{value:"EventArgs",id:"eventargs",level:3},{value:"Counting",id:"counting",level:2},{value:"Special events",id:"special-events",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,r.jsx)(n.p,{children:"Describes the possible expectations for verifying events."}),"\n",(0,r.jsx)(n.h2,{id:"triggering",children:"Triggering"}),"\n",(0,r.jsx)(n.p,{children:"You can verify, that an object triggers an event:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"class ThresholdReachedEventArgs(int threshold = 0) : EventArgs\n{\n    public int Threshold { get; } = threshold;\n}\nclass MyClass\n{\n  public event EventHandler? ThresholdReached;\n  public void OnThresholdReached(ThresholdReachedEventArgs e)\n    => ThresholdReached?.Invoke(this, e);\n}\nMyClass sut = new MyClass();\n\nawait Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .While(subject => subject.OnThresholdReached(new ThresholdReachedEventArgs()));\n"})}),"\n",(0,r.jsx)(n.p,{children:'This will register a recording of all events named "ThresholdReached" that are triggered during the execution of the callback.'}),"\n",(0,r.jsxs)(n.p,{children:["The callback in ",(0,r.jsx)(n.code,{children:"While()"})," can also be asynchronous. In this case, you can also get the cancellation token as second parameter:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'await Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .While(subject => subject.OnThresholdReachedAsync(new ThresholdReachedEventArgs()))\n  .Because("we support asynchronous callbacks");\n\nawait Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .While((subject, token) => subject.OnThresholdReachedAsync(new ThresholdReachedEventArgs(), token))\n  .Because("we also support cancellation");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can filter triggered events based on their parameters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .WithParameter<ThresholdReachedEventArgs>(e => e.Threshold > 10)\n  .While(subject =>\n  {\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(5));\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(15));\n  });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sender",children:"Sender"}),"\n",(0,r.jsxs)(n.p,{children:["When you follow the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern",children:"event best practices"}),", you can filter the triggered events based on the sender (the first parameter):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .WithSender(s => s == sut)\n  .While(subject =>\n  {\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(5));\n  });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"eventargs",children:"EventArgs"}),"\n",(0,r.jsxs)(n.p,{children:["When you follow the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern",children:"event best practices"}),", you can filter the triggered events based on their ",(0,r.jsx)(n.code,{children:"EventArgs"})," (the second parameter):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .With<ThresholdReachedEventArgs>(e => e < 10)\n  .While(subject =>\n  {\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(5));\n  });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"counting",children:"Counting"}),"\n",(0,r.jsx)(n.p,{children:"You can verify, that an event was triggered a specific number of times"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(sut)\n  .Triggers(nameof(MyClass.ThresholdReached))\n  .Between(1).And(2.Times()\n  .While(subject =>\n  {\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(5));\n    subject.OnThresholdReached(new ThresholdReachedEventArgs(15));\n  }));\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can use the same occurrence constraints as in the ",(0,r.jsx)(n.a,{href:"/docs/expectations/collections#contain",children:"contain"})," method:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"AtLeast(2.Times())"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"AtMost(3.Times())"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Between(1).And(4.Times())"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Exactly(0.Times())"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"special-events",children:"Special events"}),"\n",(0,r.jsxs)(n.p,{children:["For common events, you can create specific overloads.",(0,r.jsx)(n.br,{}),"\n","Included are some overloads for the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged",children:(0,r.jsx)(n.code,{children:"INotifyPropertyChanged.PropertyChanged"})})," event:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'MyClass sut = // ...implements INotifyPropertyChanged\n\nawait Expect.That(sut)\n  .TriggersPropertyChanged()\n  .While(subject => subject.Execute())\n  .Because("it should trigger the PropertyChanged event for any property name");\n\nawait Expect.That(sut)\n  .TriggersPropertyChangedFor(x => x.MyProperty)\n  .While(subject => subject.Execute())\n  .Because("it should trigger the PropertyChanged event for the \'MyProperty\' property name");\n\nawait Expect.That(sut)\n  .DoesNotTriggerPropertyChanged()\n  .While(subject => subject.ExecuteWithoutNotification())\n  .Because("it should not trigger for any property name");\n\nawait Expect.That(sut)\n  .DoesNotTriggerPropertyChangedFor(x => x.MyProperty)\n  .While(subject => subject.ExecuteWithoutNotification())\n  .Because("it should not trigger for the \'MyProperty\' property name");\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);