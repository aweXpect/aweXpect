"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[4354],{3661:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>x,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"expectations/delegates","title":"Delegates","description":"Describes the possible expectations for delegates and exceptions.","source":"@site/docs/expectations/06-delegates.md","sourceDirName":"expectations","slug":"/expectations/delegates","permalink":"/docs/expectations/delegates","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/06-delegates.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Enum","permalink":"/docs/expectations/enum"},"next":{"title":"Collections","permalink":"/docs/expectations/collections"}}');var c=t(4848),o=t(8453);const s={},a="Delegates",r={},l=[{value:"Not throw",id:"not-throw",level:2},{value:"Throw exception",id:"throw-exception",level:2},{value:"Specific exception",id:"specific-exception",level:3},{value:"Exact exception",id:"exact-exception",level:3},{value:"Conditional throw",id:"conditional-throw",level:3},{value:"Exception message",id:"exception-message",level:2},{value:"Inner exceptions",id:"inner-exceptions",level:2},{value:"Recursive inner exceptions",id:"recursive-inner-exceptions",level:3},{value:"Other members",id:"other-members",level:3},{value:"Execution time",id:"execution-time",level:2},{value:"Execute within",id:"execute-within",level:3}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"delegates",children:"Delegates"})}),"\n",(0,c.jsx)(n.p,{children:"Describes the possible expectations for delegates and exceptions."}),"\n",(0,c.jsx)(n.p,{children:"A delegate can be any of the following:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Action"})," or ",(0,c.jsx)(n.code,{children:"Action<CancellationToken>"}),(0,c.jsx)(n.br,{}),"\n","a synchronous method without return value (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Func<Task>"})," or ",(0,c.jsx)(n.code,{children:"Func<CancellationToken, Task>"}),(0,c.jsx)(n.br,{}),"\n","an asynchronous method without return value (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Func<ValueTask>"})," or ",(0,c.jsx)(n.code,{children:"Func<CancellationToken, ValueTask>"}),(0,c.jsx)(n.br,{}),"\n","an asynchronous method using ",(0,c.jsx)(n.code,{children:"ValueTask"})," without return value (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Func<T>"})," or ",(0,c.jsx)(n.code,{children:"Func<CancellationToken, T>"}),(0,c.jsx)(n.br,{}),"\n","a synchronous method with return value ",(0,c.jsx)(n.code,{children:"T"})," (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Func<Task<T>>"})," or ",(0,c.jsx)(n.code,{children:"Func<CancellationToken, Task<T>>"}),(0,c.jsx)(n.br,{}),"\n","an asynchronous method with return value ",(0,c.jsx)(n.code,{children:"T"})," (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Func<ValueTask<T>>"})," or ",(0,c.jsx)(n.code,{children:"Func<CancellationToken, ValueTask<T>>"}),(0,c.jsx)(n.br,{}),"\n","an asynchronous method using ",(0,c.jsx)(n.code,{children:"ValueTask"})," with return value ",(0,c.jsx)(n.code,{children:"T"})," (optionally accepting a ",(0,c.jsx)(n.code,{children:"CancellationToken"})," for\ntimeout)"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"not-throw",children:"Not throw"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the delegate does not throw any exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"void Act() => {};\n\nawait Expect.That(Act).DoesNotThrow();\n"})}),"\n",(0,c.jsx)(n.h2,{id:"throw-exception",children:"Throw exception"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the delegate throws an exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).ThrowsException();\n'})}),"\n",(0,c.jsx)(n.h3,{id:"specific-exception",children:"Specific exception"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the delegate throws a specific exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).Throws<CustomException>();\nawait Expect.That(Act).Throws(typeof(CustomException));\n'})}),"\n",(0,c.jsxs)(n.p,{children:["This will verify that the thrown exception is of type ",(0,c.jsx)(n.code,{children:"CustomException"})," or any derived type."]}),"\n",(0,c.jsx)(n.h3,{id:"exact-exception",children:"Exact exception"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the delegate throws exactly a specific exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).ThrowsExactly<CustomException>();\nawait Expect.That(Act).ThrowsExactly(typeof(CustomException));\n'})}),"\n",(0,c.jsxs)(n.p,{children:["This will verify that the thrown exception is of type ",(0,c.jsx)(n.code,{children:"CustomException"})," and not any derived type."]}),"\n",(0,c.jsx)(n.h3,{id:"conditional-throw",children:"Conditional throw"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the delegate throws an exception only if a predicate is satisfied (otherwise it verifies, that no\nexception is thrown):"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\nbool expectThrownException = true;\n\nawait Expect.That(Act).Throws<CustomException>().OnlyIf(expectThrownException);\n'})}),"\n",(0,c.jsx)(n.p,{children:"This is especially useful with parametrized tests where it depends on a parameter if an exception is thrown or not."}),"\n",(0,c.jsx)(n.h2,{id:"exception-message",children:"Exception message"}),"\n",(0,c.jsx)(n.p,{children:"You can verify the message of the thrown exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("This is my exception text");\n\nawait Expect.That(Act).ThrowsException().WithMessage("This is my exception text");\nawait Expect.That(Act).ThrowsException().WithoutMessage("some other text");\nawait Expect.That(Act).ThrowsException().WithMessageContaining("my exception");\nawait Expect.That(Act).ThrowsException().WithoutMessageContaining("something else");\n'})}),"\n",(0,c.jsxs)(n.p,{children:["You can use the same configuration options as when ",(0,c.jsx)(n.a,{href:"/docs/expectations/string#equality",children:"comparing strings"}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"inner-exceptions",children:"Inner exceptions"}),"\n",(0,c.jsx)(n.p,{children:"You can verify the inner exception of the thrown exception;"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("outer", new CustomException("inner"));\n\nawait Expect.That(Act).ThrowsException().WithInnerException();\nawait Expect.That(Act).ThrowsException().WithInner<CustomException>();\n'})}),"\n",(0,c.jsx)(n.h3,{id:"recursive-inner-exceptions",children:"Recursive inner exceptions"}),"\n",(0,c.jsx)(n.p,{children:"You can recursively verify the collection of inner exceptions of the thrown exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new AggregateException("outer", new CustomException("inner"));\n\nawait Expect.That(Act).ThrowsException().WithRecursiveInnerExceptions(innerExceptions => innerExceptions.HasAtLeast(1).Be<CustomException>());\n'})}),"\n",(0,c.jsx)(n.h3,{id:"other-members",children:"Other members"}),"\n",(0,c.jsx)(n.p,{children:"You can recursively verify additional members of the exception:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'var exception = new MyException("outer", paramName: "paramName", hResult: 12345);\nvoid Act() => throw exception;\n\nawait Expect.That(Act).ThrowsException().WithParamName("paramName")\n  .Because("you can verify the `paramName`");\nawait Expect.That(Act).ThrowsException().WithHResult(12345)\n  .Because("you can verify the `HResult`");\nawait Expect.That(Act).ThrowsException()\n  .Whose(e => e.HResult, h => h.IsGreaterThan(12340))\n  .Because("you can verify arbitrary additional members");\nawait Expect.That(Act).ThrowsException()\n  .Which.IsSameAs(exception)\n  .Because("you can access the thrown exception");\n\n'})}),"\n",(0,c.jsx)(n.h2,{id:"execution-time",children:"Execution time"}),"\n",(0,c.jsx)(n.p,{children:"You can verify that the execution time of a delegate:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'await Expect.That(Task.Delay(200)).ExecutesIn().AtMost(300.Milliseconds())\n  .Because("the delegate should execute faster than 300ms");\nawait Expect.That(Task.Delay(200)).ExecutesIn().AtLeast(100.Milliseconds())\n  .Because("the delegate should execute slower than 100ms");\nawait Expect.That(Task.Delay(200)).ExecutesIn().Approximately(200.Milliseconds(), 50.Milliseconds())\n  .Because("the delegate should execute within 200ms \xb1 50ms");\nawait Expect.That(Task.Delay(200)).ExecutesIn().Between(100.Milliseconds()).And(300.Milliseconds())\n  .Because("the delegate should execute slower than 100ms and faster than 300ms");\n'})}),"\n",(0,c.jsx)(n.h3,{id:"execute-within",children:"Execute within"}),"\n",(0,c.jsx)(n.p,{children:"There is also a shorthand expectation for a delegate that finishes the execution without throwing an exception\nin (at most) a given time:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'await Expect.That(Task.Delay(200)).ExecutesWithin(TimeSpan.FromMilliseconds(300))\n  .Because("it should only take about 200ms");\nawait Expect.That(Task.Delay(200)).DoesNotExecuteWithin(TimeSpan.FromMilliseconds(100))\n  .Because("it should take at least 200ms");\n'})})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const c={},o=i.createContext(c);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);