"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[9595],{2960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"expectations/json","title":"JSON","description":"Describes the possible expectations for working with System.Text.Json.","source":"@site/docs/expectations/json.md","sourceDirName":"expectations","slug":"/expectations/json","permalink":"/aweXpect/docs/expectations/json","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/json.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Callbacks","permalink":"/aweXpect/docs/expectations/callbacks"},"next":{"title":"Extensibility","permalink":"/aweXpect/docs/category/extensibility"}}');var o=n(4848),a=n(8453);const r={sidebar_position:17},c="JSON",i={},l=[{value:"JsonElement",id:"jsonelement",level:2},{value:"String comparison as JSON",id:"string-comparison-as-json",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"json",children:"JSON"})}),"\n",(0,o.jsxs)(t.p,{children:["Describes the possible expectations for working with ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.text.json",children:"System.Text.Json"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"jsonelement",children:"JsonElement"}),"\n",(0,o.jsxs)(t.p,{children:["You can verify, that the ",(0,o.jsx)(t.code,{children:"JsonElement"})," has the expected number of items:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'JsonElement subject = JsonDocument.Parse("[1,2]").RootElement;\n\nawait Expect.That(subject).Should().HaveCount(2);\nawait Expect.That(subject).Should().NotHaveCount(3);\n'})}),"\n",(0,o.jsx)(t.p,{children:"This works for both, arrays and objects, but fails for all other JSON types."}),"\n",(0,o.jsx)(t.h2,{id:"string-comparison-as-json",children:"String comparison as JSON"}),"\n",(0,o.jsx)(t.p,{children:"You can compare two strings for JSON equivalency:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'string subject = "{\\"foo\\":{\\"bar\\":[1,2,3]}}";\nstring expected = """\n                  {\n                    "foo": {\n                      "bar": [ 1, 2, 3 ]\n                    }\n                  }\n                  """;\n\nawait Expect.That(subject).Should().Be(expected).AsJson();\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);