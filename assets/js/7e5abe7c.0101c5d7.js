"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[2432],{570:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"extensions/project/Reflection/index","title":"[aweXpect.Reflection](https://github.com/aweXpect/aweXpect.Reflection) [![Nuget](https://img.shields.io/nuget/v/aweXpect.Reflection)](https://www.nuget.org/packages/aweXpect.Reflection)","description":"Expectations for reflection types.","source":"@site/docs/extensions/project/Reflection/00-index.md","sourceDirName":"extensions/project/Reflection","slug":"/extensions/project/Reflection/index","permalink":"/docs/extensions/project/Reflection/index","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/extensions/project/Reflection/00-index.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{},"sidebar":"extensionsSidebar","previous":{"title":"aweXpect.Web","permalink":"/docs/extensions/project/Web/index"},"next":{"title":"aweXpect.Testably","permalink":"/docs/extensions/project/Testably/index"}}');var i=s(4848),c=s(8453);const a={},o="aweXpect.Reflection Nuget",r={},l=[{value:"Overview",id:"overview",level:2},{value:"In",id:"in",level:3},{value:"Assemblies",id:"assemblies",level:2},{value:"Name",id:"name",level:3},{value:"Types",id:"types",level:2},{value:"Name / Namespace",id:"name--namespace",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"awexpectreflection-nuget",children:[(0,i.jsx)(t.a,{href:"https://github.com/aweXpect/aweXpect.Reflection",children:"aweXpect.Reflection"})," ",(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/aweXpect.Reflection",children:(0,i.jsx)(t.img,{src:"https://img.shields.io/nuget/v/aweXpect.Reflection",alt:"Nuget"})})]})}),"\n",(0,i.jsx)(t.p,{children:"Expectations for reflection types."}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"This library contains expectations on reflection types:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly",children:(0,i.jsx)(t.code,{children:"Assembly"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.type",children:(0,i.jsx)(t.code,{children:"Type"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.constructorinfo",children:(0,i.jsx)(t.code,{children:"ConstructorInfo"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.eventinfo",children:(0,i.jsx)(t.code,{children:"EventInfo"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.fieldinfo",children:(0,i.jsx)(t.code,{children:"FieldInfo"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo",children:(0,i.jsx)(t.code,{children:"MethodInfo"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.propertyinfo",children:(0,i.jsx)(t.code,{children:"PropertyInfo"})})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["You can apply the expectations either on a single type or a collection of types (e.g. ",(0,i.jsx)(t.code,{children:"Assembly[]"})," or\n",(0,i.jsx)(t.code,{children:"IEnumerable<Type?>"}),")."]}),"\n",(0,i.jsx)(t.h3,{id:"in",children:"In"}),"\n",(0,i.jsxs)(t.p,{children:["There is also a helper construct (",(0,i.jsx)(t.code,{children:"In"}),") to simplify the construction of collections of reflection types that match\nspecific criteria:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// Verifies that all xunit test classes (types with at least one method with\n// a `FactAttribute` or `TheoryAttribute`) have a name that ends with "Tests":\nawait That(In.AllLoadedAssemblies()\n        .Methods().With<FactAttribute>().OrWith<TheoryAttribute>()\n        .DeclaringTypes())\n    .HaveName("Tests").AsSuffix();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This helper consists of the static class ",(0,i.jsx)(t.code,{children:"In"})," for accessing assemblies and allows filtering and navigating between the\nreflection types. The helper types are themselves a collection, so the collection expectations can be applied to them."]}),"\n",(0,i.jsx)(t.h2,{id:"assemblies",children:"Assemblies"}),"\n",(0,i.jsx)(t.h3,{id:"name",children:"Name"}),"\n",(0,i.jsx)(t.p,{children:"You can verify the name of an assembly or a collection of assemblies:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'Assembly subject = Assembly.GetEntryAssembly();\nAssembly[] subjects = AppDomain.CurrentDomain.GetAssemblies();\n\nawait Expect.That(subject).HasName("aweXpect.Reflection");\nawait Expect.That(subjects).HaveName("aweXpect").AsPrefix();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can use the same configuration options as\nwhen ",(0,i.jsx)(t.a,{href:"https://awexpect.com/docs/expectations/string#equality",children:"comparing strings"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsx)(t.h3,{id:"name--namespace",children:"Name / Namespace"}),"\n",(0,i.jsx)(t.p,{children:"You can verify the name or namespace of a type or a collection of types:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'Type subject = typeof(MyClass);\nIEnumerable<Type> subjects = In.EntryAssembly().Types();\n\nawait Expect.That(subject).HasNamespace("aweXpect").AsPrefix();\nawait Expect.That(subject).HasName("MyClass");\n\nawait Expect.That(subject).HaveNamespace("aweXpect").AsPrefix();\nawait Expect.That(subjects).HaveName("Tests").AsSuffix();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can use the same configuration options as\nwhen ",(0,i.jsx)(t.a,{href:"https://awexpect.com/docs/expectations/string#equality",children:"comparing strings"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const i={},c=n.createContext(i);function a(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);