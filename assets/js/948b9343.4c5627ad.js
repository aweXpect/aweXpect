"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[161],{8381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"expectations/delegates","title":"Delegates","description":"Describes the possible expectations for delegates and exceptions.","source":"@site/docs/expectations/delegates.md","sourceDirName":"expectations","slug":"/expectations/delegates","permalink":"/aweXpect/docs/expectations/delegates","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/delegates.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Collections","permalink":"/aweXpect/docs/expectations/collections"},"next":{"title":"Extensibility","permalink":"/aweXpect/docs/category/extensibility"}}');var o=t(4848),c=t(8453);const s={sidebar_position:14},a="Delegates",r={},l=[{value:"Not throw",id:"not-throw",level:2},{value:"Throw exception",id:"throw-exception",level:2},{value:"Specific exception",id:"specific-exception",level:3},{value:"Exact exception",id:"exact-exception",level:3},{value:"Conditional throw",id:"conditional-throw",level:3},{value:"Exception message",id:"exception-message",level:2},{value:"Inner exceptions",id:"inner-exceptions",level:2},{value:"Recursive inner exceptions",id:"recursive-inner-exceptions",level:3},{value:"Execute within",id:"execute-within",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"delegates",children:"Delegates"})}),"\n",(0,o.jsx)(n.p,{children:"Describes the possible expectations for delegates and exceptions."}),"\n",(0,o.jsx)(n.p,{children:"A delegate can be any of the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Action"})," or ",(0,o.jsx)(n.code,{children:"Action<CancellationToken>"}),(0,o.jsx)(n.br,{}),"\n","a synchronous method without return value (optionally accepting a ",(0,o.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Func<Task>"})," or ",(0,o.jsx)(n.code,{children:"Func<CancellationToken, Task>"}),(0,o.jsx)(n.br,{}),"\n","an asynchronous method without return value (optionally accepting a ",(0,o.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Task"})," or ",(0,o.jsx)(n.code,{children:"ValueTask"}),(0,o.jsx)(n.br,{}),"\n","the result of an asynchronous method without return value"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Func<T>"})," or ",(0,o.jsx)(n.code,{children:"Func<CancellationToken, T>"}),(0,o.jsx)(n.br,{}),"\n","a synchronous method with return value ",(0,o.jsx)(n.code,{children:"T"})," (optionally accepting a ",(0,o.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Func<Task<T>>"})," or ",(0,o.jsx)(n.code,{children:"Func<CancellationToken, Task<T>>"}),(0,o.jsx)(n.br,{}),"\n","an asynchronous method with return value ",(0,o.jsx)(n.code,{children:"T"})," (optionally accepting a ",(0,o.jsx)(n.code,{children:"CancellationToken"})," for timeout)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Task<T>"})," or ",(0,o.jsx)(n.code,{children:"ValueTask<T>"}),(0,o.jsx)(n.br,{}),"\n","the result of an asynchronous method with return value ",(0,o.jsx)(n.code,{children:"T"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"not-throw",children:"Not throw"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate does not throw any exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"void Act() => {};\n\nawait Expect.That(Act).Should().NotThrow();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"throw-exception",children:"Throw exception"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate throws an exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).Should().ThrowException();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"specific-exception",children:"Specific exception"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate throws a specific exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).Should().Throw<CustomException>();\nawait Expect.That(Act).Should().Throw(typeof(CustomException));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This will verify that the thrown exception is of type ",(0,o.jsx)(n.code,{children:"CustomException"})," or any derived type."]}),"\n",(0,o.jsx)(n.h3,{id:"exact-exception",children:"Exact exception"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate throws exactly a specific exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).Should().ThrowExactly<CustomException>();\nawait Expect.That(Act).Should().ThrowExactly(typeof(CustomException));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This will verify that the thrown exception is of type ",(0,o.jsx)(n.code,{children:"CustomException"})," and not any derived type."]}),"\n",(0,o.jsx)(n.h3,{id:"conditional-throw",children:"Conditional throw"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate throws an exception only if a predicate is satisfied (otherwise it verifies, that no exception is thrown):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\nbool expectThrownException = true;\n\nawait Expect.That(Act).Should().Throw<CustomException>().OnlyIf(expectThrownException);\n'})}),"\n",(0,o.jsx)(n.p,{children:"This is especially useful with parametrized tests where it depends on a parameter if an exception is thrown or not."}),"\n",(0,o.jsx)(n.h2,{id:"exception-message",children:"Exception message"}),"\n",(0,o.jsx)(n.p,{children:"You can verify the message of the thrown exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("my exception");\n\nawait Expect.That(Act).Should().ThrowException().WithMessage("my exception");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can use the same configuration options as when ",(0,o.jsx)(n.a,{href:"/docs/expectations/string#equality",children:"comparing strings"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"inner-exceptions",children:"Inner exceptions"}),"\n",(0,o.jsx)(n.p,{children:"You can verify the inner exception of the thrown exception;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new CustomException("outer", new CustomException("inner"));\n\nawait Expect.That(Act).Should().ThrowException().WithInnerException();\nawait Expect.That(Act).Should().ThrowException().WithInner<CustomException>();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"recursive-inner-exceptions",children:"Recursive inner exceptions"}),"\n",(0,o.jsx)(n.p,{children:"You can recursively verify the collection of inner exceptions of the thrown exception:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'void Act() => throw new AggregateException("outer", new CustomException("inner"));\n\nawait Expect.That(Act).Should().ThrowException().WithRecursiveInnerExceptions(a => a.HaveAtLeast(1).Be<CustomException>());\n'})}),"\n",(0,o.jsx)(n.h2,{id:"execute-within",children:"Execute within"}),"\n",(0,o.jsx)(n.p,{children:"You can verify, that the delegate finishes execution in a specified amount of time"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'await Expect.That(Task.Delay(200)).Should().ExecuteWithin(TimeSpan.FromMilliseconds(300))\n  .Because("it should only take about 200ms");\nawait Expect.That(Task.Delay(200)).Should().NotExecuteWithin(TimeSpan.FromMilliseconds(100))\n  .Because("it should take at least 200ms");\n'})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},c=i.createContext(o);function s(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);