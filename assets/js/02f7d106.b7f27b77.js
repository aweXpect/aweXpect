"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[4879],{6323:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"expectations/date-time-only","title":"DateOnly / TimeOnly","description":"Describes the possible expectations for DateOnly and TimeOnly.","source":"@site/docs/expectations/11-date-time-only.md","sourceDirName":"expectations","slug":"/expectations/date-time-only","permalink":"/docs/expectations/date-time-only","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/11-date-time-only.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"TimeSpan","permalink":"/docs/expectations/timespan"},"next":{"title":"DateTime / DateTimeOffset","permalink":"/docs/expectations/datetime-offset"}}');var s=t(4848),i=t(8453);const c={},l="DateOnly / TimeOnly",r={},o=[{value:"Equality",id:"equality",level:2},{value:"One of",id:"one-of",level:2},{value:"After",id:"after",level:2},{value:"Before",id:"before",level:2},{value:"Properties",id:"properties",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dateonly--timeonly",children:"DateOnly / TimeOnly"})}),"\n",(0,s.jsxs)(n.p,{children:["Describes the possible expectations for ",(0,s.jsx)(n.code,{children:"DateOnly"})," and ",(0,s.jsx)(n.code,{children:"TimeOnly"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"equality",children:"Equality"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify that the ",(0,s.jsx)(n.code,{children:"DateOnly"})," or ",(0,s.jsx)(n.code,{children:"TimeOnly"})," is equal to another one or not:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = new DateOnly(2024, 12, 24);\n\nawait Expect.That(subjectA).IsEqualTo(new DateOnly(2024, 12, 24));\nawait Expect.That(subjectA).IsNotEqualTo(new DateOnly(2024, 12, 23));\n\nTimeOnly subjectB = new TimeOnly(14, 15, 16);\n\nawait Expect.That(subjectB).IsEqualTo(new TimeOnly(14, 15, 16));\nawait Expect.That(subjectB).IsNotEqualTo(new TimeOnly(13, 15, 16));\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'DateOnly subjectA = new DateOnly(2024, 12, 24);\n\nawait Expect.That(subjectA).IsEqualTo(new DateOnly(2024, 12, 23)).Within(TimeSpan.FromDays(1))\n  .Because("we accept values between 2024-12-22 and 2024-12-24");\n\nTimeOnly subjectB = new TimeOnly(14, 15, 16);\n\nawait Expect.That(subjectB).IsEqualTo(new TimeOnly(14, 15, 17)).Within(TimeSpan.FromSeconds(1))\n  .Because("we accept values between 14:15:16 and 14:15:18");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"one-of",children:"One of"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify that the ",(0,s.jsx)(n.code,{children:"DateOnly"})," or ",(0,s.jsx)(n.code,{children:"TimeOnly"})," is one of many alternatives:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = new DateOnly(2024, 12, 24);\n\nawait Expect.That(subjectA).IsOneOf([new DateOnly(2024, 12, 23), new DateOnly(2024, 12, 24)]);\nawait Expect.That(subjectA).IsNotOneOf([new DateOnly(2024, 12, 23), new DateOnly(2024, 12, 25)]);\n\nTimeOnly subjectB = new TimeOnly(14, 15, 16);\n\nawait Expect.That(subjectB).IsOneOf([new TimeOnly(14, 15, 15), new TimeOnly(14, 15, 16)]);\nawait Expect.That(subjectB).IsNotOneOf([new TimeOnly(13, 15, 16), new TimeOnly(13, 14, 15)]);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'DateOnly subjectA = new DateOnly(2024, 12, 24);\n\nawait Expect.That(subjectA).IsOneOf([new DateOnly(2024, 12, 23)]).Within(TimeSpan.FromDays(1))\n  .Because("we accept values between 2024-12-22 and 2024-12-24");\n\nTimeOnly subjectB = new TimeOnly(14, 15, 16);\n\nawait Expect.That(subjectB).IsOneOf([new TimeOnly(14, 15, 17)]).Within(TimeSpan.FromSeconds(1))\n  .Because("we accept values between 14:15:16 and 14:15:18");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"after",children:"After"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify that the ",(0,s.jsx)(n.code,{children:"DateOnly"})," or ",(0,s.jsx)(n.code,{children:"TimeOnly"})," is (on or) after another value"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = DateOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectA).IsAfter(new DateOnly(2024, 1, 1));\nawait Expect.That(subjectA).IsOnOrAfter(new DateOnly(2024, 1, 1));\n\nTimeOnly subjectB = TimeOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectB).IsAfter(new TimeOnly(0, 0, 0));\nawait Expect.That(subjectB).IsOnOrAfter(new TimeOnly(0, 0, 0));\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = DateOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectA).IsAfter(DateOnly.FromDateTime(DateTime.Now)).Within(TimeSpan.FromDays(1));\n\nTimeOnly subjectB = TimeOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectB).IsAfter(TimeOnly.FromDateTime(DateTime.Now)).Within(TimeSpan.FromSeconds(1));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"before",children:"Before"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify that the ",(0,s.jsx)(n.code,{children:"DateOnly"})," or ",(0,s.jsx)(n.code,{children:"TimeOnly"})," is (on or) before another value"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = DateOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectA).IsBefore(new DateOnly(2124, 12, 31));\nawait Expect.That(subjectA).IsOnOrBefore(new DateOnly(2124, 12, 31));\n\nTimeOnly subjectB = TimeOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectB).IsBefore(new TimeOnly(23, 59, 59));\nawait Expect.That(subjectB).IsOnOrBefore(new TimeOnly(23, 59, 59));\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subjectA = DateOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectA).IsBefore(DateOnly.FromDateTime(DateTime.Now)).Within(TimeSpan.FromDays(1));\n\nTimeOnly subjectB = TimeOnly.FromDateTime(DateTime.Now);\n\nawait Expect.That(subjectB).IsBefore(TimeOnly.FromDateTime(DateTime.Now)).Within(TimeSpan.FromSeconds(1));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify, the properties of the ",(0,s.jsx)(n.code,{children:"DateTime"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subject = new DateOnly(2024, 12, 31);\n\nawait Expect.That(subject).HasYear().EqualTo(2024);\nawait Expect.That(subject).HasMonth().EqualTo(12);\nawait Expect.That(subject).HasDay().EqualTo(31);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can verify, the properties of the ",(0,s.jsx)(n.code,{children:"TimeOnly"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"TimeOnly subject = new TimeOnly(15, 16, 17, 189);\n\nawait Expect.That(subject).HasHour().EqualTo(15);\nawait Expect.That(subject).HasMinute().EqualTo(16);\nawait Expect.That(subject).HasSecond().EqualTo(17);\nawait Expect.That(subject).HasMillisecond().EqualTo(189);\n"})}),"\n",(0,s.jsx)(n.p,{children:"All property verifications support the following comparisons:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DateOnly subject = new DateOnly(2024, 12, 31);\n\nawait Expect.That(subject).HasYear().EqualTo(2024);\nawait Expect.That(subject).HasYear().NotEqualTo(2020);\nawait Expect.That(subject).HasYear().GreaterThan(2023);\nawait Expect.That(subject).HasYear().GreaterThanOrEqualTo(2024);\nawait Expect.That(subject).HasYear().LessThanOrEqualTo(2024);\nawait Expect.That(subject).HasYear().LessThan(2025);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function c(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);