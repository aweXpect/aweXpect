"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[7924],{6475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"getting-started","title":"Getting started","description":"Installation","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/aweXpect/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/getting-started.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Expectations","permalink":"/aweXpect/docs/category/expectations"}}');var i=n(4848),r=n(8453);const a={sidebar_position:1},c="Getting started",o={},l=[{value:"Installation",id:"installation",level:2},{value:"Write your first expectation",id:"write-your-first-expectation",level:2},{value:"Add a reason",id:"add-a-reason",level:2},{value:"Detecting test frameworks",id:"detecting-test-frameworks",level:2},{value:"Multiple expectations",id:"multiple-expectations",level:2},{value:"On the same property",id:"on-the-same-property",level:3},{value:"On different properties of the same subject",id:"on-different-properties-of-the-same-subject",level:3},{value:"On different subjects",id:"on-different-subjects",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"getting-started",children:"Getting started"})}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Install the ",(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/aweXpect",children:(0,i.jsx)(t.code,{children:"aweXpect"})})," nuget package"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ps",children:"dotnet add package aweXpect\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Add the following ",(0,i.jsx)(t.code,{children:"using"})," statement:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"using aweXpect;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This brings the static ",(0,i.jsx)(t.code,{children:"Expect"})," class and lots of extension methods into scope."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Simplify expectations (optional)",(0,i.jsx)(t.br,{}),"\n","If you want to simplify the assertions, you can add a ",(0,i.jsx)(t.code,{children:"global using static aweXpect.Expect;"})," statement anywhere in\nyour test project.\nThis allows writing a more concise syntax:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"//    \u2193 Default behaviour\nawait Expect.That(subject).Should().BeTrue();\nawait That(subject).Should().BeTrue();\n//    \u2191 With global static\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"write-your-first-expectation",children:"Write your first expectation"}),"\n",(0,i.jsx)(t.p,{children:"Write your first expectation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async Task SomeMethod_WhenInputIsInvalid_ShouldReturnFalse()\n{\n  bool result = SomeMethod("invalid input");\n  \n  await Expect.That(result).Should().BeFalse();\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If it fails, it will throw a ",(0,i.jsx)(t.a,{href:"#detecting-test-frameworks",children:"framework-specific"})," exception with the following message:"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Expected result to\nbe False,\nbut it was True\n"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"add-a-reason",children:"Add a reason"}),"\n",(0,i.jsx)(t.p,{children:"You can add a reason for all expectations, that will be included in the exception message:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async Task SomeMethod_WhenInputIsInvalid_ShouldReturnFalse()\n{\n  bool result = SomeMethod("invalid input");\n  \n  await Expect.That(result).Should().BeFalse().Because("the input was invalid");\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"This will result in"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Expected result to\nbe False, because the input was invalid,\nbut it was True\n"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"detecting-test-frameworks",children:"Detecting test frameworks"}),"\n",(0,i.jsx)(t.p,{children:"We support a lot of different unit testing frameworks:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/microsoft/testfx/",children:"Microsoft Test Framework"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://xunit.net/",children:"xUnit"})," (v2 & v3)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://nunit.org/",children:"NUnit"})," (v3 & v4)"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://thomhurst.github.io/TUnit/",children:"TUnit"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"When you have a reference to the corresponding test framework\nassembly, we will automatically throw the corresponding exceptions."}),"\n",(0,i.jsx)(t.h2,{id:"multiple-expectations",children:"Multiple expectations"}),"\n",(0,i.jsx)(t.p,{children:"You can combine multiple expectations in different ways:"}),"\n",(0,i.jsx)(t.h3,{id:"on-the-same-property",children:"On the same property"}),"\n",(0,i.jsxs)(t.p,{children:["Simply use ",(0,i.jsx)(t.code,{children:".And"})," or ",(0,i.jsx)(t.code,{children:".Or"})," to combine multiple expectations, e.g."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'string subject = "something different"\nawait Expect.That(subject).Should().StartWith("some").And.EndWith("text");\n'})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Expected subject to\nstart with "some" and end with "text",\nbut it was "something different"\n'})}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"on-different-properties-of-the-same-subject",children:"On different properties of the same subject"}),"\n",(0,i.jsxs)(t.p,{children:["Use the ",(0,i.jsx)(t.code,{children:"For"}),"-syntax to access different properties of a common subject and combine them again with ",(0,i.jsx)(t.code,{children:".And"})," or ",(0,i.jsx)(t.code,{children:".Or"}),", e.g."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'  public record MyClass(int Status, string Content);\n  MyClass subject = new(1, "some other content");\n  \n  await Expect.That(subject)\n    .For(x => x.Status, x => x.Should().BeGreaterThan(1)).And\n    .For(x => x.Content, x => x.Should().Be("some content"));\n'})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Expected subject to\nfor .Status be greater than 1 and for .Content be equal to "some content",\nbut .Status was 1 and .Content was "some other content" which differs at index 5:\n        \u2193 (actual)\n  "some other content"\n  "some content"\n        \u2191 (expected)\n'})}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"on-different-subjects",children:"On different subjects"}),"\n",(0,i.jsxs)(t.p,{children:["Use the ",(0,i.jsx)(t.code,{children:"Expect.ThatAll"})," or ",(0,i.jsx)(t.code,{children:"Expect.ThatAny"})," syntax to combine arbitrary expectations, e.g."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'  string subjectA = "ABC";\n  string subjectB = "XYZ";\n  \n  await Expect.ThatAll(\n    Expect.That(subjectA).Should().Be("ABC"),\n    Expect.That(subjectB).Should().Be("DEF"));\n'})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Expected all of the following to succeed:\n [01] Expected subjectA to be equal to "ABC"\n [02] Expected subjectB to be equal to "DEF"\nbut\n [02] it was "XYZ" which differs at index 0:\n         \u2193 (actual)\n        "XYZ"\n        "DEF"\n         \u2191 (expected)\n'})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);