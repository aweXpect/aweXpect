"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[262],{1123:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"expectations/advanced/callbacks","title":"Callbacks","description":"Describes the possible expectations for working with callbacks.","source":"@site/docs/expectations/advanced/03-callbacks.md","sourceDirName":"expectations/advanced","slug":"/expectations/advanced/callbacks","permalink":"/docs/expectations/advanced/callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/advanced/03-callbacks.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Cancellation","permalink":"/docs/expectations/advanced/cancellation"},"next":{"title":"Ref struct types","permalink":"/docs/expectations/advanced/ref-struct"}}');var i=n(4848),l=n(8453);const t={},c="Callbacks",r={},o=[{value:"Signaler",id:"signaler",level:2},{value:"Timeout",id:"timeout",level:3},{value:"Amount",id:"amount",level:3},{value:"Parameters",id:"parameters",level:3}];function d(e){const a={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"callbacks",children:"Callbacks"})}),"\n",(0,i.jsx)(a.p,{children:"Describes the possible expectations for working with callbacks."}),"\n",(0,i.jsx)(a.h2,{id:"signaler",children:"Signaler"}),"\n",(0,i.jsxs)(a.p,{children:["First, you have to start recording callback signals using the ",(0,i.jsx)(a.code,{children:"Signaler"}),' class. This class is available in the "\naweXpect.Signaling" namespace.']}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"// \u2193 Counts signals from callbacks without parameters\nSignaler signaler = new();\nSignaler<string> signaler = new();\n// \u2191 Counts signals from callbacks with a string parameter\n"})}),"\n",(0,i.jsx)(a.p,{children:"Then, you can signal the callback on the recording."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"class MyClass\n{\n  public void Execute(Action<string> onCompleted)\n  {\n    // do something in a background thread and then call the onCompleted callback\n  }\n}\n\nsut.Execute(v => signaler.Signal(v));\n"})}),"\n",(0,i.jsx)(a.p,{children:"At last, you can wait for the callback to be signaled:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"await Expect.That(signaler).Signaled();\n"})}),"\n",(0,i.jsx)(a.p,{children:"You can also verify that the callback will not be signaled:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"await Expect.That(signaler).DidNotSignal();\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.em,{children:"NOTE: The last statement will result never return, unless a timeout or cancellation is specified.\nTherefore, when nothing is specified, a default timeout of 30 seconds is applied!"})}),"\n",(0,i.jsx)(a.h3,{id:"timeout",children:"Timeout"}),"\n",(0,i.jsx)(a.p,{children:"You can specify a timeout, how long you want to wait for the callback to be signaled:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'await Expect.That(signaler).Signaled().Within(TimeSpan.FromSeconds(5))\n  .Because("it should take at most 5 seconds to complete");\n'})}),"\n",(0,i.jsxs)(a.p,{children:["Alternatively you can also use a ",(0,i.jsx)(a.code,{children:"CancellationToken"})," for a timeout:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'CancellationToken cancellationToken = new CancellationTokenSource(5000).Token;\nawait Expect.That(signaler).Signaled().WithCancellation(cancellationToken)\n  .Because("it should be completed, before the cancellationToken is cancelled");\n'})}),"\n",(0,i.jsx)(a.h3,{id:"amount",children:"Amount"}),"\n",(0,i.jsx)(a.p,{children:"You can specify a number of times, that a callback must at least be signaled:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"await Expect.That(signaler).Signaled(3.Times());\n"})}),"\n",(0,i.jsx)(a.p,{children:"You can also verify that the callback was not signaled at least the given number of times:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"await Expect.That(signaler).DidNotSignal(3.Times());\n"})}),"\n",(0,i.jsx)(a.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(a.p,{children:"You can also include a parameter during signaling:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'Signaler<string> signaler = new();\n\nsignaler.Signal("foo");\nsignaler.Signal("bar");\n\nawait Expect.That(signaler).Signaled(2.Times());\n'})}),"\n",(0,i.jsxs)(a.p,{children:["You can filter for signals with specific parameters by providing a ",(0,i.jsx)(a.code,{children:"predicate"}),":"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'Signaler<string> signaler = new();\n\nsignaler.Signal("foo");\nsignaler.Signal("bar");\nsignaler.Signal("foo");\n\nawait Expect.That(signaler).Signaled(2.Times()).With(p => p == "foo");\n'})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.em,{children:"In case of a failed expectation, the recorded parameters will be displayed in the error message."})})]})}function h(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>c});var s=n(6540);const i={},l=s.createContext(i);function t(e){const a=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:a},e.children)}}}]);