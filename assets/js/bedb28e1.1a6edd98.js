"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[1966],{3548:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"expectations/number","title":"Number","description":"Describes the possible expectations for numbers.","source":"@site/docs/expectations/03-number.md","sourceDirName":"expectations","slug":"/expectations/number","permalink":"/docs/expectations/number","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/03-number.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"String","permalink":"/docs/expectations/string"},"next":{"title":"Enum","permalink":"/docs/expectations/enum"}}');var s=t(4848),i=t(8453);const c={},r="Number",l={},o=[{value:"Equality",id:"equality",level:2},{value:"One of",id:"one-of",level:2},{value:"Greater than",id:"greater-than",level:2},{value:"Less than",id:"less-than",level:2},{value:"Positive / negative",id:"positive--negative",level:2},{value:"NaN",id:"nan",level:2},{value:"Infinity",id:"infinity",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"number",children:"Number"})}),"\n",(0,s.jsx)(n.p,{children:"Describes the possible expectations for numbers."}),"\n",(0,s.jsx)(n.h2,{id:"equality",children:"Equality"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the number is equal to another one or not:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int subject = 42;\n\nawait Expect.That(subject).IsEqualTo(42);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'double subject = 42.1;\n\nawait Expect.That(subject).IsEqualTo(42).Within(0.2)\n  .Because("we accept values between 41.8 and 42.2 (42 \xb1 0.2)");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"one-of",children:"One of"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the number is one of many alternatives:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int subject = 42;\n\nawait Expect.That(subject).IsOneOf(40, 42, 44);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'double subject = 42.1;\n\nawait Expect.That(subject).IsOneOf(40, 42, 44).Within(0.2)\n  .Because("we accept values between 39.8 and 40.2 or 41.8 and 42.2 or 43.8 and 44.2");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"greater-than",children:"Greater than"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the number is greater than (or equal to) another number:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int subject = 42;\n\nawait Expect.That(subject).IsGreaterThan(41);\nawait Expect.That(subject).IsGreaterThanOrEqualTo(42);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'double subject = 41.9;\n\nawait Expect.That(subject).IsGreaterThan(42).Within(0.2)\n  .Because("we accept values greater than 41.8 (42 \xb1 0.2)");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"less-than",children:"Less than"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the number is less than (or equal to) another number:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int subject = 42;\n\nawait Expect.That(subject).IsLessThanOrEqualTo(42);\nawait Expect.That(subject).IsLessThan(43);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'double subject = 42.1;\n\nawait Expect.That(subject).IsLessThan(42).Within(0.2)\n  .Because("we accept values less than 42.2 (42 \xb1 0.2)");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"positive--negative",children:"Positive / negative"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the number is positive or negative:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(42).IsPositive();\nawait Expect.That(-3).IsNegative();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Note: these expectations are only available for signed numbers."})}),"\n",(0,s.jsx)(n.h2,{id:"nan",children:"NaN"}),"\n",(0,s.jsxs)(n.p,{children:["For floating point numbers you can verify, that the number is ",(0,s.jsx)(n.code,{children:"NaN"})," or not:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(float.NaN).IsNaN();\nawait Expect.That(42.0).IsNotNaN();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"infinity",children:"Infinity"}),"\n",(0,s.jsx)(n.p,{children:"For floating point numbers you can verify, that the number is finite or infinite:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"await Expect.That(float.PositiveInfinity).IsInfinite();\nawait Expect.That(42.0).IsFinite();\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function c(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);