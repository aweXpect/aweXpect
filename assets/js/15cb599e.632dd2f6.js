"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[454],{4983:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"expectations/collections","title":"Collections","description":"Describes the possible expectations for collections.","source":"@site/docs/expectations/collections.md","sourceDirName":"expectations","slug":"/expectations/collections","permalink":"/aweXpect/docs/expectations/collections","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/collections.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"HTTP","permalink":"/aweXpect/docs/expectations/http"},"next":{"title":"Delegates","permalink":"/aweXpect/docs/expectations/delegates"}}');var s=a(4848),i=a(8453);const c={sidebar_position:13},l="Collections",o={},r=[{value:"All",id:"all",level:2},{value:"At least",id:"at-least",level:2},{value:"At most",id:"at-most",level:2},{value:"Between",id:"between",level:2},{value:"None",id:"none",level:2},{value:"Contain",id:"contain",level:2},{value:"Predicate",id:"predicate",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"collections",children:"Collections"})}),"\n",(0,s.jsx)(n.p,{children:"Describes the possible expectations for collections."}),"\n",(0,s.jsx)(n.h2,{id:"all",children:"All"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that all items in the collection, satisfy an expectation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().All(x => x.Satisfy(i => i <= 20));\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"at-least",children:"At least"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that at least a fixed number of items in the collection, satisfy an expectation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().AtLeast(9.Times(), x => x.Satisfy(i => i < 10));\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"at-most",children:"At most"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that at most a fixed number of items in the collection, satisfy an expectation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().AtMost(1.Times(), x => x.Satisfy(i => i < 2));\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"between",children:"Between"}),"\n",(0,s.jsxs)(n.p,{children:["You can verify, that between ",(0,s.jsx)(n.code,{children:"minimum"})," and ",(0,s.jsx)(n.code,{children:"maximum"})," items in the collection, satisfy an expectation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\nawait Expect.That(values).Should().Between(1).And(2.Times(), x => x.Satisfy(i => i < 2));\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"none",children:"None"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that not item in the collection, satisfies an expectation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().None(x => x.Satisfy(i => i > 20));\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"contain",children:"Contain"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the collection contains a specific item or not:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().Contain(13);\nawait Expect.That(values).Should().NotContain(42);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also set occurrence constraints on ",(0,s.jsx)(n.code,{children:"Contain"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = [1, 1, 1, 2];\n\nawait Expect.That(values).Should().Contain(1).AtLeast(2.Times());\nawait Expect.That(values).Should().Contain(1).Exactly(3.Times());\nawait Expect.That(values).Should().Contain(1).AtMost(4.Times());\nawait Expect.That(values).Should().Contain(1).Between(1).And(5.Times());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also use a ",(0,s.jsx)(n.a,{href:"/docs/expectations/object#custom-comparer",children:"custom comparer"})," or configure ",(0,s.jsx)(n.a,{href:"/docs/expectations/object#equivalence",children:"equivalence"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<MyClass> values = //...\nMyClass expected = //...\n\nawait Expect.That(values).Should().Contain(expected).Equivalent();\nawait Expect.That(values).Should().Contain(expected).Using(new MyClassComparer());\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"predicate",children:"Predicate"}),"\n",(0,s.jsx)(n.p,{children:"You can verify, that the collection contains an item that satisfies a condition:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = Enumerable.Range(1, 20);\n\nawait Expect.That(values).Should().Contain(x => x > 12 && x < 14);\nawait Expect.That(values).Should().NotContain(x => x >= 42);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also set occurrence constraints on ",(0,s.jsx)(n.code,{children:"Contain"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEnumerable<int> values = [1, 1, 1, 2];\n\nawait Expect.That(values).Should().Contain(x => x == 1).AtLeast(2.Times());\nawait Expect.That(values).Should().Contain(x => x == 1).Exactly(3.Times());\nawait Expect.That(values).Should().Contain(x => x == 1).AtMost(4.Times());\nawait Expect.That(values).Should().Contain(x => x == 1).Between(1).And(5.Times());\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: The same expectation works also for ",(0,s.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>l});var t=a(6540);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);