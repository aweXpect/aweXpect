"use strict";(globalThis.webpackChunkpages=globalThis.webpackChunkpages||[]).push([[5450],{3096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"expectations/getting-started","title":"Getting started","description":"Installation","source":"@site/docs/expectations/00-getting-started.md","sourceDirName":"expectations","slug":"/expectations/getting-started","permalink":"/docs/expectations/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/00-getting-started.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{},"sidebar":"documentationSidebar","next":{"title":"Boolean","permalink":"/docs/expectations/boolean"}}');var i=n(4848),a=n(8453);const r={},l="Getting started",c={},o=[{value:"Installation",id:"installation",level:2},{value:"Write your first expectation",id:"write-your-first-expectation",level:2},{value:"Add a reason",id:"add-a-reason",level:2},{value:"Migration",id:"migration",level:2},{value:"Detecting test frameworks",id:"detecting-test-frameworks",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"getting-started",children:"Getting started"})}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Install the ",(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/aweXpect",children:(0,i.jsx)(t.code,{children:"aweXpect"})})," nuget package"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ps",children:"dotnet add package aweXpect\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Add the following ",(0,i.jsx)(t.code,{children:"using"})," statement:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"using aweXpect;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This brings the static ",(0,i.jsx)(t.code,{children:"Expect"})," class and lots of extension methods into scope."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Simplify expectations (optional)",(0,i.jsx)(t.br,{}),"\n","If you want to simplify the assertions, you can add a ",(0,i.jsx)(t.code,{children:"global using static aweXpect.Expect;"})," statement anywhere in\nyour test project.\nThis allows writing a more concise syntax:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"//    \u2193 Default behaviour\nawait Expect.That(subject).IsTrue();\nawait That(subject).IsTrue();\n//    \u2191 With global static\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"write-your-first-expectation",children:"Write your first expectation"}),"\n",(0,i.jsx)(t.p,{children:"Write your first expectation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async Task SomeMethod_WhenInputIsInvalid_ShouldReturnFalse()\n{\n  bool result = SomeMethod("invalid input");\n  \n  await Expect.That(result).IsFalse();\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If it fails, it will throw a ",(0,i.jsx)(t.a,{href:"#detecting-test-frameworks",children:"framework-specific"})," exception with the following message:"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Expected result to\nbe False,\nbut it was True\n"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"add-a-reason",children:"Add a reason"}),"\n",(0,i.jsx)(t.p,{children:"You can add a reason for all expectations, that will be included in the exception message:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async Task SomeMethod_WhenInputIsInvalid_ShouldReturnFalse()\n{\n  bool result = SomeMethod("invalid input");\n  \n  await Expect.That(result).IsFalse().Because("the input was invalid");\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"This will result in"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Expected result to\nbe False, because the input was invalid,\nbut it was True\n"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"migration",children:"Migration"}),"\n",(0,i.jsx)(t.p,{children:"We added support to migrate from other testing frameworks."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Temporarily install the\n",(0,i.jsx)(t.a,{href:"https://github.com/aweXpect/aweXpect.Migration",children:"aweXpect.Migration"})," package ",(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/aweXpect.Migration",children:(0,i.jsx)(t.img,{src:"https://img.shields.io/nuget/v/aweXpect.Migration",alt:"Nuget"})}),"\nin the test project and add the following global using statements in the test project:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"global using System.Threading.Tasks;\nglobal using aweXpect;\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Depending on the framework, the assertions will be marked with a warning:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["For ",(0,i.jsx)(t.a,{href:"https://fluentassertions.com/",children:"FluentAssertions"}),":",(0,i.jsx)(t.br,{}),"\n","All usages of ",(0,i.jsx)(t.code,{children:".Should()"})," will be marked with\n",(0,i.jsx)(t.code,{children:"aweXpectM002: fluentassertions should be migrated to aweXpect"})]}),"\n",(0,i.jsxs)(t.li,{children:["For ",(0,i.jsx)(t.a,{href:"https://xunit.net/",children:"Xunit"}),":",(0,i.jsx)(t.br,{}),"\n","All usages of ",(0,i.jsx)(t.code,{children:"Assert"})," will be marked with ",(0,i.jsx)(t.code,{children:"aweXpectM003: Xunit assertions should be migrated to aweXpect"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Most warnings can be automatically fixed with a code fix provider. Make sure to await all migrated expectations (fix ",(0,i.jsx)(t.code,{children:"aweXpect0001: Expectations must be awaited or verified"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Fix the remaining warnings manually."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Remove the ",(0,i.jsx)(t.code,{children:"aweXpect.Migration"})," package again."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"detecting-test-frameworks",children:"Detecting test frameworks"}),"\n",(0,i.jsx)(t.p,{children:"We support a lot of different unit testing frameworks:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/microsoft/testfx/",children:"Microsoft Test Framework"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://xunit.net/",children:"xUnit"})," (v2 & v3)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://nunit.org/",children:"NUnit"})," (v3 & v4)"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://thomhurst.github.io/TUnit/",children:"TUnit"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"When you have a reference to the corresponding test framework\nassembly, we will automatically throw the corresponding exceptions."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);