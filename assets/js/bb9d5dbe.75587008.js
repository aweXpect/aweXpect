"use strict";(globalThis.webpackChunkpages=globalThis.webpackChunkpages||[]).push([[3004],{7852:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"expectations/events","title":"Events","description":"Describes the possible expectations for verifying events.","source":"@site/docs/expectations/09-events.md","sourceDirName":"expectations","slug":"/expectations/events","permalink":"/docs/expectations/events","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/09-events.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Object","permalink":"/docs/expectations/object"},"next":{"title":"TimeSpan","permalink":"/docs/expectations/timespan"}}');var s=r(4848),o=r(8453);const c={},d="Events",a={},i=[{value:"Recording",id:"recording",level:2},{value:"Triggering",id:"triggering",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Timeout",id:"timeout",level:2},{value:"Sender",id:"sender",level:3},{value:"EventArgs",id:"eventargs",level:3},{value:"Counting",id:"counting",level:2},{value:"Special events",id:"special-events",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,s.jsx)(n.p,{children:"Describes the possible expectations for verifying events."}),"\n",(0,s.jsx)(n.h2,{id:"recording",children:"Recording"}),"\n",(0,s.jsxs)(n.p,{children:["First, you have to start a recording of events. This can be done with the ",(0,s.jsx)(n.code,{children:".Record().Events()"}),' extension method in the "\naweXpect.Recording" namespace.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"class ThresholdReachedEventArgs(int threshold = 0) : EventArgs\n{\n    public int Threshold { get; } = threshold;\n}\nclass MyClass\n{\n  public event EventHandler? ThresholdReached;\n  public void OnThresholdReached(ThresholdReachedEventArgs e)\n    => ThresholdReached?.Invoke(this, e);\n}\nMyClass sut = new MyClass();\n\n// \u2193 Records all events\nIEventRecording<MyClass> recording = sut.Record().Events();\nIEventRecording<MyClass> recording = sut.Record().Events(nameof(MyClass.ThresholdReached));\n// \u2191 Records only the ThresholdReached event\n"})}),"\n",(0,s.jsx)(n.h2,{id:"triggering",children:"Triggering"}),"\n",(0,s.jsx)(n.p,{children:"You can verify that a recording recorded an event:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Start the recording\nIEventRecording<MyClass> recording = sut.Record().Events();\n\n// Perform some action on the subject under test\nsut.OnThresholdReached(new ThresholdReachedEventArgs());\n\n// Expect that the ThresholdReached event was triggered at least once\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,s.jsx)(n.p,{children:"You can filter the recorded events based on their parameters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEventRecording<MyClass> recording = sut.Record().Events();\n\nsut.OnThresholdReached(new ThresholdReachedEventArgs(5));\nsut.OnThresholdReached(new ThresholdReachedEventArgs(15));\n\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached))\n  .WithParameter<ThresholdReachedEventArgs>(e => e.Threshold > 10);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"timeout",children:"Timeout"}),"\n",(0,s.jsx)(n.p,{children:"You can specify a timeout within the expected events should be triggered:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEventRecording<MyClass> recording = sut.Record().Events();\n\n_ = Task.Delay(2.Seconds()).ContinueWith(_ => {\n    // Trigger the events in the background\n    sut.OnThresholdReached(new ThresholdReachedEventArgs(5));\n    sut.OnThresholdReached(new ThresholdReachedEventArgs(15));\n});\n\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached))\n  .WithParameter<ThresholdReachedEventArgs>(e => e.Threshold > 10)\n  .Within(3.Seconds());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".Within(TimeSpan)"})," method will wait up to 3 seconds for the expected events and\nfinish successfully as soon as the events are triggered."]}),"\n",(0,s.jsx)(n.h3,{id:"sender",children:"Sender"}),"\n",(0,s.jsxs)(n.p,{children:["When you follow\nthe ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern",children:"event best practices"}),",\nyou can filter the recorded events based on the sender (the first parameter):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEventRecording<MyClass> recording = sut.Record().Events();\n\nsut.OnThresholdReached(new ThresholdReachedEventArgs(5));\n\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached))\n  .WithSender(s => s == sut);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"eventargs",children:"EventArgs"}),"\n",(0,s.jsxs)(n.p,{children:["When you follow\nthe ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern",children:"event best practices"}),",\nyou can filter the recorded events based on their ",(0,s.jsx)(n.code,{children:"EventArgs"})," (the second parameter):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEventRecording<MyClass> recording = sut.Record().Events();\n\nsut.OnThresholdReached(new ThresholdReachedEventArgs(5));\n\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached))\n  .With<ThresholdReachedEventArgs>(e => e < 10);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"counting",children:"Counting"}),"\n",(0,s.jsx)(n.p,{children:"You can verify that an event was recorded a specific number of times"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IEventRecording<MyClass> recording = sut.Record().Events();\n\nsut.OnThresholdReached(new ThresholdReachedEventArgs(5));\nsut.OnThresholdReached(new ThresholdReachedEventArgs(15));\n\nawait Expect.That(recording).Triggered(nameof(MyClass.ThresholdReached))\n  .Between(1).And(2.Times();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use the same occurrence constraints as in the ",(0,s.jsx)(n.a,{href:"/docs/expectations/collections#contain",children:"contain"})," method:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AtLeast(2.Times())"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AtMost(3.Times())"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Between(1).And(4.Times())"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Exactly(0.Times())"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"special-events",children:"Special events"}),"\n",(0,s.jsxs)(n.p,{children:["For common events, you can create specific overloads.",(0,s.jsx)(n.br,{}),"\n","Included are some overloads for the ",(0,s.jsxs)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged",children:["\n",(0,s.jsx)(n.code,{children:"INotifyPropertyChanged.PropertyChanged"})]}),"\nevent:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'MyClass sut = // ...implements INotifyPropertyChanged\nIEventRecording<MyClass> recording = sut.Record().Events();\n\n// do something that triggers the PropertyChanged event\nsut.Execute();\n\nawait Expect.That(recording).TriggeredPropertyChanged()\n  .Because("it should trigger the PropertyChanged event for any property name");\n\nawait Expect.That(recording).TriggeredPropertyChangedFor(x => x.MyProperty)\n  .Because("it should trigger the PropertyChanged event for the \'MyProperty\' property name");\n\nawait Expect.That(recording).DidNotTriggerPropertyChanged()\n  .Because("it should not trigger for any property name");\n\nawait Expect.That(recording).DidNotTriggerPropertyChangedFor(x => x.MyProperty)\n  .Because("it should not trigger for the \'MyProperty\' property name");\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var t=r(6540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);