"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[1168],{4306:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"expectations/object","title":"Object","description":"Describes the possible expectations for objects.","source":"@site/docs/expectations/07-object.md","sourceDirName":"expectations","slug":"/expectations/object","permalink":"/docs/expectations/object","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/07-object.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Collections","permalink":"/docs/expectations/collections"},"next":{"title":"Events","permalink":"/docs/expectations/events"}}');var c=s(4848),a=s(8453);const l={},o="Object",i={},r=[{value:"Equality",id:"equality",level:2},{value:"Reference equality",id:"reference-equality",level:3},{value:"Custom comparer",id:"custom-comparer",level:3},{value:"Equivalence",id:"equivalence",level:2},{value:"Type check",id:"type-check",level:2},{value:"Null",id:"null",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"object",children:"Object"})}),"\n",(0,c.jsx)(t.p,{children:"Describes the possible expectations for objects."}),"\n",(0,c.jsx)(t.h2,{id:"equality",children:"Equality"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, that the ",(0,c.jsx)(t.code,{children:"object"})," is equal to another one or not:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"record MyClass(int Value);\nMyClass subject = new(1);\n\nawait Expect.That(subject).IsEqualTo(new MyClass(1));\nawait Expect.That(subject).IsNotEqualTo(new MyClass(2));\n"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsxs)(t.em,{children:["Note: this uses the underlying ",(0,c.jsx)(t.code,{children:"object.Equals(object?, object?)"})," method"]})}),"\n",(0,c.jsx)(t.h3,{id:"reference-equality",children:"Reference equality"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, that the ",(0,c.jsx)(t.code,{children:"object"})," has the same reference as another one:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"record MyClass(int Value);\nMyClass subject = new(1);\n\nawait Expect.That(subject).IsSameAs(subject);\nawait Expect.That(subject).IsNotSameAs(new MyClass(1));\n"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsxs)(t.em,{children:["Note: this uses the underlying ",(0,c.jsx)(t.code,{children:"object.ReferenceEquals(object?, object?)"})," method"]})}),"\n",(0,c.jsx)(t.h3,{id:"custom-comparer",children:"Custom comparer"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, that the ",(0,c.jsx)(t.code,{children:"object"})," is equal to another one while using a custom ",(0,c.jsx)(t.code,{children:"IEqualityComparer<object>"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"class MyClassComparer : IEqualityComparer<object>\n{\n  public bool Equals(object? x, object? y)\n    => x != null && y != null;\n  public int GetHashCode(object obj)\n    => obj.GetHashCode();\n}\nMyClass subject = new(1);\n\nawait Expect.That(subject).IsEqualTo(new MyClass(2)).Using(new MyClassComparer());\n"})}),"\n",(0,c.jsx)(t.h2,{id:"equivalence",children:"Equivalence"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, that the ",(0,c.jsx)(t.code,{children:"object"})," is equivalent to another one or not:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"class MyClass(int value)\n{\n  int Value { get; } = value;\n}\nMyClass subject = new(1);\n\nawait Expect.That(subject).IsEqualTo(new MyClass(1)).Equivalent();\nawait Expect.That(subject).IsNotEqualTo(new MyClass(2)).Equivalent();\n"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Note: this compares recursively all properties on the two objects for equivalence."})}),"\n",(0,c.jsx)(t.h2,{id:"type-check",children:"Type check"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, that the ",(0,c.jsx)(t.code,{children:"object"})," is of a given type or not:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"object subject = new MyClass(1);\n\nawait Expect.That(subject).Is<MyClass>();\nawait Expect.That(subject).Is(typeof(MyClass));\nawait Expect.That(subject).IsNot<OtherClass>();\nawait Expect.That(subject).IsNot(typeof(OtherClass));\n"})}),"\n",(0,c.jsx)(t.p,{children:"This verifies, if the subject is of the given type or a derived type."}),"\n",(0,c.jsxs)(t.p,{children:["You can also verify, that the ",(0,c.jsx)(t.code,{children:"object"})," is only of the given type and not of a derived type:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"object subject = new MyClass(1);\n\nawait Expect.That(subject).IsExactly<MyClass>();\nawait Expect.That(subject).IsExactly(typeof(MyClass));\nawait Expect.That(subject).IsNotExactly<OtherClass>();\nawait Expect.That(subject).IsNotExactly(typeof(OtherClass));\n"})}),"\n",(0,c.jsx)(t.h2,{id:"null",children:"Null"}),"\n",(0,c.jsxs)(t.p,{children:["You can verify, if the ",(0,c.jsx)(t.code,{children:"object"})," is ",(0,c.jsx)(t.code,{children:"null"})," or not:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"object? subject = null;\n\nawait Expect.That(subject).IsNull();\nawait Expect.That(new object()).IsNotNull();\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>o});var n=s(6540);const c={},a=n.createContext(c);function l(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);