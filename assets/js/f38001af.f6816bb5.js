"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[774],{651:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"expectations/datetime-offset","title":"DateTime / DateTimeOffset","description":"Describes the possible expectations for DateTime and DateTimeOffset.","source":"@site/docs/expectations/datetime-offset.md","sourceDirName":"expectations","slug":"/expectations/datetime-offset","permalink":"/aweXpect/docs/expectations/datetime-offset","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/datetime-offset.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"TimeSpan","permalink":"/aweXpect/docs/expectations/timespan"},"next":{"title":"DateOnly / TimeOnly","permalink":"/aweXpect/docs/expectations/date-time-only"}}');var s=a(4848),i=a(8453);const c={sidebar_position:7},o="DateTime / DateTimeOffset",r={},d=[{value:"Equality",id:"equality",level:2},{value:"After",id:"after",level:2},{value:"Before",id:"before",level:2},{value:"Properties",id:"properties",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"datetime--datetimeoffset",children:"DateTime / DateTimeOffset"})}),"\n",(0,s.jsxs)(t.p,{children:["Describes the possible expectations for ",(0,s.jsx)(t.code,{children:"DateTime"})," and ",(0,s.jsx)(t.code,{children:"DateTimeOffset"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"equality",children:"Equality"}),"\n",(0,s.jsxs)(t.p,{children:["You can verify, that the ",(0,s.jsx)(t.code,{children:"DateTime"})," or ",(0,s.jsx)(t.code,{children:"DateTimeOffset"})," is equal to another one or not:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"DateTime subject1 = new DateTime(2024, 12, 24);\n\nawait Expect.That(subject1).Should().Be(new DateTime(2024, 12, 24));\n\nDateTimeOffset subject2 = new DateTimeOffset(2024, 12, 24, 13, 15, 0, TimeSpan.FromHours(2));\n\nawait Expect.That(subject2).Should().Be(new DateTimeOffset(2024, 12, 24, 13, 15, 0, TimeSpan.FromHours(2)));\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'DateTime subject1 = new DateTime(2024, 12, 24);\n\nawait Expect.That(subject1).Should().Be(new DateTime(2024, 12, 23)).Within(TimeSpan.FromDays(1))\n  .Because("we accept values between 2024-12-23 and 2024-12-25");\n\nDateTimeOffset subject2 = new DateTimeOffset(2024, 12, 24, 13, 15, 0, TimeSpan.FromHours(2));\n\nawait Expect.That(subject2).Should().Be(new DateTimeOffset(2024, 12, 24, 13, 5, 0, TimeSpan.FromHours(2))).Within(TimeSpan.FromMinutes(10))\n  .Because("we accept values between 2024-12-24T12:55:00+2:00 and 2024-12-24T13:15:00+2:00");\n'})}),"\n",(0,s.jsx)(t.h2,{id:"after",children:"After"}),"\n",(0,s.jsxs)(t.p,{children:["You can verify, that the ",(0,s.jsx)(t.code,{children:"DateTime"})," or ",(0,s.jsx)(t.code,{children:"DateTimeOffset"})," is (on or) after another value:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"DateTime subject1 = DateTime.Now;\n\nawait Expect.That(subject1).Should().BeAfter(new DateTime(2024, 1, 1));\nawait Expect.That(subject1).Should().BeOnOrAfter(new DateTime(2024, 1, 1));\n\nDateTimeOffset subject2 = DateTimeOffset.Now;\n\nawait Expect.That(subject2).Should().BeAfter(new DateTimeOffset(2024, 1, 1, 0, 0, 0, TimeSpan.FromHours(2)));\nawait Expect.That(subject2).Should().BeOnOrAfter(new DateTimeOffset(2024, 1, 1, 0, 0, 0, TimeSpan.FromHours(2)));\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'DateTime subject = DateTime.Now;\n\nawait Expect.That(subject).Should().BeAfter(DateTime.Now).Within(TimeSpan.FromSeconds(1))\n  .Because("it should have taken less than one second");\n'})}),"\n",(0,s.jsx)(t.h2,{id:"before",children:"Before"}),"\n",(0,s.jsxs)(t.p,{children:["You can verify, that the ",(0,s.jsx)(t.code,{children:"DateTime"})," or ",(0,s.jsx)(t.code,{children:"DateTimeOffset"})," is (on or) before another value:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"DateTime subject1 = DateTime.Now;\n\nawait Expect.That(subject1).Should().BeBefore(new DateTime(2124, 12, 31));\nawait Expect.That(subject1).Should().BeOnOrBefore(new DateTime(2124, 12, 31));\n\nDateTimeOffset subject2 = DateTimeOffset.Now;\n\nawait Expect.That(subject2).Should().BeBefore(new DateTimeOffset(2124, 12, 31, 23, 59, 59, TimeSpan.FromHours(2)));\nawait Expect.That(subject2).Should().BeOnOrBefore(new DateTimeOffset(2124, 12, 31, 23, 59, 59, TimeSpan.FromHours(2)));\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can also specify a tolerance:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'DateTime subject = DateTime.Now;\n\nawait Expect.That(subject).Should().BeOnOrBefore(DateTime.Now).Within(TimeSpan.FromSeconds(1))\n  .Because("it should have taken less than one second");\n'})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:["You can verify, the properties of ",(0,s.jsx)(t.code,{children:"DateTime"})," or ",(0,s.jsx)(t.code,{children:"DateTimeOffset"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"DateTime subject = new DateTime(2024, 12, 31, 15, 16, 17, 189, DateTimeKind.Utc);\n// or\nDateTimeOffset subject = new DateTimeOffset(2024, 12, 31, 15, 16, 17, 189, TimeSpan.FromMinutes(90));\n\nawait Expect.That(subject).Should().HaveYear(2024);\nawait Expect.That(subject).Should().HaveMonth(12);\nawait Expect.That(subject).Should().HaveDay(31);\nawait Expect.That(subject).Should().HaveHour(15);\nawait Expect.That(subject).Should().HaveMinute(16);\nawait Expect.That(subject).Should().HaveSecond(17);\nawait Expect.That(subject).Should().HaveMillisecond(189);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For ",(0,s.jsx)(t.code,{children:"DateTime"})," you can also verify the ",(0,s.jsx)(t.code,{children:"Kind"})," property:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"await Expect.That(subject).Should().HaveKind(DateTimeKind.Utc);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For ",(0,s.jsx)(t.code,{children:"DateTimeOffset"})," you can also verify the ",(0,s.jsx)(t.code,{children:"Offset"})," property:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"await Expect.That(subject).Should().HaveOffset(TimeSpan.FromMinutes(90));\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>o});var n=a(6540);const s={},i=n.createContext(s);function c(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);