"use strict";(self.webpackChunkpages=self.webpackChunkpages||[]).push([[358],{7941:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"expectations/strings","title":"Strings","description":"Describes the possible expectations for strings.","source":"@site/docs/expectations/strings.md","sourceDirName":"expectations","slug":"/expectations/strings","permalink":"/aweXpect/docs/expectations/strings","draft":false,"unlisted":false,"editUrl":"https://github.com/aweXpect/aweXpect/tree/main/Docs/pages/docs/expectations/strings.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Booleans","permalink":"/aweXpect/docs/expectations/booleans"},"next":{"title":"Numbers","permalink":"/aweXpect/docs/expectations/numbers"}}');var a=n(4848),i=n(8453);const r={sidebar_position:2},c="Strings",o={},d=[{value:"Null, empty or white-space",id:"null-empty-or-white-space",level:2},{value:"Equality",id:"equality",level:2},{value:"Wildcards",id:"wildcards",level:3},{value:"String start and end",id:"string-start-and-end",level:2},{value:"Contains",id:"contains",level:2},{value:"Character casing",id:"character-casing",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"strings",children:"Strings"})}),"\n",(0,a.jsx)(t.p,{children:"Describes the possible expectations for strings."}),"\n",(0,a.jsx)(t.h2,{id:"null-empty-or-white-space",children:"Null, empty or white-space"}),"\n",(0,a.jsx)(t.p,{children:"For asserting whether a string is null, empty or contains whitespace only, you can use the following expectations:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'string subject = "";\nawait Expect.That(subject).Should().NotBeNull();\nawait Expect.That(subject).Should().BeNull();\nawait Expect.That(subject).Should().BeEmpty();\nawait Expect.That(subject).Should().NotBeEmpty().Because("the string is not empty");\nawait Expect.That(subject).Should().HaveLength(0);\nawait Expect.That(subject).Should().BeNullOrWhiteSpace();\nawait Expect.That(subject).Should().NotBeNullOrWhiteSpace();\n'})}),"\n",(0,a.jsx)(t.h2,{id:"equality",children:"Equality"}),"\n",(0,a.jsxs)(t.p,{children:["Equality comparison can be configured to ignore case, use wildcard or regex expressions or even use a custom ",(0,a.jsx)(t.code,{children:"IEqualityComparer<string>"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'string subject = "some text";\nawait Expect.That(subject).Should().Be("some text");\nawait Expect.That(subject).Should().Be("SOME TEXT").IgnoringCase();\nawait Expect.That(subject).Should().Be("*me tex?").AsWildcard();\nawait Expect.That(subject).Should().Be("(.*)xt").AsRegex();\nawait Expect.That(subject).Should().Be("SOME TEXT").Using(StringComparer.OrdinalIgnoreCase);\n'})}),"\n",(0,a.jsx)(t.h3,{id:"wildcards",children:"Wildcards"}),"\n",(0,a.jsxs)(t.p,{children:["When using ",(0,a.jsx)(t.code,{children:"AsWildcard"}),", the following wildcard specifiers are supported:"]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Wildcard specifier"}),(0,a.jsx)(t.th,{children:"Matches"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"* (asterisk)"}),(0,a.jsx)(t.td,{children:"Zero or more characters in that position."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"? (question mark)"}),(0,a.jsx)(t.td,{children:"Exactly one character in that position."})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"string-start-and-end",children:"String start and end"}),"\n",(0,a.jsxs)(t.p,{children:["To compare only the beginning or end of the string, you can use ",(0,a.jsx)(t.code,{children:"StartWith"})," or ",(0,a.jsx)(t.code,{children:"EndWith"})," respectively. Both methods can be configured to ignore case or use a custom ",(0,a.jsx)(t.code,{children:"IEqualityComparer<string>"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'string subject = "some text";\nawait Expect.That(subject).Should().StartWith("some");\nawait Expect.That(subject).Should().StartWith("SOME").IgnoringCase();\nawait Expect.That(subject).Should().StartWith("SOME").Using(StringComparer.OrdinalIgnoreCase);\n\nawait Expect.That(subject).Should().EndWith("text");\nawait Expect.That(subject).Should().EndWith("TEXT").IgnoringCase();\nawait Expect.That(subject).Should().EndWith("TEXT").Using(StringComparer.OrdinalIgnoreCase);\n'})}),"\n",(0,a.jsx)(t.h2,{id:"contains",children:"Contains"}),"\n",(0,a.jsxs)(t.p,{children:["To compare substrings within a string, you can use ",(0,a.jsx)(t.code,{children:"Contain"}),". This method can be configured to ignore case or use a custom ",(0,a.jsx)(t.code,{children:"IEqualityComparer<string>"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'string subject = "some text";\nawait Expect.That(subject).Should().Contain("me");\nawait Expect.That(subject).Should().Contain("ME").IgnoringCase();\nawait Expect.That(subject).Should().Contain("ME").Using(StringComparer.OrdinalIgnoreCase);\n'})}),"\n",(0,a.jsx)(t.p,{children:"Additionally you can specify, how often the substring should be found:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'string subject = "In this text in between the word an investigator should find the word \'IN\' multiple times.";\nawait Expect.That(subject).Should().Contain("in").AtLeast(2);\nawait Expect.That(subject).Should().Contain("in").Exactly(3);\nawait Expect.That(subject).Should().Contain("in").AtMost(4);\nawait Expect.That(subject).Should().Contain("in").Between(1).And(5);\n'})}),"\n",(0,a.jsx)(t.h2,{id:"character-casing",children:"Character casing"}),"\n",(0,a.jsx)(t.p,{children:"To ensure the characters in a string are all upper or lower cased, you can use the following expectations:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"await Expect.That(subject).Should().BeUpperCased();\nawait Expect.That(subject).Should().NotBeUpperCased();\nawait Expect.That(subject).Should().BeLowerCased();\nawait Expect.That(subject).Should().NotBeLowerCased();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);