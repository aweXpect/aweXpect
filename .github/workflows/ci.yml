name: CI

on:
    workflow_dispatch:
    pull_request:
        branches: [ main ]

jobs:
    unit-tests:
        name: "Unit tests"
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-latest ]
        runs-on: ${{ matrix.os }}
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
                        9.0.x
            -   name: Run unit tests (windows)
                if: matrix.os == 'windows-latest'
                run: ./build.ps1 UnitTestsWithCoverage
            -   name: Run unit tests (ubuntu|macos)
                if: matrix.os != 'windows-latest'
                run: ./build.sh UnitTestsWithCoverage
            -   name: Upload artifacts
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ runner.os }}-artifacts
                    path: |
                        ./Artifacts/*
                        ./TestResults/*.trx
    
    api-tests:
        name: "API tests"
        runs-on: ubuntu-latest
        env:
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
                        9.0.x
            -   name: API checks
                run: ./build.sh ApiChecks
            -   name: Upload artifacts
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: API-tests
                    path: |
                        ./Artifacts/*
                        ./TestResults/*.trx

    mutation-tests-core:
        name: "Mutation tests (aweXpect.Core)"
        runs-on: ubuntu-latest
        env:
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
            -   name: Run mutation tests
                run: ./build.sh MutationTestsCore
            -   name: Upload artifacts
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: MutationTestsCore
                    path: |
                        ./Artifacts/*
    
    mutation-tests-main:
        name: "Mutation tests (aweXpect)"
        runs-on: ubuntu-latest
        env:
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
            -   name: Run mutation tests
                run: ./build.sh MutationTestsMain
            -   name: Upload artifacts
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: MutationTestsMain
                    path: |
                        ./Artifacts/*
    
    mutation-tests-comment:
        name: "Mutation tests Comment"
        needs: [ mutation-tests-main, mutation-tests-core ]
        runs-on: ubuntu-latest
        env:
            STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Download packages (aweXpect.Core)
                uses: actions/download-artifact@v4
                with:
                    name: MutationTestsCore
                    path: Artifacts
            -   name: Download packages (aweXpect)
                uses: actions/download-artifact@v4
                with:
                    name: MutationTestsMain
                    path: Artifacts
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
            -   name: Run mutation tests
                run: ./build.sh MutationTestsComment
                env:
                    GithubToken: ${{ secrets.GITHUB_TOKEN }}
    
    benchmarks:
        name: "Benchmarks"
        runs-on: ubuntu-latest
        env:
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
                        9.0.x
            -   name: Run benchmarks
                run: ./build.sh Benchmarks
            -   name: Upload artifacts
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: Benchmarks
                    path: |
                        ./Artifacts/*
                    if-no-files-found: ignore
    
    static-code-analysis:
        name: "Static code analysis"
        if: ${{ github.actor != 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        runs-on: ubuntu-latest
        env:
            REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            DOTNET_NOLOGO: true
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
                        9.0.x
            -   name: Run sonarcloud analysis
                run: ./build.sh CodeAnalysis
    
    publish-test-results:
        name: "Publish Tests Results"
        needs: [ api-tests, unit-tests ]
        runs-on: ubuntu-latest
        permissions:
            checks: write
            pull-requests: write
        if: always()
        steps:
            -   name: Download Artifacts
                uses: actions/download-artifact@v4
                with:
                    path: artifacts
            -   name: Publish Test Results
                uses: EnricoMi/publish-unit-test-result-action@v2
                with:
                    comment_mode: always
                    files: "artifacts/**/**/*.trx"
    
    build-pages:
        name: Build Pages
        if: ${{ github.actor != 'dependabot[bot]' }}
        runs-on: ubuntu-latest
        needs: [ benchmarks ]
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            -   name: Setup .NET SDKs
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: |
                        8.0.x
                        9.0.x
            -   name: Merge benchmarks branch
                run: |
                    git config --global user.email "benchmarks@testably.org"
                    git config --global user.name "Benchmark User"
                    git fetch origin
                    git merge origin/benchmarks --no-edit
            -   name: Get documentation from extensions
                run: ./build.sh Pages
                env:
                    GithubToken: ${{ secrets.GITHUB_TOKEN }}
            -   uses: actions/setup-node@v4
                with:
                    node-version: 18
                    cache: npm
                    cache-dependency-path: ./Docs/pages/package-lock.json
            -   name: Install dependencies
                working-directory: ./Docs/pages
                run: npm ci
            -   name: Build website
                working-directory: ./Docs/pages
                run: npm run build
