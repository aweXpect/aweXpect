[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("aweXpect.Internal.Tests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace aweXpect
{
    public abstract class EnumerableQuantifier
    {
        protected EnumerableQuantifier() { }
        public static aweXpect.EnumerableQuantifier All { get; }
        public static aweXpect.EnumerableQuantifier None { get; }
        public abstract string GetExpectation(string it, string? expectationExpression);
        public abstract aweXpect.Core.Constraints.ConstraintResult GetResult<TEnumerable>(TEnumerable actual, string it, string? expectationExpression, int matchingCount, int notMatchingCount, int? totalCount, string? verb);
        public abstract bool IsDeterminable(int matchingCount, int notMatchingCount);
        public static aweXpect.EnumerableQuantifier AtLeast(int minimum) { }
        public static aweXpect.EnumerableQuantifier AtMost(int maximum) { }
        public static aweXpect.EnumerableQuantifier Between(int minimum, int maximum) { }
        public static aweXpect.EnumerableQuantifier Exactly(int expected) { }
    }
    public static class EquivalencyExtensions
    {
        public static aweXpect.Options.ObjectEqualityOptions Equivalent(this aweXpect.Options.ObjectEqualityOptions options, aweXpect.Options.EquivalencyOptions equivalencyOptions) { }
        public static TSelf Equivalent<TType, TThat, TSelf>(this aweXpect.Results.ObjectEqualityResult<TType, TThat, TSelf> result, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? equivalencyOptions = null)
            where TSelf : aweXpect.Results.ObjectEqualityResult<TType, TThat, TSelf> { }
    }
    public static class JsonExtensions
    {
        public static TSelf AsJson<TType, TThat, TSelf>(this aweXpect.Results.StringEqualityResult<TType, TThat, TSelf> result, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null)
            where TSelf : aweXpect.Results.StringEqualityResult<TType, TThat, TSelf> { }
    }
    public static class ThatAsyncEnumerable
    {
        public static aweXpect.ThatAsyncEnumerable.Elements All(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>> subject) { }
        public static aweXpect.ThatAsyncEnumerable.Elements<TItem> All<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> AreAllUnique(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> AreAllUnique<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> AreAllUnique<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> AreAllUnique<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatAsyncEnumerable.Elements AtLeast(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> subject, int minimum) { }
        public static aweXpect.ThatAsyncEnumerable.Elements<TItem> AtLeast<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject, int minimum) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>>> AtLeast<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IAsyncEnumerable<TItem>> source, int minimum) { }
        public static aweXpect.ThatAsyncEnumerable.Elements AtMost(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> subject, int maximum) { }
        public static aweXpect.ThatAsyncEnumerable.Elements<TItem> AtMost<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject, int maximum) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>>> AtMost<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IAsyncEnumerable<TItem>> source, int maximum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatAsyncEnumerable.Elements> Between(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatAsyncEnumerable.Elements<TItem>> Between<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>>>> Between<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IAsyncEnumerable<TItem>> source, int minimum) { }
        public static aweXpect.Results.StringCountResult<System.Collections.Generic.IAsyncEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>>> Contains(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>> source, string? expected) { }
        public static aweXpect.Results.StringCollectionContainResult<System.Collections.Generic.IAsyncEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>>> Contains(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, TItem expected) { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>>> DoesNotContain(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>> source, string? unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotContain<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, TItem unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotContain<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> DoesNotEndWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> DoesNotEndWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotEndWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotEndWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> DoesNotStartWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> DoesNotStartWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotStartWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> DoesNotStartWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> EndsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> EndsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> EndsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> EndsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatAsyncEnumerable.Elements Exactly(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> subject, int expected) { }
        public static aweXpect.ThatAsyncEnumerable.Elements<TItem> Exactly<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject, int expected) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>>> Exactly<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IAsyncEnumerable<TItem>> source, int expected) { }
        public static aweXpect.Core.IThatHas<System.Collections.Generic.IAsyncEnumerable<TItem>> Has<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject) { }
        public static aweXpect.Results.SingleItemResult<System.Collections.Generic.IAsyncEnumerable<TItem>, TItem>.Async HasSingle<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.Results.StringCollectionMatchResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> Is(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Is<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionBeContainedInResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> IsContainedIn(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsContainedIn<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsEmpty<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsInAscendingOrder<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsInAscendingOrder<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsInDescendingOrder<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsInDescendingOrder<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> IsNotEmpty<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source) { }
        public static aweXpect.ThatAsyncEnumerable.Elements None(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> subject) { }
        public static aweXpect.ThatAsyncEnumerable.Elements<TItem> None<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> StartsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>>> StartsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> StartsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> StartsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public class Elements
        {
            public aweXpect.Results.StringEqualityResult<System.Collections.Generic.IAsyncEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>>> Are(string? expected) { }
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<string?>>> Satisfy(System.Func<string?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class Elements<TItem>
        {
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Are(System.Action<aweXpect.Core.IExpectSubject<TItem>> expectations) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Are(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Are(TItem expected) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Are<TType>() { }
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IAsyncEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IAsyncEnumerable<TItem>>> Satisfy(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
    }
    public static class ThatBool
    {
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IExpectSubject<bool>> Implies(this aweXpect.Core.IExpectSubject<bool> source, bool consequent) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IExpectSubject<bool>> Is(this aweXpect.Core.IExpectSubject<bool> source, bool expected) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IExpectSubject<bool>> IsFalse(this aweXpect.Core.IExpectSubject<bool> source) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IExpectSubject<bool>> IsNot(this aweXpect.Core.IExpectSubject<bool> source, bool unexpected) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IExpectSubject<bool>> IsTrue(this aweXpect.Core.IExpectSubject<bool> source) { }
    }
    public static class ThatBufferedStream
    {
        public static aweXpect.Results.AndOrResult<System.IO.BufferedStream?, aweXpect.Core.IExpectSubject<System.IO.BufferedStream?>> DoesNotHaveBufferSize(this aweXpect.Core.IExpectSubject<System.IO.BufferedStream?> source, int unexpected) { }
        public static aweXpect.Results.AndOrResult<System.IO.BufferedStream?, aweXpect.Core.IExpectSubject<System.IO.BufferedStream?>> HasBufferSize(this aweXpect.Core.IExpectSubject<System.IO.BufferedStream?> source, int expected) { }
    }
    public static class ThatDateOnly
    {
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> HasDay(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> HasYear(this aweXpect.Core.IExpectSubject<System.DateOnly> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> Is(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsNot(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly, aweXpect.Core.IExpectSubject<System.DateOnly>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateOnly> source, System.DateOnly? expected) { }
    }
    public static class ThatDateTime
    {
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveKind(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTimeKind unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasDay(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasHour(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasKind(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTimeKind expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasMinute(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasSecond(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> HasYear(this aweXpect.Core.IExpectSubject<System.DateTime> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> Is(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsNot(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IExpectSubject<System.DateTime>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTime> source, System.DateTime? expected) { }
    }
    public static class ThatDateTimeOffset
    {
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveOffset(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.TimeSpan unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasDay(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasHour(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasMinute(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasOffset(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.TimeSpan expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasSecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> HasYear(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> Is(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsNot(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IExpectSubject<System.DateTimeOffset>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
    }
    public static class ThatDelegate
    {
        public static aweXpect.Core.ThatDelegate.WithoutValue Does(this aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithoutValue> subject) { }
        public static aweXpect.Core.ThatDelegate.WithValue<TValue> Does<TValue>(this aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithValue<TValue>> subject) { }
        public static aweXpect.Results.ExpectationResult ExecuteWithin(this aweXpect.Core.ThatDelegate.WithoutValue source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult<TValue> ExecuteWithin<TValue>(this aweXpect.Core.ThatDelegate.WithValue<TValue> source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult NotExecuteWithin(this aweXpect.Core.ThatDelegate.WithoutValue source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult<TValue> NotExecuteWithin<TValue>(this aweXpect.Core.ThatDelegate.WithValue<TValue> source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult NotThrow(this aweXpect.Core.ThatDelegate.WithoutValue source) { }
        public static aweXpect.Results.ExpectationResult<TValue> NotThrow<TValue>(this aweXpect.Core.ThatDelegate.WithValue<TValue> source) { }
        public static aweXpect.ThatDelegateThrows<System.Exception> Throw(this aweXpect.Core.ThatDelegate source, System.Type exceptionType) { }
        public static aweXpect.ThatDelegateThrows<TException> Throw<TException>(this aweXpect.Core.ThatDelegate source)
            where TException : System.Exception { }
        public static aweXpect.ThatDelegateThrows<System.Exception> ThrowExactly(this aweXpect.Core.ThatDelegate source, System.Type exceptionType) { }
        public static aweXpect.ThatDelegateThrows<TException> ThrowExactly<TException>(this aweXpect.Core.ThatDelegate source)
            where TException : System.Exception { }
        public static aweXpect.ThatDelegateThrows<System.Exception> ThrowException(this aweXpect.Core.ThatDelegate source) { }
    }
    public static class ThatDelegateThrows
    {
        public static aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithParamName<TException>(this aweXpect.ThatDelegateThrows<TException> source, string expected)
            where TException : System.ArgumentException? { }
    }
    public class ThatDelegateThrows<TException> : aweXpect.Results.ExpectationResult<TException, aweXpect.ThatDelegateThrows<TException>>
        where TException : System.Exception?
    {
        public aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
        public aweXpect.ThatDelegateThrows<TException?> OnlyIf(bool predicate) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> Which<TMember>(System.Linq.Expressions.Expression<System.Func<TException, TMember?>> memberSelector, System.Action<aweXpect.Core.IExpectSubject<TMember?>> expectations) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithHResult(int expected) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInner(System.Type innerExceptionType) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInner(System.Type innerExceptionType, System.Action<aweXpect.Core.IExpectSubject<System.Exception?>> expectations) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInner<TInnerException>()
            where TInnerException : System.Exception? { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInner<TInnerException>(System.Action<aweXpect.Core.IExpectSubject<TInnerException?>> expectations)
            where TInnerException : System.Exception { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInnerException() { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.ThatDelegateThrows<TException>> WithInnerException(System.Action<aweXpect.Core.IExpectSubject<System.Exception?>> expectations) { }
        public aweXpect.Results.StringEqualityTypeResult<TException, aweXpect.ThatDelegateThrows<TException>> WithMessage(string expected) { }
        public aweXpect.Results.AndOrResult<TException?, aweXpect.ThatDelegateThrows<TException>> WithRecursiveInnerExceptions(System.Action<aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<System.Exception>>> expectations) { }
    }
    public static class ThatDictionary
    {
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IDictionary<TKey, string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, string>>> AreAllUnique<TKey>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, string>> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, System.Func<TValue, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> AreAllUnique<TKey, TValue, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, System.Func<TValue, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> ContainsKey<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, TKey expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> ContainsKeys<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, params TKey[] expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> ContainsValue<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, TValue expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> ContainsValues<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, params TValue[] expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> DoesNotContainKey<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, TKey unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> DoesNotContainKeys<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, params TKey[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> DoesNotContainValue<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, TValue unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>>> DoesNotContainValues<TKey, TValue>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IDictionary<TKey, TValue>> source, params TValue[] unexpected) { }
    }
    public static class ThatEnum
    {
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> DoesNotHaveFlag<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, TEnum? unexpectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> DoesNotHaveValue<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, long? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> HasFlag<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, TEnum? expectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> HasValue<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, long? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> Is<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, TEnum? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> IsDefined<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> IsNot<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source, TEnum? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IExpectSubject<TEnum>> IsNotDefined<TEnum>(this aweXpect.Core.IExpectSubject<TEnum> source)
            where TEnum :  struct, System.Enum { }
    }
    public static class ThatEnumerable
    {
        public static aweXpect.ThatEnumerable.Elements All(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>> subject) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> All<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> AreAllUnique(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> AreAllUnique<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> AreAllUnique<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> AreAllUnique<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatEnumerable.Elements AtLeast(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> AtLeast<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject, int minimum) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>>> AtLeast<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IEnumerable<TItem>> source, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements AtMost(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> AtMost<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject, int maximum) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>>> AtMost<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IEnumerable<TItem>> source, int maximum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatEnumerable.Elements> Between(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatEnumerable.Elements<TItem>> Between<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>>>> Between<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IEnumerable<TItem>> source, int minimum) { }
        public static aweXpect.Results.StringCountResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>>> Contains(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>> source, string? expected) { }
        public static aweXpect.Results.StringCollectionContainResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>>> Contains(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, TItem expected) { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Contains<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>>> DoesNotContain(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>> source, string? unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotContain<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, TItem unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotContain<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> DoesNotEndWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> DoesNotEndWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotEndWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotEndWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> DoesNotStartWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> DoesNotStartWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotStartWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> DoesNotStartWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> EndsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> EndsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> EndsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> EndsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatEnumerable.Elements Exactly(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> subject, int expected) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> Exactly<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject, int expected) { }
        public static aweXpect.Results.ItemsResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>>> Exactly<TItem>(this aweXpect.Core.IThatHas<System.Collections.Generic.IEnumerable<TItem>> source, int expected) { }
        public static aweXpect.Core.IThatHas<System.Collections.Generic.IEnumerable<TItem>> Has<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject) { }
        public static aweXpect.Results.SingleItemResult<System.Collections.Generic.IEnumerable<TItem>, TItem> HasSingle<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.Results.StringCollectionMatchResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> Is(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Is<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> IsContainedIn(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsContainedIn<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsEmpty<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsInAscendingOrder<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsInAscendingOrder<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsInDescendingOrder<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsInDescendingOrder<TItem, TMember>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> IsNotEmpty<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source) { }
        public static aweXpect.ThatEnumerable.Elements None(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> subject) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> None<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> StartsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>>> StartsWith(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string>> source, System.Collections.Generic.IEnumerable<string> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> StartsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> StartsWith<TItem>(this aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public class Elements
        {
            public aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>>> Are(string? expected) { }
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<string?>>> Satisfy(System.Func<string?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class Elements<TItem>
        {
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Are(System.Action<aweXpect.Core.IExpectSubject<TItem>> expectations) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Are(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Are(TItem expected) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Are<TType>() { }
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<TItem>>> Satisfy(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
    }
    public static class ThatEventRecording
    {
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChanged<TSubject>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChangedFor<TSubject>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source, string? propertyName)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChangedFor<TSubject, TProperty>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source, System.Linq.Expressions.Expression<System.Func<TSubject, TProperty>> propertyExpression)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> Triggered<TSubject>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source, string eventName)
            where TSubject :  notnull { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChanged<TSubject>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChangedFor<TSubject>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source, string? propertyName)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChangedFor<TSubject, TProperty>(this aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> source, System.Linq.Expressions.Expression<System.Func<TSubject, TProperty>> propertyExpression)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
    }
    public static class ThatException
    {
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Core.IExpectSubject<TException>> HasHResult<TException>(this aweXpect.Core.IExpectSubject<TException> source, int expected)
            where TException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasInner(this aweXpect.Core.IExpectSubject<System.Exception?> source, System.Type innerExceptionType, System.Action<aweXpect.Core.IExpectSubject<System.Exception?>> expectations) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasInner<TInnerException>(this aweXpect.Core.IExpectSubject<System.Exception?> source)
            where TInnerException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasInner<TInnerException>(this aweXpect.Core.IExpectSubject<System.Exception?> source, System.Action<aweXpect.Core.IExpectSubject<TInnerException?>> expectations)
            where TInnerException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasInnerException(this aweXpect.Core.IExpectSubject<System.Exception?> source) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasInnerException(this aweXpect.Core.IExpectSubject<System.Exception?> source, System.Action<aweXpect.Core.IExpectSubject<System.Exception?>> expectations) { }
        public static aweXpect.Results.StringEqualityTypeResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasMessage(this aweXpect.Core.IExpectSubject<System.Exception?> source, string expected) { }
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Core.IExpectSubject<TException>> HasParamName<TException>(this aweXpect.Core.IExpectSubject<TException> source, string expected)
            where TException : System.ArgumentException? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HasRecursiveInnerExceptions(this aweXpect.Core.IExpectSubject<System.Exception?> source, System.Action<aweXpect.Core.IExpectSubject<System.Collections.Generic.IEnumerable<System.Exception>>> expectations) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IExpectSubject<System.Exception?>> HaveInner(this aweXpect.Core.IExpectSubject<System.Exception?> source, System.Type innerExceptionType) { }
    }
    public static class ThatGeneric
    {
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IExpectSubject<T>> DoesNotSatisfy<T>(this aweXpect.Core.IExpectSubject<T> source, System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IExpectSubject<T>> For<T, TMember>(this aweXpect.Core.IExpectSubject<T> source, System.Linq.Expressions.Expression<System.Func<T, TMember?>> memberSelector, System.Action<aweXpect.Core.IExpectSubject<TMember?>> expectations) { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IExpectSubject<T>> IsNotSameAs<T>(this aweXpect.Core.IExpectSubject<T> source, object? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IExpectSubject<T>> IsSameAs<T>(this aweXpect.Core.IExpectSubject<T> source, object? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IExpectSubject<T>> Satisfies<T>(this aweXpect.Core.IExpectSubject<T> source, System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        [System.Obsolete("TODO")]
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IThat<T>> Satisfy<T>(this aweXpect.Core.IThat<T> source, System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
    }
    public static class ThatGuid
    {
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IExpectSubject<System.Guid>> Is(this aweXpect.Core.IExpectSubject<System.Guid> source, System.Guid? expected) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IExpectSubject<System.Guid>> IsEmpty(this aweXpect.Core.IExpectSubject<System.Guid> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IExpectSubject<System.Guid>> IsNot(this aweXpect.Core.IExpectSubject<System.Guid> source, System.Guid? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IExpectSubject<System.Guid>> IsNotEmpty(this aweXpect.Core.IExpectSubject<System.Guid> source) { }
    }
    public static class ThatHttpResponseMessage
    {
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> DoesNotHaveStatusCode(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source, System.Net.HttpStatusCode unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> HasClientError(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> HasContent(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source, string expected) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> HasError(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> HasServerError(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> HasStatusCode(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source, System.Net.HttpStatusCode expected) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> IsRedirection(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source) { }
        public static aweXpect.Results.AndOrResult<System.Net.Http.HttpResponseMessage, aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?>> IsSuccess(this aweXpect.Core.IExpectSubject<System.Net.Http.HttpResponseMessage?> source) { }
    }
    public static class ThatJsonElement
    {
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> IsArray(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> IsArray(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, System.Func<aweXpect.Json.IJsonArrayResult, aweXpect.Json.IJsonArrayResult> expectation, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> IsObject(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> IsObject(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, System.Func<aweXpect.Json.IJsonObjectResult, aweXpect.Json.IJsonObjectResult> expectation, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> Matches(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, object? expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> Matches<T>(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, System.Collections.Generic.IEnumerable<T> expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> MatchesExactly(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, object? expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement>> MatchesExactly<T>(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement> source, System.Collections.Generic.IEnumerable<T> expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
    }
    public static class ThatNullableBool
    {
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> Is(this aweXpect.Core.IExpectSubject<bool?> source, bool? expected) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsFalse(this aweXpect.Core.IExpectSubject<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsNot(this aweXpect.Core.IExpectSubject<bool?> source, bool? unexpected) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsNotFalse(this aweXpect.Core.IExpectSubject<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsNotNull(this aweXpect.Core.IExpectSubject<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsNotTrue(this aweXpect.Core.IExpectSubject<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsNull(this aweXpect.Core.IExpectSubject<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IExpectSubject<bool?>> IsTrue(this aweXpect.Core.IExpectSubject<bool?> source) { }
    }
    public static class ThatNullableDateOnly
    {
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> HasDay(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> HasYear(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> Is(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsNot(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateOnly?, aweXpect.Core.IExpectSubject<System.DateOnly?>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateOnly?> source, System.DateOnly? expected) { }
    }
    public static class ThatNullableDateTime
    {
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveKind(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTimeKind unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasDay(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasHour(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasKind(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTimeKind expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasMinute(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasSecond(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> HasYear(this aweXpect.Core.IExpectSubject<System.DateTime?> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> Is(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsNot(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IExpectSubject<System.DateTime?>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTime?> source, System.DateTime? expected) { }
    }
    public static class ThatNullableDateTimeOffset
    {
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveDay(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveMonth(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveOffset(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.TimeSpan unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> DoesNotHaveYear(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasDay(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasHour(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasMinute(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasMonth(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasOffset(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.TimeSpan expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasSecond(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> HasYear(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> Is(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsNot(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IExpectSubject<System.DateTimeOffset?>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
    }
    public static class ThatNullableEnum
    {
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> DoesNotHaveFlag<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, TEnum? unexpectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> DoesNotHaveValue<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, long? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> HasFlag<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, TEnum? expectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> HasValue<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, long? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> Is<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, TEnum? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> IsDefined<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> IsNot<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source, TEnum? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> IsNotDefined<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> IsNotNull<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IExpectSubject<TEnum?>> IsNull<TEnum>(this aweXpect.Core.IExpectSubject<TEnum?> source)
            where TEnum :  struct, System.Enum { }
    }
    public static class ThatNullableGuid
    {
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> Is(this aweXpect.Core.IExpectSubject<System.Guid?> source, System.Guid? expected) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> IsEmpty(this aweXpect.Core.IExpectSubject<System.Guid?> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> IsNot(this aweXpect.Core.IExpectSubject<System.Guid?> source, System.Guid? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> IsNotEmpty(this aweXpect.Core.IExpectSubject<System.Guid?> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> IsNotNull(this aweXpect.Core.IExpectSubject<System.Guid?> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IExpectSubject<System.Guid?>> IsNull(this aweXpect.Core.IExpectSubject<System.Guid?> source) { }
    }
    public static class ThatNullableJsonElement
    {
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> IsArray(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> IsArray(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, System.Func<aweXpect.Json.IJsonArrayResult, aweXpect.Json.IJsonArrayResult> expectation, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> IsObject(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> IsObject(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, System.Func<aweXpect.Json.IJsonObjectResult, aweXpect.Json.IJsonObjectResult> expectation, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> Matches(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, object? expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> Matches<T>(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, System.Collections.Generic.IEnumerable<T> expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> MatchesExactly(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, object? expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Text.Json.JsonElement?, aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> MatchesExactly<T>(this aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?> source, System.Collections.Generic.IEnumerable<T> expected, System.Func<aweXpect.Json.JsonOptions, aweXpect.Json.JsonOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
    }
    public static class ThatNullableTimeOnly
    {
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> HasHour(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> HasMinute(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> HasSecond(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> Is(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsNot(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly?, aweXpect.Core.IExpectSubject<System.TimeOnly?>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly?> source, System.TimeOnly? expected) { }
    }
    public static class ThatNullableTimeSpan
    {
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> Is(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsLessThan(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNegative(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNot(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotGreaterThan(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotLessThan(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotNegative(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsNotPositive(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IExpectSubject<System.TimeSpan?>> IsPositive(this aweXpect.Core.IExpectSubject<System.TimeSpan?> source) { }
    }
    public static class ThatNumber
    {
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> Is(this aweXpect.Core.IExpectSubject<byte> source, byte? expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> Is(this aweXpect.Core.IExpectSubject<decimal> source, decimal? expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> Is(this aweXpect.Core.IExpectSubject<double> source, double? expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> Is(this aweXpect.Core.IExpectSubject<short> source, short? expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> Is(this aweXpect.Core.IExpectSubject<int> source, int? expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> Is(this aweXpect.Core.IExpectSubject<long> source, long? expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> Is(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> Is(this aweXpect.Core.IExpectSubject<float> source, float? expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> Is(this aweXpect.Core.IExpectSubject<ushort> source, ushort? expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> Is(this aweXpect.Core.IExpectSubject<uint> source, uint? expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> Is(this aweXpect.Core.IExpectSubject<ulong> source, ulong? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> Is(this aweXpect.Core.IExpectSubject<byte?> source, byte? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> Is(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> Is(this aweXpect.Core.IExpectSubject<double?> source, double? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> Is(this aweXpect.Core.IExpectSubject<float?> source, float? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> Is(this aweXpect.Core.IExpectSubject<int?> source, int? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> Is(this aweXpect.Core.IExpectSubject<long?> source, long? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> Is(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> Is(this aweXpect.Core.IExpectSubject<short?> source, short? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> Is(this aweXpect.Core.IExpectSubject<uint?> source, uint? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> Is(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> Is(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsFinite(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsFinite(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double?>> IsFinite(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float?>> IsFinite(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IExpectSubject<byte>> IsGreaterThan(this aweXpect.Core.IExpectSubject<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsGreaterThan(this aweXpect.Core.IExpectSubject<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsGreaterThan(this aweXpect.Core.IExpectSubject<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsGreaterThan(this aweXpect.Core.IExpectSubject<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsGreaterThan(this aweXpect.Core.IExpectSubject<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsGreaterThan(this aweXpect.Core.IExpectSubject<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsGreaterThan(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsGreaterThan(this aweXpect.Core.IExpectSubject<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsGreaterThan(this aweXpect.Core.IExpectSubject<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IExpectSubject<uint>> IsGreaterThan(this aweXpect.Core.IExpectSubject<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsGreaterThan(this aweXpect.Core.IExpectSubject<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IExpectSubject<byte?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IExpectSubject<uint?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IExpectSubject<ulong?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IExpectSubject<ushort?>> IsGreaterThan(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IExpectSubject<byte>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IExpectSubject<uint>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IExpectSubject<byte?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IExpectSubject<uint?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IExpectSubject<ulong?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IExpectSubject<ushort?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsInfinite(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsInfinite(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsInfinite(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsInfinite(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IExpectSubject<byte>> IsLessThan(this aweXpect.Core.IExpectSubject<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsLessThan(this aweXpect.Core.IExpectSubject<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsLessThan(this aweXpect.Core.IExpectSubject<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsLessThan(this aweXpect.Core.IExpectSubject<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsLessThan(this aweXpect.Core.IExpectSubject<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsLessThan(this aweXpect.Core.IExpectSubject<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsLessThan(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsLessThan(this aweXpect.Core.IExpectSubject<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsLessThan(this aweXpect.Core.IExpectSubject<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IExpectSubject<uint>> IsLessThan(this aweXpect.Core.IExpectSubject<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsLessThan(this aweXpect.Core.IExpectSubject<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IExpectSubject<byte?>> IsLessThan(this aweXpect.Core.IExpectSubject<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsLessThan(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsLessThan(this aweXpect.Core.IExpectSubject<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsLessThan(this aweXpect.Core.IExpectSubject<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsLessThan(this aweXpect.Core.IExpectSubject<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsLessThan(this aweXpect.Core.IExpectSubject<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsLessThan(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsLessThan(this aweXpect.Core.IExpectSubject<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IExpectSubject<uint?>> IsLessThan(this aweXpect.Core.IExpectSubject<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IExpectSubject<ulong?>> IsLessThan(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IExpectSubject<ushort?>> IsLessThan(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IExpectSubject<byte>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IExpectSubject<uint>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IExpectSubject<byte?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IExpectSubject<uint?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IExpectSubject<ulong?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IExpectSubject<ushort?>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsNaN(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsNaN(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsNaN(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsNaN(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsNegative(this aweXpect.Core.IExpectSubject<decimal> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsNegative(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsNegative(this aweXpect.Core.IExpectSubject<short> source) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsNegative(this aweXpect.Core.IExpectSubject<int> source) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsNegative(this aweXpect.Core.IExpectSubject<long> source) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsNegative(this aweXpect.Core.IExpectSubject<sbyte> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsNegative(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsNegative(this aweXpect.Core.IExpectSubject<decimal?> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsNegative(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsNegative(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsNegative(this aweXpect.Core.IExpectSubject<int?> source) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsNegative(this aweXpect.Core.IExpectSubject<long?> source) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsNegative(this aweXpect.Core.IExpectSubject<sbyte?> source) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsNegative(this aweXpect.Core.IExpectSubject<short?> source) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> IsNot(this aweXpect.Core.IExpectSubject<byte> source, byte? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsNot(this aweXpect.Core.IExpectSubject<decimal> source, decimal? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> IsNot(this aweXpect.Core.IExpectSubject<double> source, double? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> IsNot(this aweXpect.Core.IExpectSubject<short> source, short? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> IsNot(this aweXpect.Core.IExpectSubject<int> source, int? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> IsNot(this aweXpect.Core.IExpectSubject<long> source, long? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsNot(this aweXpect.Core.IExpectSubject<sbyte> source, sbyte? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> IsNot(this aweXpect.Core.IExpectSubject<float> source, float? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsNot(this aweXpect.Core.IExpectSubject<ushort> source, ushort? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> IsNot(this aweXpect.Core.IExpectSubject<uint> source, uint? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsNot(this aweXpect.Core.IExpectSubject<ulong> source, ulong? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> IsNot(this aweXpect.Core.IExpectSubject<byte?> source, byte? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> IsNot(this aweXpect.Core.IExpectSubject<decimal?> source, decimal? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> IsNot(this aweXpect.Core.IExpectSubject<double?> source, double? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> IsNot(this aweXpect.Core.IExpectSubject<float?> source, float? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> IsNot(this aweXpect.Core.IExpectSubject<int?> source, int? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> IsNot(this aweXpect.Core.IExpectSubject<long?> source, long? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> IsNot(this aweXpect.Core.IExpectSubject<sbyte?> source, sbyte? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> IsNot(this aweXpect.Core.IExpectSubject<short?> source, short? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> IsNot(this aweXpect.Core.IExpectSubject<uint?> source, uint? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> IsNot(this aweXpect.Core.IExpectSubject<ulong?> source, ulong? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> IsNot(this aweXpect.Core.IExpectSubject<ushort?> source, ushort? unexpected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsNotFinite(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsNotFinite(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsNotFinite(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsNotFinite(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsNotInfinite(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsNotInfinite(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsNotInfinite(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsNotInfinite(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsNotNaN(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsNotNaN(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsNotNaN(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsNotNaN(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> IsNotOneOf(this aweXpect.Core.IExpectSubject<byte> source, params byte[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> IsNotOneOf(this aweXpect.Core.IExpectSubject<byte> source, params System.Nullable<byte>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsNotOneOf(this aweXpect.Core.IExpectSubject<decimal> source, params decimal[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsNotOneOf(this aweXpect.Core.IExpectSubject<decimal> source, params System.Nullable<decimal>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> IsNotOneOf(this aweXpect.Core.IExpectSubject<double> source, params double[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> IsNotOneOf(this aweXpect.Core.IExpectSubject<double> source, params System.Nullable<double>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> IsNotOneOf(this aweXpect.Core.IExpectSubject<short> source, params short[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> IsNotOneOf(this aweXpect.Core.IExpectSubject<short> source, params System.Nullable<short>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> IsNotOneOf(this aweXpect.Core.IExpectSubject<int> source, params int[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> IsNotOneOf(this aweXpect.Core.IExpectSubject<int> source, params System.Nullable<int>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> IsNotOneOf(this aweXpect.Core.IExpectSubject<long> source, params long[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> IsNotOneOf(this aweXpect.Core.IExpectSubject<long> source, params System.Nullable<long>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsNotOneOf(this aweXpect.Core.IExpectSubject<sbyte> source, params System.Nullable<sbyte>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsNotOneOf(this aweXpect.Core.IExpectSubject<sbyte> source, params sbyte[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> IsNotOneOf(this aweXpect.Core.IExpectSubject<float> source, params System.Nullable<float>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> IsNotOneOf(this aweXpect.Core.IExpectSubject<float> source, params float[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ushort> source, params System.Nullable<ushort>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ushort> source, params ushort[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> IsNotOneOf(this aweXpect.Core.IExpectSubject<uint> source, params System.Nullable<uint>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> IsNotOneOf(this aweXpect.Core.IExpectSubject<uint> source, params uint[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ulong> source, params System.Nullable<ulong>[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ulong> source, params ulong[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<byte?> source, params byte[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<byte?> source, params System.Nullable<byte>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<decimal?> source, params decimal[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<decimal?> source, params System.Nullable<decimal>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<double?> source, params double[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<double?> source, params System.Nullable<double>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<float?> source, params System.Nullable<float>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<float?> source, params float[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<int?> source, params int[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<int?> source, params System.Nullable<int>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<long?> source, params long[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<long?> source, params System.Nullable<long>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<sbyte?> source, params System.Nullable<sbyte>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<sbyte?> source, params sbyte[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<short?> source, params short[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<short?> source, params System.Nullable<short>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<uint?> source, params System.Nullable<uint>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<uint?> source, params uint[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ulong?> source, params System.Nullable<ulong>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ulong?> source, params ulong[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ushort?> source, params System.Nullable<ushort>[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<ushort?> source, params ushort[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> IsOneOf(this aweXpect.Core.IExpectSubject<byte> source, params byte[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte>> IsOneOf(this aweXpect.Core.IExpectSubject<byte> source, params System.Nullable<byte>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsOneOf(this aweXpect.Core.IExpectSubject<decimal> source, params decimal[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsOneOf(this aweXpect.Core.IExpectSubject<decimal> source, params System.Nullable<decimal>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> IsOneOf(this aweXpect.Core.IExpectSubject<double> source, params double[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IExpectSubject<double>> IsOneOf(this aweXpect.Core.IExpectSubject<double> source, params System.Nullable<double>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> IsOneOf(this aweXpect.Core.IExpectSubject<short> source, params short[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IExpectSubject<short>> IsOneOf(this aweXpect.Core.IExpectSubject<short> source, params System.Nullable<short>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> IsOneOf(this aweXpect.Core.IExpectSubject<int> source, params int[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IExpectSubject<int>> IsOneOf(this aweXpect.Core.IExpectSubject<int> source, params System.Nullable<int>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> IsOneOf(this aweXpect.Core.IExpectSubject<long> source, params long[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IExpectSubject<long>> IsOneOf(this aweXpect.Core.IExpectSubject<long> source, params System.Nullable<long>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsOneOf(this aweXpect.Core.IExpectSubject<sbyte> source, params System.Nullable<sbyte>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsOneOf(this aweXpect.Core.IExpectSubject<sbyte> source, params sbyte[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> IsOneOf(this aweXpect.Core.IExpectSubject<float> source, params System.Nullable<float>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IExpectSubject<float>> IsOneOf(this aweXpect.Core.IExpectSubject<float> source, params float[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsOneOf(this aweXpect.Core.IExpectSubject<ushort> source, params System.Nullable<ushort>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort>> IsOneOf(this aweXpect.Core.IExpectSubject<ushort> source, params ushort[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> IsOneOf(this aweXpect.Core.IExpectSubject<uint> source, params System.Nullable<uint>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint>> IsOneOf(this aweXpect.Core.IExpectSubject<uint> source, params uint[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsOneOf(this aweXpect.Core.IExpectSubject<ulong> source, params System.Nullable<ulong>[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong>> IsOneOf(this aweXpect.Core.IExpectSubject<ulong> source, params ulong[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> IsOneOf(this aweXpect.Core.IExpectSubject<byte?> source, params byte[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IExpectSubject<byte?>> IsOneOf(this aweXpect.Core.IExpectSubject<byte?> source, params System.Nullable<byte>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> IsOneOf(this aweXpect.Core.IExpectSubject<decimal?> source, params decimal[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IExpectSubject<decimal?>> IsOneOf(this aweXpect.Core.IExpectSubject<decimal?> source, params System.Nullable<decimal>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> IsOneOf(this aweXpect.Core.IExpectSubject<double?> source, params double[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IExpectSubject<double?>> IsOneOf(this aweXpect.Core.IExpectSubject<double?> source, params System.Nullable<double>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> IsOneOf(this aweXpect.Core.IExpectSubject<float?> source, params System.Nullable<float>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IExpectSubject<float?>> IsOneOf(this aweXpect.Core.IExpectSubject<float?> source, params float[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> IsOneOf(this aweXpect.Core.IExpectSubject<int?> source, params int[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IExpectSubject<int?>> IsOneOf(this aweXpect.Core.IExpectSubject<int?> source, params System.Nullable<int>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> IsOneOf(this aweXpect.Core.IExpectSubject<long?> source, params long[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IExpectSubject<long?>> IsOneOf(this aweXpect.Core.IExpectSubject<long?> source, params System.Nullable<long>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> IsOneOf(this aweXpect.Core.IExpectSubject<sbyte?> source, params System.Nullable<sbyte>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IExpectSubject<sbyte?>> IsOneOf(this aweXpect.Core.IExpectSubject<sbyte?> source, params sbyte[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> IsOneOf(this aweXpect.Core.IExpectSubject<short?> source, params short[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IExpectSubject<short?>> IsOneOf(this aweXpect.Core.IExpectSubject<short?> source, params System.Nullable<short>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> IsOneOf(this aweXpect.Core.IExpectSubject<uint?> source, params System.Nullable<uint>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IExpectSubject<uint?>> IsOneOf(this aweXpect.Core.IExpectSubject<uint?> source, params uint[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> IsOneOf(this aweXpect.Core.IExpectSubject<ulong?> source, params System.Nullable<ulong>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IExpectSubject<ulong?>> IsOneOf(this aweXpect.Core.IExpectSubject<ulong?> source, params ulong[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> IsOneOf(this aweXpect.Core.IExpectSubject<ushort?> source, params System.Nullable<ushort>[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IExpectSubject<ushort?>> IsOneOf(this aweXpect.Core.IExpectSubject<ushort?> source, params ushort[] expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IExpectSubject<decimal>> IsPositive(this aweXpect.Core.IExpectSubject<decimal> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IExpectSubject<double>> IsPositive(this aweXpect.Core.IExpectSubject<double> source) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IExpectSubject<short>> IsPositive(this aweXpect.Core.IExpectSubject<short> source) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IExpectSubject<int>> IsPositive(this aweXpect.Core.IExpectSubject<int> source) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IExpectSubject<long>> IsPositive(this aweXpect.Core.IExpectSubject<long> source) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IExpectSubject<sbyte>> IsPositive(this aweXpect.Core.IExpectSubject<sbyte> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IExpectSubject<float>> IsPositive(this aweXpect.Core.IExpectSubject<float> source) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IExpectSubject<decimal?>> IsPositive(this aweXpect.Core.IExpectSubject<decimal?> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IExpectSubject<double?>> IsPositive(this aweXpect.Core.IExpectSubject<double?> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IExpectSubject<float?>> IsPositive(this aweXpect.Core.IExpectSubject<float?> source) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IExpectSubject<int?>> IsPositive(this aweXpect.Core.IExpectSubject<int?> source) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IExpectSubject<long?>> IsPositive(this aweXpect.Core.IExpectSubject<long?> source) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IExpectSubject<sbyte?>> IsPositive(this aweXpect.Core.IExpectSubject<sbyte?> source) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IExpectSubject<short?>> IsPositive(this aweXpect.Core.IExpectSubject<short?> source) { }
    }
    public static class ThatObject
    {
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IExpectSubject<object?>> EquivalentTo(this aweXpect.Core.IThatIs<object?> source, object? expected, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? optionsCallback = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IThatIs<object?> Is(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> Is(this aweXpect.Core.IExpectSubject<object?> source, System.Type type) { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IExpectSubject<object?>> Is(this aweXpect.Core.IExpectSubject<object?> source, object? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrWhichResult<TType, aweXpect.Core.IExpectSubject<object?>> Is<TType>(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> IsExactly(this aweXpect.Core.IExpectSubject<object?> source, System.Type type) { }
        public static aweXpect.Results.AndOrWhichResult<TType, aweXpect.Core.IExpectSubject<object?>> IsExactly<TType>(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNot(this aweXpect.Core.IExpectSubject<object?> source, System.Type type) { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNot(this aweXpect.Core.IExpectSubject<object?> source, object? unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNot<TType>(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNotExactly(this aweXpect.Core.IExpectSubject<object?> source, System.Type type) { }
        public static aweXpect.Results.AndOrWhichResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNotExactly<TType>(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrResult<object, aweXpect.Core.IExpectSubject<object?>> IsNotNull(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IExpectSubject<object?>> IsNull(this aweXpect.Core.IExpectSubject<object?> source) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IExpectSubject<object?>> JsonSerializable(this aweXpect.Core.IThatIs<object?> source, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? equivalencyOptions = null) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IExpectSubject<object?>> JsonSerializable(this aweXpect.Core.IThatIs<object?> source, System.Text.Json.JsonSerializerOptions serializerOptions, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? equivalencyOptions = null) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IExpectSubject<object?>> JsonSerializable<T>(this aweXpect.Core.IThatIs<object?> source, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? equivalencyOptions = null) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IExpectSubject<object?>> JsonSerializable<T>(this aweXpect.Core.IThatIs<object?> source, System.Text.Json.JsonSerializerOptions serializerOptions, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? equivalencyOptions = null) { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IExpectSubject<object?>> NotEquivalentTo(this aweXpect.Core.IExpectSubject<object?> source, object? unexpected, System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? optionsCallback = null, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
    }
    public static class ThatSignaler
    {
        public static aweXpect.Results.SignalCountResult DidNotSignal(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler> source) { }
        public static aweXpect.Results.SignalCountResult DidNotSignal(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler> source, aweXpect.Times times) { }
        public static aweXpect.Results.SignalCountResult<TParameter> DidNotSignal<TParameter>(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>> source) { }
        public static aweXpect.Results.SignalCountResult<TParameter> DidNotSignal<TParameter>(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>> source, aweXpect.Times times) { }
        public static aweXpect.Results.SignalCountResult Signaled(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler> source) { }
        public static aweXpect.Results.SignalCountResult Signaled(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler> source, aweXpect.Times times) { }
        public static aweXpect.Results.SignalCountResult<TParameter> Signaled<TParameter>(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>> source) { }
        public static aweXpect.Results.SignalCountResult<TParameter> Signaled<TParameter>(this aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>> source, aweXpect.Times times) { }
    }
    public static class ThatStream
    {
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> DoesNotHaveLength(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source, long expected) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> DoesNotHavePosition(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source, long expected) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> HasLength(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source, long expected) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> HasPosition(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source, long expected) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsNotReadOnly(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsNotReadable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsNotSeekable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsNotWritable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsNotWriteOnly(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsReadOnly(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsReadable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsSeekable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsWritable(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IExpectSubject<System.IO.Stream?>> IsWriteOnly(this aweXpect.Core.IExpectSubject<System.IO.Stream?> source) { }
    }
    public static class ThatString
    {
        public static aweXpect.Results.StringEqualityTypeCountResult<string?, aweXpect.Core.IExpectSubject<string?>> Contains(this aweXpect.Core.IExpectSubject<string?> source, string expected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> DoesNotContain(this aweXpect.Core.IExpectSubject<string?> source, string unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> DoesNotEndWith(this aweXpect.Core.IExpectSubject<string?> source, string unexpected) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> DoesNotHaveLength(this aweXpect.Core.IExpectSubject<string?> source, int unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> DoesNotStartWith(this aweXpect.Core.IExpectSubject<string?> source, string unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> EndsWith(this aweXpect.Core.IExpectSubject<string?> source, string expected) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> HasLength(this aweXpect.Core.IExpectSubject<string?> source, int expected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> Is(this aweXpect.Core.IExpectSubject<string?> source, string? expected) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsEmpty(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsLowerCased(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotEmpty(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotLowerCased(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotNull(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotNullOrEmpty(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotNullOrWhiteSpace(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> IsNotOneOf(this aweXpect.Core.IExpectSubject<string?> source, params string?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IExpectSubject<string?>> IsNotUpperCased(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsNull(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsNullOrEmpty(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsNullOrWhiteSpace(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> IsOneOf(this aweXpect.Core.IExpectSubject<string?> source, params string?[] expected) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> IsUpperCased(this aweXpect.Core.IExpectSubject<string?> source) { }
        public static aweXpect.Results.JsonWhichResult IsValidJson(this aweXpect.Core.IExpectSubject<string?> source, System.Func<System.Text.Json.JsonDocumentOptions, System.Text.Json.JsonDocumentOptions>? options = null) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IExpectSubject<string?>> StartsWith(this aweXpect.Core.IExpectSubject<string?> source, string expected) { }
    }
    public static class ThatTimeOnly
    {
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> DoesNotHaveHour(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> DoesNotHaveMillisecond(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> DoesNotHaveMinute(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> DoesNotHaveSecond(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> HasHour(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> HasMillisecond(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> HasMinute(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> HasSecond(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, int? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> Is(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsNot(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsNotAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsNotBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsNotOnOrAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsNotOnOrBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsOnOrAfter(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeOnly, aweXpect.Core.IExpectSubject<System.TimeOnly>> IsOnOrBefore(this aweXpect.Core.IExpectSubject<System.TimeOnly> source, System.TimeOnly? expected) { }
    }
    public static class ThatTimeSpan
    {
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> Is(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsGreaterThan(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsLessThan(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNegative(this aweXpect.Core.IExpectSubject<System.TimeSpan> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNot(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotGreaterThan(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotGreaterThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotLessThan(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotLessThanOrEqualTo(this aweXpect.Core.IExpectSubject<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotNegative(this aweXpect.Core.IExpectSubject<System.TimeSpan> source) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsNotPositive(this aweXpect.Core.IExpectSubject<System.TimeSpan> source) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IExpectSubject<System.TimeSpan>> IsPositive(this aweXpect.Core.IExpectSubject<System.TimeSpan> source) { }
    }
}
namespace aweXpect.Json
{
    public interface IJsonArrayResult
    {
        aweXpect.Json.IJsonArrayResult And { get; }
        aweXpect.Json.IJsonPropertyResult<aweXpect.Json.IJsonArrayResult> At(int index);
        aweXpect.Json.IJsonArrayResult.IJsonArrayLengthResult With(int amount);
        aweXpect.Json.IJsonArrayResult.IJsonArrayElementsResult WithArrays(params System.Action<aweXpect.Json.IJsonArrayResult>?[] expectations);
        aweXpect.Json.IJsonArrayResult.IJsonArrayElementsResult WithElements(params object?[] expected);
        aweXpect.Json.IJsonArrayResult.IJsonArrayElementsResult WithObjects(params System.Action<aweXpect.Json.IJsonObjectResult>?[] expectations);
        public interface IJsonArrayElementsResult : aweXpect.Json.IJsonArrayResult { }
        public interface IJsonArrayLengthResult
        {
            aweXpect.Json.IJsonArrayResult Elements();
        }
    }
    public interface IJsonObjectResult
    {
        aweXpect.Json.IJsonObjectResult And { get; }
        aweXpect.Json.IJsonObjectResult.IJsonObjectLengthResult With(int amount);
        aweXpect.Json.IJsonPropertyResult<aweXpect.Json.IJsonObjectResult> With(string propertyName);
        public interface IJsonObjectLengthResult
        {
            aweXpect.Json.IJsonObjectResult Properties();
        }
    }
    public interface IJsonPropertyResult<out TReturn>
    {
        TReturn AnArray();
        TReturn AnArray(System.Action<aweXpect.Json.IJsonArrayResult> expectation);
        TReturn AnObject();
        TReturn AnObject(System.Action<aweXpect.Json.IJsonObjectResult> expectation);
        TReturn Matching(object? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "");
    }
    public static class JsonAwexpectCustomizationExtensions
    {
        public static aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomization Json(this aweXpect.Customization.AwexpectCustomization awexpectCustomization) { }
        public class JsonCustomization : aweXpect.Customization.ICustomizationValueUpdater<aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValueSetter<System.Text.Json.JsonDocumentOptions> DefaultJsonDocumentOptions { get; }
            public aweXpect.Customization.ICustomizationValueSetter<System.Text.Json.JsonSerializerOptions> DefaultJsonSerializerOptions { get; }
            public aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomizationValue, aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomizationValue> update) { }
        }
        public class JsonCustomizationValue : System.IEquatable<aweXpect.Json.JsonAwexpectCustomizationExtensions.JsonCustomizationValue>
        {
            public JsonCustomizationValue() { }
            public System.Text.Json.JsonDocumentOptions DefaultJsonDocumentOptions { get; init; }
            public System.Text.Json.JsonSerializerOptions DefaultJsonSerializerOptions { get; init; }
        }
    }
    public class JsonOptions
    {
        public JsonOptions() { }
        public System.Text.Json.JsonDocumentOptions DocumentOptions { get; }
        public bool IgnoreAdditionalProperties { get; }
        public aweXpect.Json.JsonOptions IgnoringAdditionalProperties(bool ignoreAdditionalProperties = true) { }
        public aweXpect.Json.JsonOptions WithJsonOptions(System.Func<System.Text.Json.JsonDocumentOptions, System.Text.Json.JsonDocumentOptions> jsonDocumentOptions) { }
    }
}
namespace aweXpect.Results
{
    public class BetweenResult<TTarget, TExpectation>
    {
        public BetweenResult(System.Func<int, System.Action<TExpectation>, TTarget> callback, System.Func<int, TTarget> itemsCallback) { }
        public aweXpect.Results.ItemsResult<TTarget> And(int maximum) { }
        public TTarget And(int maximum, System.Action<TExpectation> expectations) { }
    }
    public class EventTriggerResult<TSubject> : aweXpect.Results.CountResult<aweXpect.Recording.IEventRecording<TSubject>, aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>>>
        where TSubject :  notnull
    {
        public EventTriggerResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IExpectSubject<aweXpect.Recording.IEventRecording<TSubject>> returnValue, aweXpect.Options.TriggerEventFilter filter, aweXpect.Options.Quantifier quantifier) { }
        public aweXpect.Results.EventTriggerResult<TSubject> With<TEventArgs>(System.Func<TEventArgs, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEventArgs : System.EventArgs { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(int position, System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(string expression, int? position, System.Func<TParameter, bool> predicate) { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithSender(System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
    }
    public class ItemsResult<TReturn>
    {
        public ItemsResult(TReturn value) { }
        public TReturn Items() { }
    }
    public class JsonWhichResult : aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>>
    {
        public JsonWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IExpectSubject<string?> returnValue, System.Text.Json.JsonDocumentOptions options) { }
        public aweXpect.Results.AndOrResult<string?, aweXpect.Core.IExpectSubject<string?>> Which(System.Action<aweXpect.Core.IExpectSubject<System.Text.Json.JsonElement?>> expectations) { }
    }
    public class ObjectCollectionBeContainedInResult<TType, TThat> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat>
    {
        public ObjectCollectionBeContainedInResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.ObjectCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class ObjectCollectionContainResult<TType, TThat> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat>
    {
        public ObjectCollectionContainResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.ObjectCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class ObjectCollectionMatchResult<TType, TThat> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, aweXpect.Results.ObjectCollectionMatchResult<TType, TThat>>
    {
        public ObjectCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
    }
    public class ObjectCollectionMatchResult<TType, TThat, TSelf> : aweXpect.Results.ObjectEqualityResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TSelf>
    {
        public ObjectCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public TSelf IgnoringDuplicates() { }
        public TSelf InAnyOrder() { }
    }
    public class ObjectCountResult<TType, TThat> : aweXpect.Results.ObjectCountResult<TType, TThat, aweXpect.Results.ObjectCountResult<TType, TThat>>
    {
        public ObjectCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.ObjectEqualityOptions options) { }
    }
    public class ObjectCountResult<TType, TThat, TSelf> : aweXpect.Results.CountResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.ObjectCountResult<TType, TThat, TSelf>
    {
        public ObjectCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.ObjectEqualityOptions options) { }
        public TSelf Equivalent(System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? optionsCallback = null) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class SignalCountResult : aweXpect.Results.AndOrResult<aweXpect.Signaling.SignalerResult, aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler>>
    {
        public SignalCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler> returnValue, aweXpect.Options.SignalerOptions options) { }
        public aweXpect.Results.SignalCountResult Within(System.TimeSpan timeout) { }
    }
    public class SignalCountResult<TParameter> : aweXpect.Results.AndOrResult<aweXpect.Signaling.SignalerResult<TParameter>, aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>>>
    {
        public SignalCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IExpectSubject<aweXpect.Signaling.Signaler<TParameter>> returnValue, aweXpect.Options.SignalerOptions<TParameter> options) { }
        public aweXpect.Results.SignalCountResult<TParameter> With(System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.SignalCountResult<TParameter> Within(System.TimeSpan timeout) { }
    }
    public class SingleItemResult<TCollection, TItem> : aweXpect.Results.ExpectationResult<TItem, aweXpect.Results.SingleItemResult<TCollection, TItem>>
    {
        public aweXpect.Core.IExpectSubject<TItem> Which { get; }
        public class Async : aweXpect.Results.ExpectationResult<TItem, aweXpect.Results.SingleItemResult<TCollection, TItem>.Async>
        {
            public aweXpect.Core.IExpectSubject<TItem> Which { get; }
        }
    }
    public class StringCollectionBeContainedInResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat>
    {
        public StringCollectionBeContainedInResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.StringCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class StringCollectionContainResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat>
    {
        public StringCollectionContainResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.StringCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class StringCollectionMatchResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat, aweXpect.Results.StringCollectionMatchResult<TType, TThat>>
    {
        public StringCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
    }
    public class StringCollectionMatchResult<TType, TThat, TSelf> : aweXpect.Results.StringEqualityTypeResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.StringCollectionMatchResult<TType, TThat, TSelf>
    {
        public StringCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public TSelf IgnoringDuplicates() { }
        public TSelf InAnyOrder() { }
    }
}