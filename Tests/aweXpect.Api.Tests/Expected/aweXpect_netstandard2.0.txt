[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"aweXpect.Internal.Tests, PublicKey=002400000480000094000000060200000024000052534131000400000100010091e3b299f2a31c904fbc5c2150944568b101ba409f5ee4cd95561c0c8cf50c1960d74f682c7f462f792ab37fe315ece00775c5bdda68c06d3abb67c1d531bf8c40d85d3d36ecf19fb05cc890ca7a5f39904e04ff754a55463236c5884f41083fae1ea626eb1f9b8c5c33f7bada7e650bed6ced9f0a75413d7e919f94f804efc9")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName=".NET Standard 2.0")]
namespace aweXpect
{
    public class CollectionCountResult<TReturn>
    {
        public CollectionCountResult(System.Func<aweXpect.EnumerableQuantifier, TReturn> factory) { }
        public TReturn AtLeast(int minimum) { }
        public TReturn AtMost(int maximum) { }
        public aweXpect.Results.BetweenResult<TReturn> Between(int minimum) { }
        public TReturn EqualTo(int expected) { }
        public TReturn LessThan(int maximum) { }
        public TReturn MoreThan(int minimum) { }
    }
    public abstract class EnumerableQuantifier
    {
        protected EnumerableQuantifier() { }
        public abstract void AppendResult(System.Text.StringBuilder stringBuilder, aweXpect.Core.ExpectationGrammars grammars, int matchingCount, int notMatchingCount, int? totalCount, string? verb = null);
        public abstract aweXpect.Core.Constraints.Outcome GetOutcome(int matchingCount, int notMatchingCount, int? totalCount);
        public virtual aweXpect.EnumerableQuantifier.QuantifierContexts GetQuantifierContext() { }
        public abstract bool IsDeterminable(int matchingCount, int notMatchingCount);
        public abstract bool IsSingle();
        public static aweXpect.EnumerableQuantifier All(aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier AtLeast(int minimum, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier AtMost(int maximum, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier Between(int minimum, int maximum, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier Exactly(int expected, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier LessThan(int maximum, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier MoreThan(int minimum, aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        public static aweXpect.EnumerableQuantifier None(aweXpect.Core.ExpectationGrammars expectationGrammars = 0) { }
        [System.Flags]
        public enum QuantifierContexts
        {
            MatchingItems = 2,
            NotMatchingItems = 4,
            None = 0,
        }
    }
    public static class ThatBool
    {
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IThat<bool>> Implies(this aweXpect.Core.IThat<bool> source, bool consequent) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IThat<bool>> IsEqualTo(this aweXpect.Core.IThat<bool> source, bool expected) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IThat<bool>> IsFalse(this aweXpect.Core.IThat<bool> source) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IThat<bool>> IsNotEqualTo(this aweXpect.Core.IThat<bool> source, bool unexpected) { }
        public static aweXpect.Results.AndOrResult<bool, aweXpect.Core.IThat<bool>> IsTrue(this aweXpect.Core.IThat<bool> source) { }
    }
    public static class ThatChar
    {
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsALetter(this aweXpect.Core.IThat<char> source) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsANumber(this aweXpect.Core.IThat<char> source) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsAnAsciiLetter(this aweXpect.Core.IThat<char> source) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsEqualTo(this aweXpect.Core.IThat<char> source, char? expected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsNotEqualTo(this aweXpect.Core.IThat<char> source, char? unexpected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsNotOneOf(this aweXpect.Core.IThat<char> source, System.Collections.Generic.IEnumerable<char> unexpected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsNotOneOf(this aweXpect.Core.IThat<char> source, System.Collections.Generic.IEnumerable<char?> unexpected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsNotOneOf(this aweXpect.Core.IThat<char> source, params char?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsOneOf(this aweXpect.Core.IThat<char> source, System.Collections.Generic.IEnumerable<char> expected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsOneOf(this aweXpect.Core.IThat<char> source, System.Collections.Generic.IEnumerable<char?> expected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsOneOf(this aweXpect.Core.IThat<char> source, params char?[] expected) { }
        public static aweXpect.Results.AndOrResult<char, aweXpect.Core.IThat<char>> IsWhiteSpace(this aweXpect.Core.IThat<char> source) { }
    }
    public static class ThatDateTime
    {
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasDay(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasHour(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.DateTimeKind<System.DateTime> HasKind(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasMillisecond(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasMinute(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasMonth(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasSecond(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime> HasYear(this aweXpect.Core.IThat<System.DateTime> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsAfter(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsBefore(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>>, System.DateTime?> IsBetween(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsEqualTo(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotAfter(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotBefore(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>>, System.DateTime?> IsNotBetween(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotEqualTo(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotOnOrAfter(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotOnOrBefore(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime> source, System.Collections.Generic.IEnumerable<System.DateTime> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime> source, System.Collections.Generic.IEnumerable<System.DateTime?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime> source, params System.DateTime?[] unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsOnOrAfter(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsOnOrBefore(this aweXpect.Core.IThat<System.DateTime> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsOneOf(this aweXpect.Core.IThat<System.DateTime> source, System.Collections.Generic.IEnumerable<System.DateTime> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsOneOf(this aweXpect.Core.IThat<System.DateTime> source, System.Collections.Generic.IEnumerable<System.DateTime?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime, aweXpect.Core.IThat<System.DateTime>> IsOneOf(this aweXpect.Core.IThat<System.DateTime> source, params System.DateTime?[] expected) { }
    }
    public static class ThatDateTimeOffset
    {
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasDay(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasHour(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasMillisecond(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasMinute(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasMonth(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.TimeSpan<System.DateTimeOffset> HasOffset(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasSecond(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset> HasYear(this aweXpect.Core.IThat<System.DateTimeOffset> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsAfter(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsBefore(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>>, System.DateTimeOffset?> IsBetween(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsEqualTo(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotAfter(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotBefore(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>>, System.DateTimeOffset?> IsNotBetween(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotEqualTo(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotOnOrAfter(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotOnOrBefore(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, params System.DateTimeOffset?[] unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsOnOrAfter(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsOnOrBefore(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset, aweXpect.Core.IThat<System.DateTimeOffset>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset> source, params System.DateTimeOffset?[] expected) { }
    }
    public static class ThatDelegate
    {
        public static aweXpect.Results.ExpectationResult DoesNotExecuteWithin(this aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithoutValue> source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult<TValue> DoesNotExecuteWithin<TValue>(this aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithValue<TValue>> source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult ExecutesWithin(this aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithoutValue> source, System.TimeSpan duration) { }
        public static aweXpect.Results.ExpectationResult<TValue> ExecutesWithin<TValue>(this aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithValue<TValue>> source, System.TimeSpan duration) { }
    }
    public static class ThatDelegateThrows
    {
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithHResult<TException>(this aweXpect.Delegates.ThatDelegateThrows<TException> source, int expected)
            where TException : System.Exception? { }
        public static aweXpect.Results.StringEqualityTypeResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithMessage<TException>(this aweXpect.Delegates.ThatDelegateThrows<TException> source, string expected)
            where TException : System.Exception? { }
        public static aweXpect.Results.StringEqualityResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithMessageContaining<TException>(this aweXpect.Delegates.ThatDelegateThrows<TException> source, string? expected)
            where TException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithParamName<TException>(this aweXpect.Delegates.ThatDelegateThrows<TException> source, string? expected)
            where TException : System.ArgumentException? { }
        public static aweXpect.Results.AndOrResult<TException?, aweXpect.Delegates.ThatDelegateThrows<TException>> WithRecursiveInnerExceptions<TException>(this aweXpect.Delegates.ThatDelegateThrows<TException> source, System.Action<aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Exception>>> expectations)
            where TException : System.Exception? { }
    }
    public static class ThatDictionary
    {
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.Dictionary<TKey, string?>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, string?>?>> AreAllUnique<TKey>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, string?>?> source)
            where TKey :  notnull { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IDictionary<TKey, string?>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, string?>?>> AreAllUnique<TKey>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, string?>?> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>, TValue> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source)
            where TKey :  notnull { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>, TValue> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, System.Func<TValue, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "")
            where TKey :  notnull { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, System.Func<TValue, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>, TMember> AreAllUnique<TKey, TValue, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, System.Func<TValue, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "")
            where TKey :  notnull { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>, TMember> AreAllUnique<TKey, TValue, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, System.Func<TValue, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ContainsValueResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>, TKey, TValue?> ContainsKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, TKey expected)
            where TKey :  notnull { }
        public static aweXpect.Results.ContainsValueResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, TKey expected) { }
        public static aweXpect.Results.ContainsValuesResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>, TKey, TValue?> ContainsKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, params TKey[] expected)
            where TKey :  notnull { }
        public static aweXpect.Results.ContainsValuesResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, params TKey[] expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> ContainsValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, TValue expected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> ContainsValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, TValue expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> ContainsValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, params TValue[] expected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> ContainsValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, params TValue[] expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> DoesNotContainKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, TKey unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> DoesNotContainKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, TKey unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> DoesNotContainKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, params TKey[] unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> DoesNotContainKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, params TKey[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> DoesNotContainValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, TValue unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> DoesNotContainValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, TValue unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.Dictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?>> DoesNotContainValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.Dictionary<TKey, TValue>?> source, params TValue[] unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?>> DoesNotContainValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IDictionary<TKey, TValue>?> source, params TValue[] unexpected) { }
    }
    public static class ThatEnum
    {
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> DoesNotHaveFlag<TEnum>(this aweXpect.Core.IThat<TEnum> source, TEnum? unexpectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> DoesNotHaveValue<TEnum>(this aweXpect.Core.IThat<TEnum> source, long? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> HasFlag<TEnum>(this aweXpect.Core.IThat<TEnum> source, TEnum? expectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> HasValue<TEnum>(this aweXpect.Core.IThat<TEnum> source, long? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsDefined<TEnum>(this aweXpect.Core.IThat<TEnum> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsEqualTo<TEnum>(this aweXpect.Core.IThat<TEnum> source, TEnum? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsNotDefined<TEnum>(this aweXpect.Core.IThat<TEnum> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsNotEqualTo<TEnum>(this aweXpect.Core.IThat<TEnum> source, TEnum? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, System.Collections.Generic.IEnumerable<TEnum> unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, System.Collections.Generic.IEnumerable<TEnum?> unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, params TEnum?[] unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, System.Collections.Generic.IEnumerable<TEnum> expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, System.Collections.Generic.IEnumerable<TEnum?> expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum, aweXpect.Core.IThat<TEnum>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum> source, params TEnum?[] expected)
            where TEnum :  struct, System.Enum { }
    }
    public static class ThatEnumerable
    {
        public static aweXpect.ThatEnumerable.Elements All(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> All(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> All<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> AreAllUnique(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, object?> AreAllUnique(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> AreAllUnique<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> AreAllUnique<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TMember> AreAllUnique<TMember>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TMember> AreAllUnique<TItem, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> AreEqualTo(this aweXpect.ThatEnumerable.Elements elements, string? expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, object?> AreEqualTo(this aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> elements, object? expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<System.DateTime>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime>?>, System.DateTime, System.TimeSpan> AreEqualTo(this aweXpect.ThatEnumerable.Elements<System.DateTime> elements, System.DateTime expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<System.DateTime?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime?>?>, System.DateTime?, System.TimeSpan> AreEqualTo(this aweXpect.ThatEnumerable.Elements<System.DateTime?> elements, System.DateTime? expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<decimal>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal>?>, decimal, decimal> AreEqualTo(this aweXpect.ThatEnumerable.Elements<decimal> elements, decimal expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<decimal?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal?>?>, decimal?, decimal> AreEqualTo(this aweXpect.ThatEnumerable.Elements<decimal?> elements, decimal? expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<double>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double>?>, double, double> AreEqualTo(this aweXpect.ThatEnumerable.Elements<double> elements, double expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<double?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double?>?>, double?, double> AreEqualTo(this aweXpect.ThatEnumerable.Elements<double?> elements, double? expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<float>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float>?>, float, float> AreEqualTo(this aweXpect.ThatEnumerable.Elements<float> elements, float expected) { }
        public static aweXpect.Results.ToleranceEqualityResult<System.Collections.Generic.IEnumerable<float?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float?>?>, float?, float> AreEqualTo(this aweXpect.ThatEnumerable.Elements<float?> elements, float? expected) { }
        public static aweXpect.Results.StringEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>> AreEqualTo<TEnumerable>(this aweXpect.ThatEnumerable.ElementsForStructEnumerable<TEnumerable> elements, string? expected)
            where TEnumerable :  struct, System.Collections.Generic.IEnumerable<string?> { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>?, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> AreEqualTo<TItem>(this aweXpect.ThatEnumerable.Elements<TItem> elements, TItem expected) { }
        public static aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, object?> AreEqualTo<TEnumerable, TItem>(this aweXpect.ThatEnumerable.ElementsForStructEnumerable<TEnumerable, TItem> elements, object? expected)
            where TEnumerable :  struct, System.Collections.Generic.IEnumerable<TItem> { }
        public static aweXpect.ThatEnumerable.Elements AtLeast(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> AtLeast(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> AtLeast<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements AtMost(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> AtMost(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> AtMost<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int maximum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatEnumerable.Elements> Between(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable>> Between(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.ThatEnumerable.Elements<TItem>> Between<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int minimum) { }
        public static aweXpect.Results.StringEqualityTypeCountResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> Contains(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, string? expected) { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, object?> Contains(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, object? expected) { }
        public static aweXpect.Results.StringCollectionContainResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> Contains(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> Contains(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionContainResult<string?[], aweXpect.Core.IThat<string?[]?>> Contains(this aweXpect.Core.IThat<string?[]?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, TItem expected) { }
        public static aweXpect.Results.CollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> Contains<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityTypeCountResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotContain(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, string? unexpected) { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, object?> DoesNotContain(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, object? unexpected) { }
        public static aweXpect.Results.StringCollectionContainResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotContain(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> DoesNotContain(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionContainResult<string?[], aweXpect.Core.IThat<string?[]?>> DoesNotContain(this aweXpect.Core.IThat<string?[]?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, TItem unexpected) { }
        public static aweXpect.Results.CollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CountResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionContainResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> DoesNotContain<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotEndWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotEndWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotEndWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> DoesNotEndWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> DoesNotEndWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotEndWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> DoesNotHaveCount(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> DoesNotHaveCount<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int unexpected) { }
        public static aweXpect.Results.AndOrResult<TItem[], aweXpect.Core.IThat<TItem[]?>> DoesNotHaveCount<TItem>(this aweXpect.Core.IThat<TItem[]?> subject, int unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotStartWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, params string[] unexpected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> DoesNotStartWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotStartWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> DoesNotStartWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> DoesNotStartWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, params TItem[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> DoesNotStartWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> EndsWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> EndsWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> EndsWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> EndsWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> EndsWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> EndsWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatEnumerable.Elements Exactly(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int expected) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> Exactly(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int expected) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> Exactly<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int expected) { }
        public static aweXpect.CollectionCountResult<aweXpect.Results.AndOrResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>>> HasCount(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject) { }
        public static aweXpect.Results.AndOrResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> HasCount(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int expected) { }
        public static aweXpect.CollectionCountResult<aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>>> HasCount<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject) { }
        public static aweXpect.CollectionCountResult<aweXpect.Results.AndOrResult<TItem[], aweXpect.Core.IThat<TItem[]?>>> HasCount<TItem>(this aweXpect.Core.IThat<TItem[]?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> HasCount<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int expected) { }
        public static aweXpect.Results.AndOrResult<TItem[], aweXpect.Core.IThat<TItem[]?>> HasCount<TItem>(this aweXpect.Core.IThat<TItem[]?> subject, int expected) { }
        public static aweXpect.Results.HasItemWithConditionResult<System.Collections.IEnumerable?, object?> HasItem(this aweXpect.Core.IThat<System.Collections.IEnumerable?> source) { }
        public static aweXpect.Results.StringHasItemResult<System.Collections.Generic.IEnumerable<string?>?> HasItem(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, string? expected) { }
        public static aweXpect.Results.ObjectHasItemResult<System.Collections.IEnumerable, object?> HasItem(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, object? expected) { }
        public static aweXpect.Results.HasItemResult<System.Collections.IEnumerable> HasItem(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.HasItemWithConditionResult<System.Collections.Generic.IEnumerable<TItem>?, TItem> HasItem<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.ObjectHasItemResult<System.Collections.Generic.IEnumerable<TItem>?, TItem> HasItem<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, TItem expected) { }
        public static aweXpect.Results.HasItemResult<System.Collections.Generic.IEnumerable<TItem>?> HasItem<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.HasItemResult<System.Collections.Generic.IEnumerable<TItem>?> HasItemThat<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Action<aweXpect.Core.IThat<TItem>> expectations) { }
        public static aweXpect.Results.SingleItemResult<System.Collections.IEnumerable, object?> HasSingle(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.SingleItemResult<System.Collections.Generic.IEnumerable<TItem>, TItem> HasSingle<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.StringCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> IsContainedIn(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> IsContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsEmpty<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.AndOrResult<TEnumerable, aweXpect.Core.IThat<TEnumerable?>> IsEmpty<TEnumerable>(this aweXpect.Core.IThat<TEnumerable?> source)
            where TEnumerable : System.Collections.IEnumerable { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<System.DateTime>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime>?>, System.DateTime, System.TimeSpan> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime>?> source, System.Collections.Generic.IEnumerable<System.DateTime> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<System.DateTime?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime?>?>, System.DateTime?, System.TimeSpan> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime?>?> source, System.Collections.Generic.IEnumerable<System.DateTime?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<decimal>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal>?>, decimal, decimal> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal>?> source, System.Collections.Generic.IEnumerable<decimal> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<decimal?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal?>?>, decimal?, decimal> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal?>?> source, System.Collections.Generic.IEnumerable<decimal?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<double>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double>?>, double, double> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double>?> source, System.Collections.Generic.IEnumerable<double> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<double?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double?>?>, double?, double> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double?>?> source, System.Collections.Generic.IEnumerable<double?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<float>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float>?>, float, float> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float>?> source, System.Collections.Generic.IEnumerable<float> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<float?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float?>?>, float?, float> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float?>?> source, System.Collections.Generic.IEnumerable<float?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionMatchResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> IsEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> IsEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<object?, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsInAscendingOrder(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsInAscendingOrder<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsInAscendingOrder<TMember>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsInAscendingOrder<TItem, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<object?, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsInDescendingOrder(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsInDescendingOrder<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsInDescendingOrder<TMember>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsInDescendingOrder<TItem, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> IsNotContainedIn(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionBeContainedInResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> IsNotContainedIn<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsNotEmpty<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<System.DateTime>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime>?>, System.DateTime, System.TimeSpan> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime>?> source, System.Collections.Generic.IEnumerable<System.DateTime> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<System.DateTime?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime?>?>, System.DateTime?, System.TimeSpan> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.DateTime?>?> source, System.Collections.Generic.IEnumerable<System.DateTime?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<decimal>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal>?>, decimal, decimal> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal>?> source, System.Collections.Generic.IEnumerable<decimal> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<decimal?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal?>?>, decimal?, decimal> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<decimal?>?> source, System.Collections.Generic.IEnumerable<decimal?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<double>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double>?>, double, double> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double>?> source, System.Collections.Generic.IEnumerable<double> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<double?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double?>?>, double?, double> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<double?>?> source, System.Collections.Generic.IEnumerable<double?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<float>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float>?>, float, float> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float>?> source, System.Collections.Generic.IEnumerable<float> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchWithToleranceResult<System.Collections.Generic.IEnumerable<float?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float?>?>, float?, float> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<float?>?> source, System.Collections.Generic.IEnumerable<float?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringCollectionMatchResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> IsNotEqualTo(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Action<aweXpect.Core.IThat<TItem?>>> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TItem, bool>>> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> IsNotEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectCollectionMatchResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> IsNotEqualTo<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<object?, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsNotInAscendingOrder(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsNotInAscendingOrder<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsNotInAscendingOrder<TMember>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsNotInAscendingOrder<TItem, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<object?, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsNotInDescendingOrder(this aweXpect.Core.IThat<System.Collections.IEnumerable> source) { }
        public static aweXpect.Results.CollectionOrderResult<TItem, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsNotInDescendingOrder<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source) { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>> IsNotInDescendingOrder<TMember>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Func<object?, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.CollectionOrderResult<TMember, System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> IsNotInDescendingOrder<TItem, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Func<TItem, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.ThatEnumerable.Elements LessThan(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> LessThan(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> LessThan<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int maximum) { }
        public static aweXpect.ThatEnumerable.Elements MoreThan(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> MoreThan(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> MoreThan<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject, int minimum) { }
        public static aweXpect.ThatEnumerable.Elements None(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> subject) { }
        public static aweXpect.ThatEnumerable.ElementsForEnumerable<System.Collections.IEnumerable> None(this aweXpect.Core.IThat<System.Collections.IEnumerable> subject) { }
        public static aweXpect.ThatEnumerable.Elements<TItem> None<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> subject) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> StartsWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, params string[] expected) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> StartsWith(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> source, System.Collections.Generic.IEnumerable<string?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> StartsWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> StartsWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, System.Collections.Generic.IEnumerable<TItem> expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.IEnumerable, aweXpect.Core.IThat<System.Collections.IEnumerable>, TItem> StartsWith<TItem>(this aweXpect.Core.IThat<System.Collections.IEnumerable> source, params TItem[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> StartsWith<TItem>(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> source, System.Collections.Generic.IEnumerable<TItem> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public class Elements : aweXpect.ThatEnumerable.IElements
        {
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<string?>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?>> Satisfy(System.Func<string?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class Elements<TItem> : aweXpect.ThatEnumerable.IElements<TItem>
        {
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Are(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> Are<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> AreEquivalentTo<TExpected>(TExpected expected, System.Func<aweXpect.Equivalency.EquivalencyOptions<TExpected>, aweXpect.Equivalency.EquivalencyOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> AreExactly(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> AreExactly<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>, TItem> ComplyWith(System.Action<aweXpect.Core.IThat<TItem>> expectations) { }
            public aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<TItem>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?>> Satisfy(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class ElementsForEnumerable<TEnumerable> : aweXpect.ThatEnumerable.IElementsForEnumerable<TEnumerable>
            where TEnumerable : System.Collections.IEnumerable?
        {
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable?>, object?> Are(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable?>, object?> Are<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, object?> AreEquivalentTo<TExpected>(TExpected expected, System.Func<aweXpect.Equivalency.EquivalencyOptions<TExpected>, aweXpect.Equivalency.EquivalencyOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable?>, object?> AreExactly(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable?>, object?> AreExactly<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, object?> ComplyWith(System.Action<aweXpect.Core.IThat<object?>> expectations) { }
            public aweXpect.Results.AndOrResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>> Satisfy(System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class ElementsForStructEnumerable<TEnumerable> : aweXpect.ThatEnumerable.IElementsForStructEnumerable<TEnumerable>
            where TEnumerable :  struct, System.Collections.Generic.IEnumerable<string?>
        {
            public aweXpect.Results.AndOrResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>> Satisfy(System.Func<string?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public class ElementsForStructEnumerable<TEnumerable, TItem> : aweXpect.ThatEnumerable.IElementsForStructEnumerable<TEnumerable, TItem>
            where TEnumerable :  struct, System.Collections.Generic.IEnumerable<TItem>
        {
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> Are(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> Are<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> AreEquivalentTo<TExpected>(TExpected expected, System.Func<aweXpect.Equivalency.EquivalencyOptions<TExpected>, aweXpect.Equivalency.EquivalencyOptions>? options = null, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> AreExactly(System.Type type) { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> AreExactly<TType>() { }
            public aweXpect.Results.ObjectEqualityResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>, TItem> ComplyWith(System.Action<aweXpect.Core.IThat<TItem>> expectations) { }
            public aweXpect.Results.AndOrResult<TEnumerable, aweXpect.Core.IThat<TEnumerable>> Satisfy(System.Func<TItem?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
        public interface IElements
        {
            aweXpect.EnumerableQuantifier Quantifier { get; }
            aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<string?>?> Subject { get; }
        }
        public interface IElements<out TItem>
        {
            aweXpect.EnumerableQuantifier Quantifier { get; }
            aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TItem>?> Subject { get; }
        }
        public interface IElementsForEnumerable<out TEnumerable>
            where out TEnumerable : System.Collections.IEnumerable?
        {
            aweXpect.EnumerableQuantifier Quantifier { get; }
            aweXpect.Core.IThat<TEnumerable> Subject { get; }
        }
        public interface IElementsForStructEnumerable<out TEnumerable>
            where out TEnumerable :  struct, System.Collections.Generic.IEnumerable<string?>
        {
            aweXpect.EnumerableQuantifier Quantifier { get; }
            aweXpect.Core.IThat<TEnumerable> Subject { get; }
        }
        public interface IElementsForStructEnumerable<out TEnumerable, TItem>
            where out TEnumerable :  struct, System.Collections.Generic.IEnumerable<TItem>
        {
            aweXpect.EnumerableQuantifier Quantifier { get; }
            aweXpect.Core.IThat<TEnumerable> Subject { get; }
        }
    }
    public static class ThatEventRecording
    {
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChanged<TSubject>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChangedFor<TSubject>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source, string? propertyName)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> DidNotTriggerPropertyChangedFor<TSubject, TProperty>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source, System.Linq.Expressions.Expression<System.Func<TSubject, TProperty>> propertyExpression)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> Triggered<TSubject>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source, string eventName)
            where TSubject :  notnull { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChanged<TSubject>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChangedFor<TSubject>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source, string? propertyName)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
        public static aweXpect.Results.EventTriggerResult<TSubject> TriggeredPropertyChangedFor<TSubject, TProperty>(this aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> source, System.Linq.Expressions.Expression<System.Func<TSubject, TProperty>> propertyExpression)
            where TSubject : System.ComponentModel.INotifyPropertyChanged { }
    }
    public static class ThatException
    {
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Core.IThat<TException>> HasHResult<TException>(this aweXpect.Core.IThat<TException> source, int expected)
            where TException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInner(this aweXpect.Core.IThat<System.Exception?> source, System.Type innerExceptionType) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInner(this aweXpect.Core.IThat<System.Exception?> source, System.Type innerExceptionType, System.Action<aweXpect.Core.IThat<System.Exception?>> expectations) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInner<TInnerException>(this aweXpect.Core.IThat<System.Exception?> source)
            where TInnerException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInner<TInnerException>(this aweXpect.Core.IThat<System.Exception?> source, System.Action<aweXpect.Core.IThat<TInnerException?>> expectations)
            where TInnerException : System.Exception? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInnerException(this aweXpect.Core.IThat<System.Exception?> source) { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasInnerException(this aweXpect.Core.IThat<System.Exception?> source, System.Action<aweXpect.Core.IThat<System.Exception?>> expectations) { }
        public static aweXpect.Results.StringEqualityTypeResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasMessage(this aweXpect.Core.IThat<System.Exception?> source, string expected) { }
        public static aweXpect.Results.StringEqualityTypeResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasMessageContaining(this aweXpect.Core.IThat<System.Exception?> source, string? expected) { }
        public static aweXpect.Results.AndOrResult<TException, aweXpect.Core.IThat<TException>> HasParamName<TException>(this aweXpect.Core.IThat<TException> source, string? expected)
            where TException : System.ArgumentException? { }
        public static aweXpect.Results.AndOrResult<System.Exception?, aweXpect.Core.IThat<System.Exception?>> HasRecursiveInnerExceptions(this aweXpect.Core.IThat<System.Exception?> source, System.Action<aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Exception>>> expectations) { }
    }
    public static class ThatGeneric
    {
        public static aweXpect.Results.RepeatedCheckResult<T, aweXpect.Core.IThat<T>> CompliesWith<T>(this aweXpect.Core.IThat<T> source, System.Action<aweXpect.Core.IThat<T>> expectations) { }
        public static aweXpect.Results.RepeatedCheckResult<T, aweXpect.Core.IThat<T>> DoesNotComplyWith<T>(this aweXpect.Core.IThat<T> source, System.Action<aweXpect.Core.IThat<T>> expectations) { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IThat<T>> DoesNotSatisfy<T>(this aweXpect.Core.IThat<T> source, System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IThat<T>> For<T, TMember>(this aweXpect.Core.IThat<T> source, System.Func<T, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<TEquatable, aweXpect.Core.IThat<TEquatable>> IsEquatableTo<T, TEquatable>(this aweXpect.Core.IThat<TEquatable> source, T expected)
            where TEquatable : System.IEquatable<T> { }
        public static aweXpect.Results.AndOrResult<TEquatable, aweXpect.Core.IThat<TEquatable>> IsNotEquatableTo<T, TEquatable>(this aweXpect.Core.IThat<TEquatable> source, T unexpected)
            where TEquatable : System.IEquatable<T> { }
        public static aweXpect.Results.RepeatedCheckResult<T, aweXpect.Core.IThat<T>> Satisfies<T>(this aweXpect.Core.IThat<T> source, System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
    }
    public static class ThatGuid
    {
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IThat<System.Guid>> IsEmpty(this aweXpect.Core.IThat<System.Guid> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IThat<System.Guid>> IsEqualTo(this aweXpect.Core.IThat<System.Guid> source, System.Guid? expected) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IThat<System.Guid>> IsNotEmpty(this aweXpect.Core.IThat<System.Guid> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid, aweXpect.Core.IThat<System.Guid>> IsNotEqualTo(this aweXpect.Core.IThat<System.Guid> source, System.Guid? unexpected) { }
    }
    public static class ThatNullableBool
    {
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> Implies(this aweXpect.Core.IThat<bool?> source, bool consequent) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsEqualTo(this aweXpect.Core.IThat<bool?> source, bool? expected) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsFalse(this aweXpect.Core.IThat<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsNotEqualTo(this aweXpect.Core.IThat<bool?> source, bool? unexpected) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsNotFalse(this aweXpect.Core.IThat<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsNotNull(this aweXpect.Core.IThat<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsNotTrue(this aweXpect.Core.IThat<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsNull(this aweXpect.Core.IThat<bool?> source) { }
        public static aweXpect.Results.AndOrResult<bool?, aweXpect.Core.IThat<bool?>> IsTrue(this aweXpect.Core.IThat<bool?> source) { }
    }
    public static class ThatNullableChar
    {
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsALetter(this aweXpect.Core.IThat<char?> source) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsANumber(this aweXpect.Core.IThat<char?> source) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsAnAsciiLetter(this aweXpect.Core.IThat<char?> source) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsEqualTo(this aweXpect.Core.IThat<char?> source, char? expected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsNotEqualTo(this aweXpect.Core.IThat<char?> source, char? unexpected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsNotOneOf(this aweXpect.Core.IThat<char?> source, System.Collections.Generic.IEnumerable<char> unexpected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsNotOneOf(this aweXpect.Core.IThat<char?> source, System.Collections.Generic.IEnumerable<char?> unexpected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsNotOneOf(this aweXpect.Core.IThat<char?> source, params char?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsOneOf(this aweXpect.Core.IThat<char?> source, System.Collections.Generic.IEnumerable<char> expected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsOneOf(this aweXpect.Core.IThat<char?> source, System.Collections.Generic.IEnumerable<char?> expected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsOneOf(this aweXpect.Core.IThat<char?> source, params char?[] expected) { }
        public static aweXpect.Results.AndOrResult<char?, aweXpect.Core.IThat<char?>> IsWhiteSpace(this aweXpect.Core.IThat<char?> source) { }
    }
    public static class ThatNullableDateTime
    {
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasDay(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasHour(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.DateTimeKind<System.DateTime?> HasKind(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasMillisecond(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasMinute(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasMonth(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasSecond(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTime?> HasYear(this aweXpect.Core.IThat<System.DateTime?> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsAfter(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsBefore(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>>, System.DateTime?> IsBetween(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsEqualTo(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotAfter(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotBefore(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>>, System.DateTime?> IsNotBetween(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotEqualTo(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotOnOrAfter(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotOnOrBefore(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime?> source, System.Collections.Generic.IEnumerable<System.DateTime> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime?> source, System.Collections.Generic.IEnumerable<System.DateTime?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTime?> source, params System.DateTime?[] unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsOnOrAfter(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsOnOrBefore(this aweXpect.Core.IThat<System.DateTime?> source, System.DateTime? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsOneOf(this aweXpect.Core.IThat<System.DateTime?> source, System.Collections.Generic.IEnumerable<System.DateTime> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsOneOf(this aweXpect.Core.IThat<System.DateTime?> source, System.Collections.Generic.IEnumerable<System.DateTime?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTime?, aweXpect.Core.IThat<System.DateTime?>> IsOneOf(this aweXpect.Core.IThat<System.DateTime?> source, params System.DateTime?[] expected) { }
    }
    public static class ThatNullableDateTimeOffset
    {
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasDay(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasHour(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasMillisecond(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasMinute(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasMonth(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.TimeSpan<System.DateTimeOffset?> HasOffset(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasSecond(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.PropertyResult.Int<System.DateTimeOffset?> HasYear(this aweXpect.Core.IThat<System.DateTimeOffset?> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsAfter(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsBefore(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>>, System.DateTimeOffset?> IsBetween(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsEqualTo(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotAfter(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotBefore(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>>, System.DateTimeOffset?> IsNotBetween(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotEqualTo(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotOnOrAfter(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotOnOrBefore(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsNotOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, params System.DateTimeOffset?[] unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsOnOrAfter(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsOnOrBefore(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.DateTimeOffset? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, System.Collections.Generic.IEnumerable<System.DateTimeOffset?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.DateTimeOffset?, aweXpect.Core.IThat<System.DateTimeOffset?>> IsOneOf(this aweXpect.Core.IThat<System.DateTimeOffset?> source, params System.DateTimeOffset?[] expected) { }
    }
    public static class ThatNullableEnum
    {
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> DoesNotHaveFlag<TEnum>(this aweXpect.Core.IThat<TEnum?> source, TEnum? unexpectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> DoesNotHaveValue<TEnum>(this aweXpect.Core.IThat<TEnum?> source, long? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> HasFlag<TEnum>(this aweXpect.Core.IThat<TEnum?> source, TEnum? expectedFlag)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> HasValue<TEnum>(this aweXpect.Core.IThat<TEnum?> source, long? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsDefined<TEnum>(this aweXpect.Core.IThat<TEnum?> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsEqualTo<TEnum>(this aweXpect.Core.IThat<TEnum?> source, TEnum? expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsNotDefined<TEnum>(this aweXpect.Core.IThat<TEnum?> source)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsNotEqualTo<TEnum>(this aweXpect.Core.IThat<TEnum?> source, TEnum? unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, System.Collections.Generic.IEnumerable<TEnum> unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, System.Collections.Generic.IEnumerable<TEnum?> unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsNotOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, params TEnum?[] unexpected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, System.Collections.Generic.IEnumerable<TEnum> expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, System.Collections.Generic.IEnumerable<TEnum?> expected)
            where TEnum :  struct, System.Enum { }
        public static aweXpect.Results.AndOrResult<TEnum?, aweXpect.Core.IThat<TEnum?>> IsOneOf<TEnum>(this aweXpect.Core.IThat<TEnum?> source, params TEnum?[] expected)
            where TEnum :  struct, System.Enum { }
    }
    public static class ThatNullableGuid
    {
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IThat<System.Guid?>> IsEmpty(this aweXpect.Core.IThat<System.Guid?> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IThat<System.Guid?>> IsEqualTo(this aweXpect.Core.IThat<System.Guid?> source, System.Guid? expected) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IThat<System.Guid?>> IsNotEmpty(this aweXpect.Core.IThat<System.Guid?> source) { }
        public static aweXpect.Results.AndOrResult<System.Guid?, aweXpect.Core.IThat<System.Guid?>> IsNotEqualTo(this aweXpect.Core.IThat<System.Guid?> source, System.Guid? unexpected) { }
    }
    public static class ThatNullableTimeSpan
    {
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>>, System.TimeSpan?> IsBetween(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsGreaterThan(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsLessThan(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNegative(this aweXpect.Core.IThat<System.TimeSpan?> source) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>>, System.TimeSpan?> IsNotBetween(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotGreaterThan(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotGreaterThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotLessThan(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotLessThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan?> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotNegative(this aweXpect.Core.IThat<System.TimeSpan?> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, System.Collections.Generic.IEnumerable<System.TimeSpan> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, System.Collections.Generic.IEnumerable<System.TimeSpan?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, params System.TimeSpan?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsNotPositive(this aweXpect.Core.IThat<System.TimeSpan?> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, System.Collections.Generic.IEnumerable<System.TimeSpan> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, System.Collections.Generic.IEnumerable<System.TimeSpan?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan?> source, params System.TimeSpan?[] expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan?, aweXpect.Core.IThat<System.TimeSpan?>> IsPositive(this aweXpect.Core.IThat<System.TimeSpan?> source) { }
    }
    public static class ThatNumber
    {
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>>, byte?> IsBetween(this aweXpect.Core.IThat<byte> source, byte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>>, byte?> IsBetween(this aweXpect.Core.IThat<byte?> source, byte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>>, decimal?> IsBetween(this aweXpect.Core.IThat<decimal> source, decimal? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>>, decimal?> IsBetween(this aweXpect.Core.IThat<decimal?> source, decimal? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>>, double?> IsBetween(this aweXpect.Core.IThat<double> source, double? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>>, double?> IsBetween(this aweXpect.Core.IThat<double?> source, double? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>>, float?> IsBetween(this aweXpect.Core.IThat<float> source, float? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>>, float?> IsBetween(this aweXpect.Core.IThat<float?> source, float? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>>, int?> IsBetween(this aweXpect.Core.IThat<int> source, int? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>>, int?> IsBetween(this aweXpect.Core.IThat<int?> source, int? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>>, long?> IsBetween(this aweXpect.Core.IThat<long> source, long? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>>, long?> IsBetween(this aweXpect.Core.IThat<long?> source, long? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>>, sbyte?> IsBetween(this aweXpect.Core.IThat<sbyte> source, sbyte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>>, sbyte?> IsBetween(this aweXpect.Core.IThat<sbyte?> source, sbyte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>>, short?> IsBetween(this aweXpect.Core.IThat<short> source, short? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>>, short?> IsBetween(this aweXpect.Core.IThat<short?> source, short? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>>, uint?> IsBetween(this aweXpect.Core.IThat<uint> source, uint? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>>, uint?> IsBetween(this aweXpect.Core.IThat<uint?> source, uint? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>>, ulong?> IsBetween(this aweXpect.Core.IThat<ulong> source, ulong? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>>, ulong?> IsBetween(this aweXpect.Core.IThat<ulong?> source, ulong? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>>, ushort?> IsBetween(this aweXpect.Core.IThat<ushort> source, ushort? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>>, ushort?> IsBetween(this aweXpect.Core.IThat<ushort?> source, ushort? minimum) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsEqualTo(this aweXpect.Core.IThat<byte> source, byte? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsEqualTo(this aweXpect.Core.IThat<byte?> source, byte? expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsEqualTo(this aweXpect.Core.IThat<decimal> source, decimal? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsEqualTo(this aweXpect.Core.IThat<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsEqualTo(this aweXpect.Core.IThat<double> source, double? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsEqualTo(this aweXpect.Core.IThat<double?> source, double? expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsEqualTo(this aweXpect.Core.IThat<float> source, float? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsEqualTo(this aweXpect.Core.IThat<float?> source, float? expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsEqualTo(this aweXpect.Core.IThat<int> source, int? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsEqualTo(this aweXpect.Core.IThat<int?> source, int? expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsEqualTo(this aweXpect.Core.IThat<long> source, long? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsEqualTo(this aweXpect.Core.IThat<long?> source, long? expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsEqualTo(this aweXpect.Core.IThat<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsEqualTo(this aweXpect.Core.IThat<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsEqualTo(this aweXpect.Core.IThat<short> source, short? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsEqualTo(this aweXpect.Core.IThat<short?> source, short? expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsEqualTo(this aweXpect.Core.IThat<uint> source, uint? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsEqualTo(this aweXpect.Core.IThat<uint?> source, uint? expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsEqualTo(this aweXpect.Core.IThat<ulong> source, ulong? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsEqualTo(this aweXpect.Core.IThat<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsEqualTo(this aweXpect.Core.IThat<ushort> source, ushort? expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsEqualTo(this aweXpect.Core.IThat<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsFinite(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double?>> IsFinite(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsFinite(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float?>> IsFinite(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>> IsGreaterThan(this aweXpect.Core.IThat<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>> IsGreaterThan(this aweXpect.Core.IThat<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsGreaterThan(this aweXpect.Core.IThat<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsGreaterThan(this aweXpect.Core.IThat<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsGreaterThan(this aweXpect.Core.IThat<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsGreaterThan(this aweXpect.Core.IThat<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsGreaterThan(this aweXpect.Core.IThat<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsGreaterThan(this aweXpect.Core.IThat<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsGreaterThan(this aweXpect.Core.IThat<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsGreaterThan(this aweXpect.Core.IThat<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsGreaterThan(this aweXpect.Core.IThat<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsGreaterThan(this aweXpect.Core.IThat<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsGreaterThan(this aweXpect.Core.IThat<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsGreaterThan(this aweXpect.Core.IThat<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsGreaterThan(this aweXpect.Core.IThat<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsGreaterThan(this aweXpect.Core.IThat<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>> IsGreaterThan(this aweXpect.Core.IThat<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>> IsGreaterThan(this aweXpect.Core.IThat<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>> IsGreaterThan(this aweXpect.Core.IThat<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>> IsGreaterThan(this aweXpect.Core.IThat<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>> IsGreaterThan(this aweXpect.Core.IThat<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>> IsGreaterThan(this aweXpect.Core.IThat<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsInfinite(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsInfinite(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsInfinite(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsInfinite(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>> IsLessThan(this aweXpect.Core.IThat<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>> IsLessThan(this aweXpect.Core.IThat<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsLessThan(this aweXpect.Core.IThat<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsLessThan(this aweXpect.Core.IThat<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsLessThan(this aweXpect.Core.IThat<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsLessThan(this aweXpect.Core.IThat<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsLessThan(this aweXpect.Core.IThat<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsLessThan(this aweXpect.Core.IThat<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsLessThan(this aweXpect.Core.IThat<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsLessThan(this aweXpect.Core.IThat<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsLessThan(this aweXpect.Core.IThat<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsLessThan(this aweXpect.Core.IThat<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsLessThan(this aweXpect.Core.IThat<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsLessThan(this aweXpect.Core.IThat<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsLessThan(this aweXpect.Core.IThat<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsLessThan(this aweXpect.Core.IThat<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>> IsLessThan(this aweXpect.Core.IThat<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>> IsLessThan(this aweXpect.Core.IThat<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>> IsLessThan(this aweXpect.Core.IThat<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>> IsLessThan(this aweXpect.Core.IThat<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>> IsLessThan(this aweXpect.Core.IThat<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>> IsLessThan(this aweXpect.Core.IThat<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<byte> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<byte?> source, byte? expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<decimal> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<decimal?> source, decimal? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<double> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<double?> source, double? expected) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<float> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<float?> source, float? expected) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<int> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<int?> source, int? expected) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<long> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<long?> source, long? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<sbyte> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<sbyte?> source, sbyte? expected) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<short> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<short?> source, short? expected) { }
        public static aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<uint> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<uint?> source, uint? expected) { }
        public static aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<ulong> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<ulong?> source, ulong? expected) { }
        public static aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<ushort> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<ushort?> source, ushort? expected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsNaN(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsNaN(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsNaN(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsNaN(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsNegative(this aweXpect.Core.IThat<decimal> source) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsNegative(this aweXpect.Core.IThat<decimal?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsNegative(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsNegative(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsNegative(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsNegative(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsNegative(this aweXpect.Core.IThat<int> source) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsNegative(this aweXpect.Core.IThat<int?> source) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsNegative(this aweXpect.Core.IThat<long> source) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsNegative(this aweXpect.Core.IThat<long?> source) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsNegative(this aweXpect.Core.IThat<sbyte> source) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsNegative(this aweXpect.Core.IThat<sbyte?> source) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsNegative(this aweXpect.Core.IThat<short> source) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsNegative(this aweXpect.Core.IThat<short?> source) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<byte, aweXpect.Core.IThat<byte>>, byte?> IsNotBetween(this aweXpect.Core.IThat<byte> source, byte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<byte?, aweXpect.Core.IThat<byte?>>, byte?> IsNotBetween(this aweXpect.Core.IThat<byte?> source, byte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>>, decimal?> IsNotBetween(this aweXpect.Core.IThat<decimal> source, decimal? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>>, decimal?> IsNotBetween(this aweXpect.Core.IThat<decimal?> source, decimal? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>>, double?> IsNotBetween(this aweXpect.Core.IThat<double> source, double? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>>, double?> IsNotBetween(this aweXpect.Core.IThat<double?> source, double? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>>, float?> IsNotBetween(this aweXpect.Core.IThat<float> source, float? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>>, float?> IsNotBetween(this aweXpect.Core.IThat<float?> source, float? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>>, int?> IsNotBetween(this aweXpect.Core.IThat<int> source, int? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>>, int?> IsNotBetween(this aweXpect.Core.IThat<int?> source, int? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>>, long?> IsNotBetween(this aweXpect.Core.IThat<long> source, long? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>>, long?> IsNotBetween(this aweXpect.Core.IThat<long?> source, long? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>>, sbyte?> IsNotBetween(this aweXpect.Core.IThat<sbyte> source, sbyte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>>, sbyte?> IsNotBetween(this aweXpect.Core.IThat<sbyte?> source, sbyte? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>>, short?> IsNotBetween(this aweXpect.Core.IThat<short> source, short? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>>, short?> IsNotBetween(this aweXpect.Core.IThat<short?> source, short? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<uint, aweXpect.Core.IThat<uint>>, uint?> IsNotBetween(this aweXpect.Core.IThat<uint> source, uint? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<uint?, aweXpect.Core.IThat<uint?>>, uint?> IsNotBetween(this aweXpect.Core.IThat<uint?> source, uint? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ulong, aweXpect.Core.IThat<ulong>>, ulong?> IsNotBetween(this aweXpect.Core.IThat<ulong> source, ulong? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ulong?, aweXpect.Core.IThat<ulong?>>, ulong?> IsNotBetween(this aweXpect.Core.IThat<ulong?> source, ulong? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ushort, aweXpect.Core.IThat<ushort>>, ushort?> IsNotBetween(this aweXpect.Core.IThat<ushort> source, ushort? minimum) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.AndOrResult<ushort?, aweXpect.Core.IThat<ushort?>>, ushort?> IsNotBetween(this aweXpect.Core.IThat<ushort?> source, ushort? minimum) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsNotEqualTo(this aweXpect.Core.IThat<byte> source, byte? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsNotEqualTo(this aweXpect.Core.IThat<byte?> source, byte? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsNotEqualTo(this aweXpect.Core.IThat<decimal> source, decimal? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsNotEqualTo(this aweXpect.Core.IThat<decimal?> source, decimal? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsNotEqualTo(this aweXpect.Core.IThat<double> source, double? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsNotEqualTo(this aweXpect.Core.IThat<double?> source, double? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsNotEqualTo(this aweXpect.Core.IThat<float> source, float? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsNotEqualTo(this aweXpect.Core.IThat<float?> source, float? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsNotEqualTo(this aweXpect.Core.IThat<int> source, int? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsNotEqualTo(this aweXpect.Core.IThat<int?> source, int? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsNotEqualTo(this aweXpect.Core.IThat<long> source, long? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsNotEqualTo(this aweXpect.Core.IThat<long?> source, long? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsNotEqualTo(this aweXpect.Core.IThat<sbyte> source, sbyte? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsNotEqualTo(this aweXpect.Core.IThat<sbyte?> source, sbyte? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsNotEqualTo(this aweXpect.Core.IThat<short> source, short? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsNotEqualTo(this aweXpect.Core.IThat<short?> source, short? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsNotEqualTo(this aweXpect.Core.IThat<uint> source, uint? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsNotEqualTo(this aweXpect.Core.IThat<uint?> source, uint? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsNotEqualTo(this aweXpect.Core.IThat<ulong> source, ulong? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsNotEqualTo(this aweXpect.Core.IThat<ulong?> source, ulong? unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsNotEqualTo(this aweXpect.Core.IThat<ushort> source, ushort? unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsNotEqualTo(this aweXpect.Core.IThat<ushort?> source, ushort? unexpected) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsNotFinite(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsNotFinite(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsNotFinite(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsNotFinite(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsNotInfinite(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsNotInfinite(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsNotInfinite(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsNotInfinite(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsNotNaN(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsNotNaN(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsNotNaN(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsNotNaN(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsNotOneOf(this aweXpect.Core.IThat<byte> source, System.Collections.Generic.IEnumerable<byte> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsNotOneOf(this aweXpect.Core.IThat<byte> source, System.Collections.Generic.IEnumerable<byte?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsNotOneOf(this aweXpect.Core.IThat<byte> source, params byte?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsNotOneOf(this aweXpect.Core.IThat<byte?> source, System.Collections.Generic.IEnumerable<byte> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsNotOneOf(this aweXpect.Core.IThat<byte?> source, System.Collections.Generic.IEnumerable<byte?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsNotOneOf(this aweXpect.Core.IThat<byte?> source, params byte?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsNotOneOf(this aweXpect.Core.IThat<decimal> source, System.Collections.Generic.IEnumerable<decimal> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsNotOneOf(this aweXpect.Core.IThat<decimal> source, System.Collections.Generic.IEnumerable<decimal?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsNotOneOf(this aweXpect.Core.IThat<decimal> source, params decimal?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsNotOneOf(this aweXpect.Core.IThat<decimal?> source, System.Collections.Generic.IEnumerable<decimal> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsNotOneOf(this aweXpect.Core.IThat<decimal?> source, System.Collections.Generic.IEnumerable<decimal?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsNotOneOf(this aweXpect.Core.IThat<decimal?> source, params decimal?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsNotOneOf(this aweXpect.Core.IThat<double> source, System.Collections.Generic.IEnumerable<double> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsNotOneOf(this aweXpect.Core.IThat<double> source, System.Collections.Generic.IEnumerable<double?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsNotOneOf(this aweXpect.Core.IThat<double> source, params double?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsNotOneOf(this aweXpect.Core.IThat<double?> source, System.Collections.Generic.IEnumerable<double> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsNotOneOf(this aweXpect.Core.IThat<double?> source, System.Collections.Generic.IEnumerable<double?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsNotOneOf(this aweXpect.Core.IThat<double?> source, params double?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsNotOneOf(this aweXpect.Core.IThat<float> source, System.Collections.Generic.IEnumerable<float> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsNotOneOf(this aweXpect.Core.IThat<float> source, System.Collections.Generic.IEnumerable<float?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsNotOneOf(this aweXpect.Core.IThat<float> source, params float?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsNotOneOf(this aweXpect.Core.IThat<float?> source, System.Collections.Generic.IEnumerable<float> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsNotOneOf(this aweXpect.Core.IThat<float?> source, System.Collections.Generic.IEnumerable<float?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsNotOneOf(this aweXpect.Core.IThat<float?> source, params float?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsNotOneOf(this aweXpect.Core.IThat<int> source, System.Collections.Generic.IEnumerable<int> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsNotOneOf(this aweXpect.Core.IThat<int> source, System.Collections.Generic.IEnumerable<int?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsNotOneOf(this aweXpect.Core.IThat<int> source, params int?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsNotOneOf(this aweXpect.Core.IThat<int?> source, System.Collections.Generic.IEnumerable<int> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsNotOneOf(this aweXpect.Core.IThat<int?> source, System.Collections.Generic.IEnumerable<int?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsNotOneOf(this aweXpect.Core.IThat<int?> source, params int?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsNotOneOf(this aweXpect.Core.IThat<long> source, System.Collections.Generic.IEnumerable<long> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsNotOneOf(this aweXpect.Core.IThat<long> source, System.Collections.Generic.IEnumerable<long?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsNotOneOf(this aweXpect.Core.IThat<long> source, params long?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsNotOneOf(this aweXpect.Core.IThat<long?> source, System.Collections.Generic.IEnumerable<long> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsNotOneOf(this aweXpect.Core.IThat<long?> source, System.Collections.Generic.IEnumerable<long?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsNotOneOf(this aweXpect.Core.IThat<long?> source, params long?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsNotOneOf(this aweXpect.Core.IThat<sbyte> source, System.Collections.Generic.IEnumerable<sbyte> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsNotOneOf(this aweXpect.Core.IThat<sbyte> source, System.Collections.Generic.IEnumerable<sbyte?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsNotOneOf(this aweXpect.Core.IThat<sbyte> source, params sbyte?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsNotOneOf(this aweXpect.Core.IThat<sbyte?> source, System.Collections.Generic.IEnumerable<sbyte> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsNotOneOf(this aweXpect.Core.IThat<sbyte?> source, System.Collections.Generic.IEnumerable<sbyte?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsNotOneOf(this aweXpect.Core.IThat<sbyte?> source, params sbyte?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsNotOneOf(this aweXpect.Core.IThat<short> source, System.Collections.Generic.IEnumerable<short> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsNotOneOf(this aweXpect.Core.IThat<short> source, System.Collections.Generic.IEnumerable<short?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsNotOneOf(this aweXpect.Core.IThat<short> source, params short?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsNotOneOf(this aweXpect.Core.IThat<short?> source, System.Collections.Generic.IEnumerable<short> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsNotOneOf(this aweXpect.Core.IThat<short?> source, System.Collections.Generic.IEnumerable<short?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsNotOneOf(this aweXpect.Core.IThat<short?> source, params short?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsNotOneOf(this aweXpect.Core.IThat<uint> source, System.Collections.Generic.IEnumerable<uint> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsNotOneOf(this aweXpect.Core.IThat<uint> source, System.Collections.Generic.IEnumerable<uint?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsNotOneOf(this aweXpect.Core.IThat<uint> source, params uint?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsNotOneOf(this aweXpect.Core.IThat<uint?> source, System.Collections.Generic.IEnumerable<uint> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsNotOneOf(this aweXpect.Core.IThat<uint?> source, System.Collections.Generic.IEnumerable<uint?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsNotOneOf(this aweXpect.Core.IThat<uint?> source, params uint?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsNotOneOf(this aweXpect.Core.IThat<ulong> source, System.Collections.Generic.IEnumerable<ulong> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsNotOneOf(this aweXpect.Core.IThat<ulong> source, System.Collections.Generic.IEnumerable<ulong?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsNotOneOf(this aweXpect.Core.IThat<ulong> source, params ulong?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsNotOneOf(this aweXpect.Core.IThat<ulong?> source, System.Collections.Generic.IEnumerable<ulong> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsNotOneOf(this aweXpect.Core.IThat<ulong?> source, System.Collections.Generic.IEnumerable<ulong?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsNotOneOf(this aweXpect.Core.IThat<ulong?> source, params ulong?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsNotOneOf(this aweXpect.Core.IThat<ushort> source, System.Collections.Generic.IEnumerable<ushort> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsNotOneOf(this aweXpect.Core.IThat<ushort> source, System.Collections.Generic.IEnumerable<ushort?> unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsNotOneOf(this aweXpect.Core.IThat<ushort> source, params ushort?[] unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsNotOneOf(this aweXpect.Core.IThat<ushort?> source, System.Collections.Generic.IEnumerable<ushort> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsNotOneOf(this aweXpect.Core.IThat<ushort?> source, System.Collections.Generic.IEnumerable<ushort?> unexpected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsNotOneOf(this aweXpect.Core.IThat<ushort?> source, params ushort?[] unexpected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsOneOf(this aweXpect.Core.IThat<byte> source, System.Collections.Generic.IEnumerable<byte> expected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsOneOf(this aweXpect.Core.IThat<byte> source, System.Collections.Generic.IEnumerable<byte?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<byte, aweXpect.Core.IThat<byte>> IsOneOf(this aweXpect.Core.IThat<byte> source, params byte?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsOneOf(this aweXpect.Core.IThat<byte?> source, System.Collections.Generic.IEnumerable<byte> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsOneOf(this aweXpect.Core.IThat<byte?> source, System.Collections.Generic.IEnumerable<byte?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<byte, aweXpect.Core.IThat<byte?>> IsOneOf(this aweXpect.Core.IThat<byte?> source, params byte?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsOneOf(this aweXpect.Core.IThat<decimal> source, System.Collections.Generic.IEnumerable<decimal> expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsOneOf(this aweXpect.Core.IThat<decimal> source, System.Collections.Generic.IEnumerable<decimal?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<decimal, aweXpect.Core.IThat<decimal>> IsOneOf(this aweXpect.Core.IThat<decimal> source, params decimal?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsOneOf(this aweXpect.Core.IThat<decimal?> source, System.Collections.Generic.IEnumerable<decimal> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsOneOf(this aweXpect.Core.IThat<decimal?> source, System.Collections.Generic.IEnumerable<decimal?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<decimal, aweXpect.Core.IThat<decimal?>> IsOneOf(this aweXpect.Core.IThat<decimal?> source, params decimal?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsOneOf(this aweXpect.Core.IThat<double> source, System.Collections.Generic.IEnumerable<double> expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsOneOf(this aweXpect.Core.IThat<double> source, System.Collections.Generic.IEnumerable<double?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<double, aweXpect.Core.IThat<double>> IsOneOf(this aweXpect.Core.IThat<double> source, params double?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsOneOf(this aweXpect.Core.IThat<double?> source, System.Collections.Generic.IEnumerable<double> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsOneOf(this aweXpect.Core.IThat<double?> source, System.Collections.Generic.IEnumerable<double?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<double, aweXpect.Core.IThat<double?>> IsOneOf(this aweXpect.Core.IThat<double?> source, params double?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsOneOf(this aweXpect.Core.IThat<float> source, System.Collections.Generic.IEnumerable<float> expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsOneOf(this aweXpect.Core.IThat<float> source, System.Collections.Generic.IEnumerable<float?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<float, aweXpect.Core.IThat<float>> IsOneOf(this aweXpect.Core.IThat<float> source, params float?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsOneOf(this aweXpect.Core.IThat<float?> source, System.Collections.Generic.IEnumerable<float> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsOneOf(this aweXpect.Core.IThat<float?> source, System.Collections.Generic.IEnumerable<float?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<float, aweXpect.Core.IThat<float?>> IsOneOf(this aweXpect.Core.IThat<float?> source, params float?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsOneOf(this aweXpect.Core.IThat<int> source, System.Collections.Generic.IEnumerable<int> expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsOneOf(this aweXpect.Core.IThat<int> source, System.Collections.Generic.IEnumerable<int?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<int, aweXpect.Core.IThat<int>> IsOneOf(this aweXpect.Core.IThat<int> source, params int?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsOneOf(this aweXpect.Core.IThat<int?> source, System.Collections.Generic.IEnumerable<int> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsOneOf(this aweXpect.Core.IThat<int?> source, System.Collections.Generic.IEnumerable<int?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<int, aweXpect.Core.IThat<int?>> IsOneOf(this aweXpect.Core.IThat<int?> source, params int?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsOneOf(this aweXpect.Core.IThat<long> source, System.Collections.Generic.IEnumerable<long> expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsOneOf(this aweXpect.Core.IThat<long> source, System.Collections.Generic.IEnumerable<long?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<long, aweXpect.Core.IThat<long>> IsOneOf(this aweXpect.Core.IThat<long> source, params long?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsOneOf(this aweXpect.Core.IThat<long?> source, System.Collections.Generic.IEnumerable<long> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsOneOf(this aweXpect.Core.IThat<long?> source, System.Collections.Generic.IEnumerable<long?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<long, aweXpect.Core.IThat<long?>> IsOneOf(this aweXpect.Core.IThat<long?> source, params long?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsOneOf(this aweXpect.Core.IThat<sbyte> source, System.Collections.Generic.IEnumerable<sbyte> expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsOneOf(this aweXpect.Core.IThat<sbyte> source, System.Collections.Generic.IEnumerable<sbyte?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte>> IsOneOf(this aweXpect.Core.IThat<sbyte> source, params sbyte?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsOneOf(this aweXpect.Core.IThat<sbyte?> source, System.Collections.Generic.IEnumerable<sbyte> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsOneOf(this aweXpect.Core.IThat<sbyte?> source, System.Collections.Generic.IEnumerable<sbyte?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<sbyte, aweXpect.Core.IThat<sbyte?>> IsOneOf(this aweXpect.Core.IThat<sbyte?> source, params sbyte?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsOneOf(this aweXpect.Core.IThat<short> source, System.Collections.Generic.IEnumerable<short> expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsOneOf(this aweXpect.Core.IThat<short> source, System.Collections.Generic.IEnumerable<short?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<short, aweXpect.Core.IThat<short>> IsOneOf(this aweXpect.Core.IThat<short> source, params short?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsOneOf(this aweXpect.Core.IThat<short?> source, System.Collections.Generic.IEnumerable<short> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsOneOf(this aweXpect.Core.IThat<short?> source, System.Collections.Generic.IEnumerable<short?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<short, aweXpect.Core.IThat<short?>> IsOneOf(this aweXpect.Core.IThat<short?> source, params short?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsOneOf(this aweXpect.Core.IThat<uint> source, System.Collections.Generic.IEnumerable<uint> expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsOneOf(this aweXpect.Core.IThat<uint> source, System.Collections.Generic.IEnumerable<uint?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<uint, aweXpect.Core.IThat<uint>> IsOneOf(this aweXpect.Core.IThat<uint> source, params uint?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsOneOf(this aweXpect.Core.IThat<uint?> source, System.Collections.Generic.IEnumerable<uint> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsOneOf(this aweXpect.Core.IThat<uint?> source, System.Collections.Generic.IEnumerable<uint?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<uint, aweXpect.Core.IThat<uint?>> IsOneOf(this aweXpect.Core.IThat<uint?> source, params uint?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsOneOf(this aweXpect.Core.IThat<ulong> source, System.Collections.Generic.IEnumerable<ulong> expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsOneOf(this aweXpect.Core.IThat<ulong> source, System.Collections.Generic.IEnumerable<ulong?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<ulong, aweXpect.Core.IThat<ulong>> IsOneOf(this aweXpect.Core.IThat<ulong> source, params ulong?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsOneOf(this aweXpect.Core.IThat<ulong?> source, System.Collections.Generic.IEnumerable<ulong> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsOneOf(this aweXpect.Core.IThat<ulong?> source, System.Collections.Generic.IEnumerable<ulong?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ulong, aweXpect.Core.IThat<ulong?>> IsOneOf(this aweXpect.Core.IThat<ulong?> source, params ulong?[] expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsOneOf(this aweXpect.Core.IThat<ushort> source, System.Collections.Generic.IEnumerable<ushort> expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsOneOf(this aweXpect.Core.IThat<ushort> source, System.Collections.Generic.IEnumerable<ushort?> expected) { }
        public static aweXpect.Results.NumberToleranceResult<ushort, aweXpect.Core.IThat<ushort>> IsOneOf(this aweXpect.Core.IThat<ushort> source, params ushort?[] expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsOneOf(this aweXpect.Core.IThat<ushort?> source, System.Collections.Generic.IEnumerable<ushort> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsOneOf(this aweXpect.Core.IThat<ushort?> source, System.Collections.Generic.IEnumerable<ushort?> expected) { }
        public static aweXpect.Results.NullableNumberToleranceResult<ushort, aweXpect.Core.IThat<ushort?>> IsOneOf(this aweXpect.Core.IThat<ushort?> source, params ushort?[] expected) { }
        public static aweXpect.Results.AndOrResult<decimal, aweXpect.Core.IThat<decimal>> IsPositive(this aweXpect.Core.IThat<decimal> source) { }
        public static aweXpect.Results.AndOrResult<decimal?, aweXpect.Core.IThat<decimal?>> IsPositive(this aweXpect.Core.IThat<decimal?> source) { }
        public static aweXpect.Results.AndOrResult<double, aweXpect.Core.IThat<double>> IsPositive(this aweXpect.Core.IThat<double> source) { }
        public static aweXpect.Results.AndOrResult<double?, aweXpect.Core.IThat<double?>> IsPositive(this aweXpect.Core.IThat<double?> source) { }
        public static aweXpect.Results.AndOrResult<float, aweXpect.Core.IThat<float>> IsPositive(this aweXpect.Core.IThat<float> source) { }
        public static aweXpect.Results.AndOrResult<float?, aweXpect.Core.IThat<float?>> IsPositive(this aweXpect.Core.IThat<float?> source) { }
        public static aweXpect.Results.AndOrResult<int, aweXpect.Core.IThat<int>> IsPositive(this aweXpect.Core.IThat<int> source) { }
        public static aweXpect.Results.AndOrResult<int?, aweXpect.Core.IThat<int?>> IsPositive(this aweXpect.Core.IThat<int?> source) { }
        public static aweXpect.Results.AndOrResult<long, aweXpect.Core.IThat<long>> IsPositive(this aweXpect.Core.IThat<long> source) { }
        public static aweXpect.Results.AndOrResult<long?, aweXpect.Core.IThat<long?>> IsPositive(this aweXpect.Core.IThat<long?> source) { }
        public static aweXpect.Results.AndOrResult<sbyte, aweXpect.Core.IThat<sbyte>> IsPositive(this aweXpect.Core.IThat<sbyte> source) { }
        public static aweXpect.Results.AndOrResult<sbyte?, aweXpect.Core.IThat<sbyte?>> IsPositive(this aweXpect.Core.IThat<sbyte?> source) { }
        public static aweXpect.Results.AndOrResult<short, aweXpect.Core.IThat<short>> IsPositive(this aweXpect.Core.IThat<short> source) { }
        public static aweXpect.Results.AndOrResult<short?, aweXpect.Core.IThat<short?>> IsPositive(this aweXpect.Core.IThat<short?> source) { }
    }
    public static class ThatObject
    {
        public static aweXpect.Results.AndOrWhoseResult<TType, aweXpect.Core.IThat<object?>> Is<TType>(this aweXpect.Core.IThat<object?> source) { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> Is<T>(this aweXpect.Core.IThat<T?> source, System.Type type)
            where T :  class { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsEqualTo(this aweXpect.Core.IThat<object?> source, object? expected) { }
        public static aweXpect.Results.ObjectEqualityResult<T, aweXpect.Core.IThat<T>, T> IsEqualTo<T>(this aweXpect.Core.IThat<T> source, T? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "")
            where T :  struct { }
        public static aweXpect.Results.ObjectEqualityResult<T?, aweXpect.Core.IThat<T?>, T?> IsEqualTo<T>(this aweXpect.Core.IThat<T?> source, T? expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "")
            where T :  struct { }
        public static aweXpect.Results.AndOrResult<TSubject, aweXpect.Core.IThat<TSubject>> IsEquivalentTo<TSubject, TExpected>(this aweXpect.Core.IThat<TSubject> source, TExpected expected, System.Func<aweXpect.Equivalency.EquivalencyOptions<TExpected>, aweXpect.Equivalency.EquivalencyOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IThat<object?>> IsExactly(this aweXpect.Core.IThat<object?> source, System.Type type) { }
        public static aweXpect.Results.AndOrWhoseResult<TType, aweXpect.Core.IThat<object?>> IsExactly<TType>(this aweXpect.Core.IThat<object?> source) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IThat<object?>> IsNot<TType>(this aweXpect.Core.IThat<object?> source) { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> IsNot<T>(this aweXpect.Core.IThat<T?> source, System.Type type)
            where T :  class { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsNotEqualTo(this aweXpect.Core.IThat<object?> source, object? unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<T, aweXpect.Core.IThat<T>, T> IsNotEqualTo<T>(this aweXpect.Core.IThat<T> source, T? unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "")
            where T :  struct { }
        public static aweXpect.Results.ObjectEqualityResult<T?, aweXpect.Core.IThat<T?>, T?> IsNotEqualTo<T>(this aweXpect.Core.IThat<T?> source, T? unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "")
            where T :  struct { }
        public static aweXpect.Results.AndOrResult<TSubject, aweXpect.Core.IThat<TSubject>> IsNotEquivalentTo<TSubject, TExpected>(this aweXpect.Core.IThat<TSubject> source, TExpected unexpected, System.Func<aweXpect.Equivalency.EquivalencyOptions<TExpected>, aweXpect.Equivalency.EquivalencyOptions>? options = null) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IThat<object?>> IsNotExactly(this aweXpect.Core.IThat<object?> source, System.Type type) { }
        public static aweXpect.Results.AndOrResult<object?, aweXpect.Core.IThat<object?>> IsNotExactly<TType>(this aweXpect.Core.IThat<object?> source) { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IThat<T?>> IsNotNull<T>(this aweXpect.Core.IThat<T?> source)
            where T :  class { }
        public static aweXpect.Results.AndOrResult<T, aweXpect.Core.IThat<T?>> IsNotNull<T>(this aweXpect.Core.IThat<T?> source)
            where T :  struct { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsNotOneOf(this aweXpect.Core.IThat<object?> source, params object?[] unexpected) { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsNotOneOf(this aweXpect.Core.IThat<object?> source, System.Collections.Generic.IEnumerable<object?> unexpected, [System.Runtime.CompilerServices.CallerArgumentExpression("unexpected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> IsNotSameAs<T>(this aweXpect.Core.IThat<T?> source, object? unexpected)
            where T :  class { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> IsNull<T>(this aweXpect.Core.IThat<T?> source)
            where T :  class { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> IsNull<T>(this aweXpect.Core.IThat<T?> source)
            where T :  struct { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsOneOf(this aweXpect.Core.IThat<object?> source, params object?[] expected) { }
        public static aweXpect.Results.ObjectEqualityResult<object?, aweXpect.Core.IThat<object?>, object?> IsOneOf(this aweXpect.Core.IThat<object?> source, System.Collections.Generic.IEnumerable<object?> expected, [System.Runtime.CompilerServices.CallerArgumentExpression("expected")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.AndOrResult<T?, aweXpect.Core.IThat<T?>> IsSameAs<T>(this aweXpect.Core.IThat<T?> source, object? expected)
            where T :  class { }
    }
    public static class ThatReadOnlyDictionary
    {
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IReadOnlyDictionary<TKey, string?>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, string?>?>> AreAllUnique<TKey>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, string?>?> source) { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, string?>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, string?>?>> AreAllUnique<TKey>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, string?>?> source)
            where TKey :  notnull { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>, TValue> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source) { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>, TValue> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source)
            where TKey :  notnull { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, System.Func<TValue, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.StringEqualityResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> AreAllUnique<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, System.Func<TValue, string> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "")
            where TKey :  notnull { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>, TMember> AreAllUnique<TKey, TValue, TMember>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, System.Func<TValue, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.ObjectEqualityResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>, TMember> AreAllUnique<TKey, TValue, TMember>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, System.Func<TValue, TMember> memberAccessor, [System.Runtime.CompilerServices.CallerArgumentExpression("memberAccessor")] string doNotPopulateThisValue = "")
            where TKey :  notnull { }
        public static aweXpect.Results.ContainsValueResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, TKey expected) { }
        public static aweXpect.Results.ContainsValueResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, TKey expected)
            where TKey :  notnull { }
        public static aweXpect.Results.ContainsValuesResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, params TKey[] expected) { }
        public static aweXpect.Results.ContainsValuesResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>, TKey, TValue?> ContainsKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, params TKey[] expected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> ContainsValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, TValue expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> ContainsValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, TValue expected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> ContainsValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, params TValue[] expected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> ContainsValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, params TValue[] expected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> DoesNotContainKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, TKey unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> DoesNotContainKey<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, TKey unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> DoesNotContainKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, params TKey[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> DoesNotContainKeys<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, params TKey[] unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> DoesNotContainValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, TValue unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> DoesNotContainValue<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, TValue unexpected)
            where TKey :  notnull { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?>> DoesNotContainValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>?> source, params TValue[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?>> DoesNotContainValues<TKey, TValue>(this aweXpect.Core.IThat<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>?> source, params TValue[] unexpected)
            where TKey :  notnull { }
    }
    public static class ThatSignaler
    {
        public static aweXpect.Results.SignalCountResult DidNotSignal(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler> source) { }
        public static aweXpect.Results.SignalCountResult DidNotSignal(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler> source, aweXpect.Core.Times times) { }
        public static aweXpect.Results.SignalCountResult<TParameter> DidNotSignal<TParameter>(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> source) { }
        public static aweXpect.Results.SignalCountResult<TParameter> DidNotSignal<TParameter>(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> source, aweXpect.Core.Times times) { }
        public static aweXpect.Results.SignalCountResult Signaled(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler> source) { }
        public static aweXpect.Results.SignalCountResult Signaled(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler> source, aweXpect.Core.Times times) { }
        public static aweXpect.Results.SignalCountWhoseResult<TParameter> Signaled<TParameter>(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> source) { }
        public static aweXpect.Results.SignalCountWhoseResult<TParameter> Signaled<TParameter>(this aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> source, aweXpect.Core.Times times) { }
    }
    public static class ThatStream
    {
        public static aweXpect.Results.PropertyResult.Long<System.IO.Stream?> HasLength(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.PropertyResult.Long<System.IO.Stream?> HasPosition(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsNotReadOnly(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsNotReadable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsNotSeekable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsNotWritable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsNotWriteOnly(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsReadOnly(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsReadable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsSeekable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsWritable(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
        public static aweXpect.Results.AndOrResult<System.IO.Stream?, aweXpect.Core.IThat<System.IO.Stream?>> IsWriteOnly(this aweXpect.Core.IThat<System.IO.Stream?> source) { }
    }
    public static class ThatString
    {
        public static aweXpect.Results.StringEqualityTypeCountResult<string?, aweXpect.Core.IThat<string?>> Contains(this aweXpect.Core.IThat<string?> source, string expected) { }
        public static aweXpect.Results.StringEqualityTypeCountResult<string?, aweXpect.Core.IThat<string?>> DoesNotContain(this aweXpect.Core.IThat<string?> source, string unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> DoesNotEndWith(this aweXpect.Core.IThat<string?> source, string unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> DoesNotStartWith(this aweXpect.Core.IThat<string?> source, string unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> EndsWith(this aweXpect.Core.IThat<string?> source, string expected) { }
        public static aweXpect.Results.PropertyResult.Int<string?> HasLength(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsEmpty(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsEqualTo(this aweXpect.Core.IThat<string?> source, string? expected) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsLowerCased(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotEmpty(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsNotEqualTo(this aweXpect.Core.IThat<string?> source, string? unexpected) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotLowerCased(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotNull(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotNullOrEmpty(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotNullOrWhiteSpace(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsNotOneOf(this aweXpect.Core.IThat<string?> source, System.Collections.Generic.IEnumerable<string?> unexpected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsNotOneOf(this aweXpect.Core.IThat<string?> source, params string?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<string, aweXpect.Core.IThat<string?>> IsNotUpperCased(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsNull(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsNullOrEmpty(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsNullOrWhiteSpace(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsOneOf(this aweXpect.Core.IThat<string?> source, System.Collections.Generic.IEnumerable<string?> expected) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> IsOneOf(this aweXpect.Core.IThat<string?> source, params string?[] expected) { }
        public static aweXpect.Results.AndOrResult<string?, aweXpect.Core.IThat<string?>> IsUpperCased(this aweXpect.Core.IThat<string?> source) { }
        public static aweXpect.Results.StringEqualityTypeResult<string?, aweXpect.Core.IThat<string?>> StartsWith(this aweXpect.Core.IThat<string?> source, string expected) { }
    }
    public static class ThatTimeSpan
    {
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>>, System.TimeSpan?> IsBetween(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsGreaterThan(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsGreaterThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsLessThan(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsLessThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNegative(this aweXpect.Core.IThat<System.TimeSpan> source) { }
        public static aweXpect.Results.BetweenResult<aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>>, System.TimeSpan?> IsNotBetween(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? minimum) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotGreaterThan(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotGreaterThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotLessThan(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotLessThanOrEqualTo(this aweXpect.Core.IThat<System.TimeSpan> source, System.TimeSpan? unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotNegative(this aweXpect.Core.IThat<System.TimeSpan> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, System.Collections.Generic.IEnumerable<System.TimeSpan> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, System.Collections.Generic.IEnumerable<System.TimeSpan?> unexpected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, params System.TimeSpan?[] unexpected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsNotPositive(this aweXpect.Core.IThat<System.TimeSpan> source) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, System.Collections.Generic.IEnumerable<System.TimeSpan> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, System.Collections.Generic.IEnumerable<System.TimeSpan?> expected) { }
        public static aweXpect.Results.TimeToleranceResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsOneOf(this aweXpect.Core.IThat<System.TimeSpan> source, params System.TimeSpan?[] expected) { }
        public static aweXpect.Results.AndOrResult<System.TimeSpan, aweXpect.Core.IThat<System.TimeSpan>> IsPositive(this aweXpect.Core.IThat<System.TimeSpan> source) { }
    }
}
namespace aweXpect.Equivalency
{
    public static class EquivalencyExtensions
    {
        public static TSelf Equivalent<TCollection, TItem, TSelf>(this aweXpect.Results.ObjectHasItemResult<TCollection, TItem, TSelf> result, System.Func<aweXpect.Equivalency.EquivalencyOptions, aweXpect.Equivalency.EquivalencyOptions>? options = null)
            where TSelf : aweXpect.Results.ObjectHasItemResult<TCollection, TItem, TSelf> { }
        public static TSelf Equivalent<TType, TThat, TElement, TSelf>(this aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement, TSelf> result, System.Func<aweXpect.Equivalency.EquivalencyOptions, aweXpect.Equivalency.EquivalencyOptions>? options = null)
            where TSelf : aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement, TSelf> { }
    }
    public static class EquivalencyOptionsExtensions
    {
        public static TEquivalencyOptions Ignoring<TEquivalencyOptions>(this TEquivalencyOptions @this, System.Func<System.Type, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions Ignoring<TEquivalencyOptions>(this TEquivalencyOptions @this, System.Func<string, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions Ignoring<TEquivalencyOptions>(this TEquivalencyOptions @this, System.Func<string, System.Type, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions Ignoring<TEquivalencyOptions>(this TEquivalencyOptions @this, System.Func<string, System.Type, System.Reflection.MemberInfo?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions IgnoringCollectionOrder<TEquivalencyOptions>(this TEquivalencyOptions @this, bool ignoreCollectionOrder = true)
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions IgnoringMember<TEquivalencyOptions>(this TEquivalencyOptions @this, string memberToIgnore)
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions IncludingFields<TEquivalencyOptions>(this TEquivalencyOptions @this, aweXpect.Equivalency.IncludeMembers fieldsToInclude = 2)
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
        public static TEquivalencyOptions IncludingProperties<TEquivalencyOptions>(this TEquivalencyOptions @this, aweXpect.Equivalency.IncludeMembers propertiesToInclude = 2)
            where TEquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions { }
    }
}
namespace aweXpect.Options
{
    public class FixedCheckInterval : aweXpect.Options.ICheckInterval
    {
        public FixedCheckInterval(System.TimeSpan interval) { }
        public System.TimeSpan NextCheckInterval() { }
    }
    public interface ICheckInterval
    {
        System.TimeSpan NextCheckInterval();
    }
    public class RepeatedCheckOptions
    {
        public static readonly System.TimeSpan DefaultInterval;
        public RepeatedCheckOptions() { }
        public aweXpect.Options.ICheckInterval Interval { get; }
        public System.TimeSpan Timeout { get; }
        public void CheckEvery(System.TimeSpan interval) { }
        public override string ToString() { }
        public void Within(System.TimeSpan timeout) { }
    }
}
namespace aweXpect.Results
{
    public class CollectionBeContainedInResult<TType, TThat, TItem> : aweXpect.Results.CollectionMatchResult<TType, TThat, TItem>
    {
        public CollectionBeContainedInResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.CollectionMatchResult<TType, TThat, TItem> Properly() { }
    }
    public class CollectionContainResult<TType, TThat, TItem> : aweXpect.Results.CollectionMatchResult<TType, TThat, TItem>
    {
        public CollectionContainResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.CollectionMatchResult<TType, TThat, TItem> Properly() { }
    }
    public class CollectionMatchResult<TType, TThat, TElement> : aweXpect.Results.CollectionMatchResult<TType, TThat, TElement, aweXpect.Results.CollectionMatchResult<TType, TThat, TElement>>
    {
        public CollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
    }
    public class CollectionMatchResult<TType, TThat, TElement, TSelf> : aweXpect.Results.AndOrResult<TType, TThat>, aweXpect.Core.IOptionsProvider<aweXpect.Options.CollectionMatchOptions>
        where TSelf : aweXpect.Results.CollectionMatchResult<TType, TThat, TElement, TSelf>
    {
        public CollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public TSelf IgnoringDuplicates() { }
        public TSelf IgnoringInterspersedItems() { }
        public TSelf InAnyOrder() { }
    }
    public class ContainsValueResult<TCollection, TThat, TKey, TValue> : aweXpect.Results.AndOrResult<TCollection, TThat>
    {
        public aweXpect.Core.IThat<TValue> WhoseValue { get; }
    }
    public class ContainsValuesResult<TCollection, TThat, TKey, TValue> : aweXpect.Results.AndOrResult<TCollection, TThat>
    {
        public aweXpect.ThatEnumerable.Elements<TValue> WhoseValues { get; }
    }
    public class EventTriggerResult<TSubject> : aweXpect.Results.CountResult<aweXpect.Recording.IEventRecording<TSubject>, aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>>>, aweXpect.Core.IOptionsProvider<aweXpect.Options.RepeatedCheckOptions>, aweXpect.Results.EventTriggerResult<TSubject>.IExtensions
        where TSubject :  notnull
    {
        public EventTriggerResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<aweXpect.Recording.IEventRecording<TSubject>> returnValue, aweXpect.Options.TriggerEventFilter filter, aweXpect.Options.Quantifier quantifier, aweXpect.Options.RepeatedCheckOptions options) { }
        public aweXpect.Results.EventTriggerResult<TSubject> With<TEventArgs>(System.Func<TEventArgs, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "")
            where TEventArgs : System.EventArgs { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(int position, System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.EventTriggerResult<TSubject> WithSender(System.Func<object?, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.EventTriggerResult<TSubject> Within(System.TimeSpan timeout) { }
        public interface IExtensions
        {
            aweXpect.Results.EventTriggerResult<TSubject> WithParameter<TParameter>(string expression, int? position, System.Func<TParameter, bool> predicate);
        }
    }
    public class HasItemWithConditionResult<TCollection, TItem> : aweXpect.Core.IOptionsProvider<aweXpect.Options.PredicateOptions<TItem>>
    {
        public aweXpect.Results.HasItemResult<TCollection> Matching(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.HasItemResult<TCollection> Matching<T>() { }
        public aweXpect.Results.HasItemResult<TCollection> Matching<T>(System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.HasItemResult<TCollection> MatchingExactly<T>() { }
        public aweXpect.Results.HasItemResult<TCollection> MatchingExactly<T>(System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
    }
    public class ObjectCollectionBeContainedInResult<TType, TThat, TItem> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TItem>
    {
        public ObjectCollectionBeContainedInResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TItem> options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TItem> Properly() { }
    }
    public class ObjectCollectionContainResult<TType, TThat, TItem> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TItem>
    {
        public ObjectCollectionContainResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TItem> options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TItem> Properly() { }
    }
    public class ObjectCollectionMatchResult<TType, TThat, TElement> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TElement, aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TElement>>
    {
        public ObjectCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TElement> options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
    }
    public class ObjectCollectionMatchResult<TType, TThat, TElement, TSelf> : aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.CollectionMatchOptions>
        where TSelf : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TElement, TSelf>
    {
        public ObjectCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TElement> options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public TSelf IgnoringDuplicates() { }
        public TSelf IgnoringInterspersedItems() { }
        public TSelf InAnyOrder() { }
    }
    public class ObjectCollectionMatchWithToleranceResult<TType, TThat, TElement, TTolerance> : aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TElement>
    {
        public ObjectCollectionMatchWithToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityWithToleranceOptions<TElement, TTolerance> options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.ObjectCollectionMatchResult<TType, TThat, TElement> Within(TTolerance tolerance) { }
    }
    public class ObjectCountResult<TType, TThat, TElement> : aweXpect.Results.ObjectCountResult<TType, TThat, TElement, aweXpect.Results.ObjectCountResult<TType, TThat, TElement>>
    {
        public ObjectCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.ObjectEqualityOptions<TElement> options) { }
    }
    public class ObjectCountResult<TType, TThat, TElement, TSelf> : aweXpect.Results.CountResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.ObjectEqualityOptions<TElement>>
        where TSelf : aweXpect.Results.ObjectCountResult<TType, TThat, TElement, TSelf>
    {
        public ObjectCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.ObjectEqualityOptions<TElement> options) { }
        public TSelf Equivalent(System.Func<aweXpect.Equivalency.EquivalencyOptions, aweXpect.Equivalency.EquivalencyOptions>? optionsCallback = null) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class RepeatedCheckResult<TType, TThat> : aweXpect.Results.AndOrResult<TType, TThat>, aweXpect.Core.IOptionsProvider<aweXpect.Options.RepeatedCheckOptions>
    {
        public RepeatedCheckResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.RepeatedCheckOptions options) { }
        public aweXpect.Results.RepeatedCheckResult<TType, TThat>.WithRepetition Within(System.TimeSpan timeout) { }
        public class WithRepetition : aweXpect.Results.AndOrResult<TType, TThat>
        {
            public WithRepetition(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.RepeatedCheckOptions options) { }
            public aweXpect.Results.AndOrResult<TType, TThat> CheckEvery(System.TimeSpan interval) { }
        }
    }
    public class SignalCountResult : aweXpect.Results.AndOrResult<aweXpect.Signaling.SignalerResult, aweXpect.Core.IThat<aweXpect.Signaling.Signaler>>, aweXpect.Core.IOptionsProvider<aweXpect.Options.SignalerOptions>
    {
        public SignalCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<aweXpect.Signaling.Signaler> returnValue, aweXpect.Options.SignalerOptions options) { }
        public aweXpect.Results.SignalCountResult Within(System.TimeSpan timeout) { }
    }
    public class SignalCountResult<TParameter> : aweXpect.Results.SignalCountResult<TParameter, aweXpect.Results.SignalCountResult<TParameter>>
    {
        public SignalCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> returnValue, aweXpect.Options.SignalerOptions<TParameter> options) { }
    }
    public class SignalCountResult<TParameter, TSelf> : aweXpect.Results.AndOrResult<aweXpect.Signaling.SignalerResult<TParameter>, aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>>>, aweXpect.Core.IOptionsProvider<aweXpect.Options.SignalerOptions>
        where TSelf : aweXpect.Results.SignalCountResult<TParameter, TSelf>
    {
        public SignalCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> returnValue, aweXpect.Options.SignalerOptions<TParameter> options) { }
        public TSelf With(System.Func<TParameter, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public TSelf Within(System.TimeSpan timeout) { }
    }
    public class SignalCountWhoseResult<TParameter> : aweXpect.Results.SignalCountResult<TParameter, aweXpect.Results.SignalCountWhoseResult<TParameter>>
    {
        public SignalCountWhoseResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<aweXpect.Signaling.Signaler<TParameter>> returnValue, aweXpect.Options.SignalerOptions<TParameter> options) { }
        public aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<TParameter>> WhoseParameters { get; }
    }
    public class SingleItemResult<TCollection, TItem> : aweXpect.Results.ExpectationResult<TItem, aweXpect.Results.SingleItemResult<TCollection, TItem>>, aweXpect.Core.IOptionsProvider<aweXpect.Options.PredicateOptions<TItem>>
    {
        public aweXpect.Core.IThat<TItem> Which { get; }
        public aweXpect.Results.SingleItemResult<TCollection, TItem> Matching(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.SingleItemResult<TCollection, T> Matching<T>() { }
        public aweXpect.Results.SingleItemResult<TCollection, T> Matching<T>(System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public class Async : aweXpect.Results.ExpectationResult<TItem, aweXpect.Results.SingleItemResult<TCollection, TItem>.Async>, aweXpect.Core.IOptionsProvider<aweXpect.Options.PredicateOptions<TItem>>
        {
            public aweXpect.Core.IThat<TItem> Which { get; }
            public aweXpect.Results.SingleItemResult<TCollection, TItem>.Async Matching(System.Func<TItem, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
            public aweXpect.Results.SingleItemResult<TCollection, T>.Async Matching<T>() { }
            public aweXpect.Results.SingleItemResult<TCollection, T>.Async Matching<T>(System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        }
    }
    public class StringCollectionBeContainedInResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat>
    {
        public StringCollectionBeContainedInResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.StringCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class StringCollectionContainResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat>
    {
        public StringCollectionContainResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public aweXpect.Results.StringCollectionMatchResult<TType, TThat> Properly() { }
    }
    public class StringCollectionMatchResult<TType, TThat> : aweXpect.Results.StringCollectionMatchResult<TType, TThat, aweXpect.Results.StringCollectionMatchResult<TType, TThat>>
    {
        public StringCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
    }
    public class StringCollectionMatchResult<TType, TThat, TSelf> : aweXpect.Results.StringEqualityTypeResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.CollectionMatchOptions>
        where TSelf : aweXpect.Results.StringCollectionMatchResult<TType, TThat, TSelf>
    {
        public StringCollectionMatchResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options, aweXpect.Options.CollectionMatchOptions collectionMatchOptions) { }
        public TSelf IgnoringDuplicates() { }
        public TSelf IgnoringInterspersedItems() { }
        public TSelf InAnyOrder() { }
    }
}