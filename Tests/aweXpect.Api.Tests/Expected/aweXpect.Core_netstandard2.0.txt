[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("aweXpect.Core.Tests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName=".NET Standard 2.0")]
namespace aweXpect.Core.Adapters
{
    public interface ITestFrameworkAdapter
    {
        bool IsAvailable { get; }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        void Skip(string message);
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        void Throw(string message);
    }
}
namespace aweXpect.Core.Constraints
{
    public abstract class ConstraintResult
    {
        protected ConstraintResult(string expectationText, aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing furtherProcessingStrategy) { }
        public string ExpectationText { get; }
        public aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing FurtherProcessingStrategy { get; }
        public abstract aweXpect.Core.Constraints.ConstraintResult CombineWith(string expectationText, string resultText);
        public class Failure : aweXpect.Core.Constraints.ConstraintResult
        {
            public Failure(string expectationText, string resultText, aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing furtherProcessingStrategy = 0) { }
            public string ResultText { get; }
            public override aweXpect.Core.Constraints.ConstraintResult CombineWith(string expectationText, string resultText) { }
            public override string ToString() { }
        }
        public class Failure<T> : aweXpect.Core.Constraints.ConstraintResult.Failure
        {
            public Failure(T value, string expectationText, string resultText, aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing furtherProcessingStrategy = 0) { }
            public T Value { get; }
            public override aweXpect.Core.Constraints.ConstraintResult CombineWith(string expectationText, string resultText) { }
        }
        public enum FurtherProcessing
        {
            Continue = 0,
            IgnoreCompletely = 1,
            IgnoreResult = 2,
        }
        public class Success : aweXpect.Core.Constraints.ConstraintResult
        {
            public Success(string expectationText, aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing furtherProcessingStrategy = 0) { }
            public override aweXpect.Core.Constraints.ConstraintResult CombineWith(string expectationText, string resultText) { }
            public override string ToString() { }
        }
        public class Success<T> : aweXpect.Core.Constraints.ConstraintResult.Success
        {
            public Success(T value, string expectationText, aweXpect.Core.Constraints.ConstraintResult.FurtherProcessing furtherProcessingStrategy = 0) { }
            public T Value { get; }
            public override aweXpect.Core.Constraints.ConstraintResult CombineWith(string expectationText, string resultText) { }
        }
    }
    public interface IAsyncConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue actual, System.Threading.CancellationToken cancellationToken);
    }
    public interface IAsyncContextConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue actual, aweXpect.Core.EvaluationContext.IEvaluationContext context, System.Threading.CancellationToken cancellationToken);
    }
    public interface IConstraint { }
    public interface IContextConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        aweXpect.Core.Constraints.ConstraintResult IsMetBy(TValue actual, aweXpect.Core.EvaluationContext.IEvaluationContext context);
    }
    public interface IValueConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        aweXpect.Core.Constraints.ConstraintResult IsMetBy(TValue actual);
    }
}
namespace aweXpect.Core.EvaluationContext
{
    public interface IEvaluationContext
    {
        void Store<T>(string key, T value);
        bool TryReceive<T>(string key, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? value);
    }
}
namespace aweXpect.Core
{
    public abstract class ExpectationBuilder
    {
        protected ExpectationBuilder(string subjectExpression) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.Constraints.IAsyncConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.Constraints.IAsyncContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.Constraints.IContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.Constraints.IValueConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder And(string textSeparator = " and ") { }
        public aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TTarget> ForMember<TSource, TTarget>(aweXpect.Core.MemberAccessor<TSource, TTarget?> memberAccessor, System.Func<aweXpect.Core.MemberAccessor, string, string>? expectationTextGenerator = null, bool replaceIt = true) { }
        public aweXpect.Core.ExpectationBuilder ForWhich<TSource, TTarget>(System.Func<TSource, System.Threading.Tasks.Task<TTarget?>> asyncMemberAccessor, string? separator = null) { }
        public aweXpect.Core.ExpectationBuilder ForWhich<TSource, TTarget>(System.Func<TSource, TTarget?> memberAccessor, string? separator = null) { }
        public override string? ToString() { }
        public void WithCancellation(System.Threading.CancellationToken cancellationToken) { }
        public class MemberExpectationBuilder<TSource, TMember>
        {
            public aweXpect.Core.ExpectationBuilder AddExpectations(System.Action<aweXpect.Core.ExpectationBuilder> expectation) { }
            public aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TMember> Validate(System.Func<string, aweXpect.Core.Constraints.IValueConstraint<TSource>> constraintBuilder) { }
        }
    }
    public static class ExpectationBuilderExtensions
    {
        public static aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TTarget> ForMember<TSource, TTarget>(this aweXpect.Core.ExpectationBuilder expectationBuilder, System.Func<TSource, TTarget> memberSelector, string displayName, bool replaceIt = true) { }
    }
    public interface ICollectionMatcher<in T, out T2>
        where in T : T2
    {
        bool Verify(string it, T value, aweXpect.Core.IOptionsEquality<T2> options, out string? error);
        bool VerifyComplete(string it, aweXpect.Core.IOptionsEquality<T2> options, out string? error);
    }
    public interface IExpectSubject<out T>
    {
        bool Equals(object? obj);
        int GetHashCode();
        System.Type GetType();
        aweXpect.Core.IThat<T> Should(System.Action<aweXpect.Core.ExpectationBuilder> builderOptions);
        string? ToString();
    }
    public interface IObjectMatchType
    {
        bool AreConsideredEqual(object? actual, object? expected);
        string GetExpectation(string expected);
        string GetExtendedFailure(string it, object? actual, object? expected);
    }
    public interface IOptionsEquality<in T>
    {
        bool AreConsideredEqual(T actual, T expected);
    }
    public interface IOptionsProvider<out TOptions>
    {
        TOptions Options { get; }
    }
    public interface IStringMatchType
    {
        bool AreConsideredEqual(string? actual, string? expected, bool ignoreCase, System.Collections.Generic.IEqualityComparer<string> comparer);
        string GetExpectation(string? expected, bool useActiveGrammaticVoice);
        string GetExtendedFailure(string it, string? actual, string? expected, bool ignoreCase, System.Collections.Generic.IEqualityComparer<string> comparer);
    }
    public interface IThat<out T>
    {
        aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
        bool Equals(object? obj);
        int GetHashCode();
        System.Type GetType();
        string? ToString();
    }
    public class ManualExpectationBuilder<TValue> : aweXpect.Core.ExpectationBuilder
    {
        public ManualExpectationBuilder() { }
        public System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue value, aweXpect.Core.EvaluationContext.IEvaluationContext context, System.Threading.CancellationToken cancellationToken) { }
    }
    public abstract class MemberAccessor
    {
        protected MemberAccessor(string name) { }
        public override string ToString() { }
    }
    public class MemberAccessor<TSource, TTarget> : aweXpect.Core.MemberAccessor
    {
        public static aweXpect.Core.MemberAccessor<TSource, TTarget?> FromExpression(System.Linq.Expressions.Expression<System.Func<TSource, TTarget?>> expression) { }
        public static aweXpect.Core.MemberAccessor<TSource, TTarget?> FromFunc(System.Func<TSource, TTarget> func, string name) { }
    }
    public class StringDifference
    {
        public StringDifference(string? actual, string? expected, System.Collections.Generic.IEqualityComparer<string>? comparer = null) { }
        public int IndexOfFirstMismatch { get; }
        public override string ToString() { }
    }
    public abstract class ThatDelegate
    {
        protected ThatDelegate(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
        public sealed class WithValue<TValue> : aweXpect.Core.ThatDelegate
        {
            public WithValue(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        }
        public sealed class WithoutValue : aweXpect.Core.ThatDelegate
        {
            public WithoutValue(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        }
    }
}
namespace aweXpect.Core.Helpers
{
    [System.Flags]
    public enum MemberVisibilities
    {
        None = 0,
        Internal = 1,
        Public = 2,
        ExplicitlyImplemented = 4,
    }
}
namespace aweXpect.Core.Sources
{
    public class DelegateValue
    {
        public DelegateValue(System.Exception? exception, System.TimeSpan duration, bool isNull = false) { }
        public System.TimeSpan Duration { get; }
        public System.Exception? Exception { get; }
        public bool IsNull { get; }
    }
    public class DelegateValue<TValue> : aweXpect.Core.Sources.DelegateValue
    {
        public DelegateValue(in TValue? value, System.Exception? exception, System.TimeSpan duration, bool isNull = false) { }
        public TValue Value { get; }
    }
}
namespace aweXpect.Customization
{
    public class AwexpectCustomization : aweXpect.Customization.IAwexpectCustomization
    {
        public AwexpectCustomization() { }
    }
    public static class AwexpectCustomizationExtensions
    {
        public static aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomization Formatting(this aweXpect.Customization.AwexpectCustomization awexpectCustomization) { }
        public static aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomization Recording(this aweXpect.Customization.AwexpectCustomization awexpectCustomization) { }
        public static aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomization Reflection(this aweXpect.Customization.AwexpectCustomization awexpectCustomization) { }
        public class FormattingCustomization : aweXpect.Customization.IUpdateableCustomizationValue<aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValue<int> MaximumNumberOfCollectionItems { get; }
            public aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomizationValue, aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomizationValue> update) { }
        }
        public class FormattingCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomizationExtensions.FormattingCustomizationValue>
        {
            public FormattingCustomizationValue() { }
            public int MaximumNumberOfCollectionItems { get; set; }
        }
        public class RecordingCustomization : aweXpect.Customization.IUpdateableCustomizationValue<aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValue<System.TimeSpan> DefaultTimeout { get; }
            public aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomizationValue, aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomizationValue> update) { }
        }
        public class RecordingCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomizationExtensions.RecordingCustomizationValue>
        {
            public RecordingCustomizationValue() { }
            public System.TimeSpan DefaultTimeout { get; set; }
        }
        public class ReflectionCustomization : aweXpect.Customization.IUpdateableCustomizationValue<aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValue<string[]> ExcludedAssemblyPrefixes { get; }
            public aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomizationValue, aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomizationValue> update) { }
        }
        public class ReflectionCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomizationExtensions.ReflectionCustomizationValue>
        {
            public ReflectionCustomizationValue() { }
            public string[] ExcludedAssemblyPrefixes { get; set; }
        }
    }
    public sealed class CustomizationLifetime : System.IDisposable
    {
        public CustomizationLifetime(System.Action callback) { }
        public void Dispose() { }
    }
    public static class Customize
    {
        public static aweXpect.Customization.AwexpectCustomization aweXpect { get; }
    }
    public interface IAwexpectCustomization
    {
        TValue Get<TValue>(string key, TValue defaultValue);
        aweXpect.Customization.CustomizationLifetime Set<TValue>(string key, TValue value);
    }
    public interface ICustomizationValue<TValue>
    {
        TValue Get();
        aweXpect.Customization.CustomizationLifetime Set(TValue value);
    }
    public interface IUpdateableCustomizationValue<TValue>
    {
        TValue Get();
        aweXpect.Customization.CustomizationLifetime Update(System.Func<TValue, TValue> update);
    }
}
namespace aweXpect
{
    public static class Expect
    {
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithoutValue> That(System.Action @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithoutValue> That(System.Action<System.Threading.CancellationToken> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithoutValue> That(System.Func<System.Threading.Tasks.Task> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithoutValue> That(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithValue<TValue>> That<TValue>(System.Func<System.Threading.Tasks.Task<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithValue<TValue>> That<TValue>(System.Func<TValue> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithValue<TValue>> That<TValue>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<aweXpect.Core.ThatDelegate.WithValue<TValue>> That<TValue>(System.Func<System.Threading.CancellationToken, TValue> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<T> That<T>(System.Threading.Tasks.Task<T> subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<T> That<T>(T subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IExpectSubject<T[]> That<T>(T[] subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.Expectation.Combination.All ThatAll(params aweXpect.Results.Expectation[] expectations) { }
        public static aweXpect.Results.Expectation.Combination.Any ThatAny(params aweXpect.Results.Expectation[] expectations) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public static class Fail
    {
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void Test(string reason) { }
        public static void Unless([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(false)] bool condition, string reason) { }
        public static void When([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, string reason) { }
    }
    public class FailException : System.Exception
    {
        public FailException(string message) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public static class Skip
    {
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void Test(string reason) { }
        public static void Unless([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(false)] bool condition, string reason) { }
        public static void When([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, string reason) { }
    }
    public class SkipException : System.Exception
    {
        public SkipException(string message) { }
    }
    public readonly struct Times
    {
        public Times(int value) { }
        public int Value { get; }
        public static aweXpect.Times op_Implicit(int value) { }
    }
    public static class TimesExtensions
    {
        public static aweXpect.Times Times(this int value) { }
    }
}
namespace aweXpect.Formatting
{
    public static class Format
    {
        public static aweXpect.Formatting.ValueFormatter Formatter { get; }
    }
    public class FormattingContext
    {
        public FormattingContext() { }
        public System.Collections.Generic.HashSet<object> FormattedObjects { get; }
    }
    public class FormattingOptions
    {
        public static aweXpect.Formatting.FormattingOptions MultipleLines { get; }
        public static aweXpect.Formatting.FormattingOptions SingleLine { get; }
    }
    public class ValueFormatter
    {
        public static readonly string NullString;
    }
    public static class ValueFormatters
    {
        public static string Format(this aweXpect.Formatting.ValueFormatter _, bool value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, byte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.DateTime value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.DateTimeOffset value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, decimal value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, double value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.Guid value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, short value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, int value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, long value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.IntPtr value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.Net.HttpStatusCode? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, sbyte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, float value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, ushort value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, uint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, ulong value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.UIntPtr value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, string? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.DateTime? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.DateTimeOffset? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Enum? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Guid? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.IntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.TimeSpan value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.TimeSpan? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Type? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.UIntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, bool? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, byte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, decimal? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, double? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, float? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, int? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, long? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, sbyte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, short? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, uint? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, ulong? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, ushort? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, bool value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, byte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Collections.IEnumerable? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTime value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTime? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTimeOffset value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTimeOffset? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, decimal value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, double value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Enum? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Guid value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Guid? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, short value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, int value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, long value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.IntPtr value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.IntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Net.HttpStatusCode? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, sbyte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, float value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeSpan value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeSpan? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Type? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ushort value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, uint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ulong value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.UIntPtr value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.UIntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, bool? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, byte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, decimal? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, double? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, float? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, int? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, long? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, sbyte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, short? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, string? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, uint? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ulong? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ushort? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, object? value, aweXpect.Formatting.FormattingOptions? options = null, aweXpect.Formatting.FormattingContext? context = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, object? value, aweXpect.Formatting.FormattingOptions? options = null, aweXpect.Formatting.FormattingContext? context = null) { }
        public static string Format<T>(this aweXpect.Formatting.ValueFormatter formatter, System.Collections.Generic.IEnumerable<T>? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format<T>(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Collections.Generic.IEnumerable<T>? value, aweXpect.Formatting.FormattingOptions? options = null) { }
    }
}
namespace aweXpect.Options
{
    public class CollectionMatchOptions
    {
        public CollectionMatchOptions(aweXpect.Options.CollectionMatchOptions.EquivalenceRelations equivalenceRelations = 1) { }
        public aweXpect.Core.ICollectionMatcher<T, T2> GetCollectionMatcher<T, T2>(System.Collections.Generic.IEnumerable<T> expected)
            where T : T2 { }
        public string GetExpectation(string expectedExpression) { }
        public void IgnoringDuplicates() { }
        public void InAnyOrder() { }
        public void SetEquivalenceRelation(aweXpect.Options.CollectionMatchOptions.EquivalenceRelations equivalenceRelation) { }
        [System.Flags]
        public enum EquivalenceRelations
        {
            Equivalent = 1,
            IsContainedInProperly = 6,
            ContainsProperly = 10,
            IsContainedIn = 4,
            Contains = 8,
        }
    }
    public class CollectionOrderOptions<TItem>
    {
        public CollectionOrderOptions() { }
        public System.Collections.Generic.IComparer<TItem> GetComparer() { }
        public void SetComparer(System.Collections.Generic.IComparer<TItem> comparer) { }
        public override string ToString() { }
    }
    public class EquivalencyOptions
    {
        public EquivalencyOptions() { }
        public System.Collections.Generic.IReadOnlyList<string> MembersToIgnore { get; }
        public aweXpect.Options.EquivalencyOptions IgnoringMember(string memberToIgnore) { }
        public static aweXpect.Options.EquivalencyOptions FromCallback(System.Func<aweXpect.Options.EquivalencyOptions, aweXpect.Options.EquivalencyOptions>? callback) { }
    }
    public class NumberTolerance<TNumber>
        where TNumber :  struct, System.IComparable<TNumber>
    {
        public NumberTolerance(System.Func<TNumber, TNumber, TNumber?, bool> isWithinTolerance) { }
        public TNumber? Tolerance { get; }
        public bool IsWithinTolerance(TNumber? actual, TNumber? expected) { }
        public void SetTolerance(TNumber tolerance) { }
        public override string ToString() { }
    }
    public class ObjectEqualityOptions : aweXpect.Core.IOptionsEquality<object?>
    {
        public ObjectEqualityOptions() { }
        public bool AreConsideredEqual(object? actual, object? expected) { }
        public aweXpect.Options.ObjectEqualityOptions Equals() { }
        public string GetExpectation(string expectedExpression) { }
        public string GetExtendedFailure(string it, object? actual, object? expected) { }
        public void SetMatchType(aweXpect.Core.IObjectMatchType matchType) { }
        public override string? ToString() { }
        public aweXpect.Options.ObjectEqualityOptions Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class Quantifier
    {
        public Quantifier() { }
        public void AtLeast(int minimum) { }
        public void AtMost(int maximum) { }
        public void Between(int minimum, int maximum) { }
        public bool? Check(int amount, bool isLast) { }
        public void Exactly(int expected) { }
        public override string ToString() { }
    }
    public class SignalerOptions
    {
        public SignalerOptions() { }
        public System.TimeSpan? Timeout { get; set; }
        public override string ToString() { }
    }
    public class SignalerOptions<TParameter> : aweXpect.Options.SignalerOptions
    {
        public SignalerOptions() { }
        public bool Matches(TParameter parameter) { }
        public override string ToString() { }
        public void WithPredicate(System.Func<TParameter, bool> predicate, string predicateExpression) { }
    }
    public class StringEqualityOptions : aweXpect.Core.IOptionsEquality<string?>
    {
        public StringEqualityOptions() { }
        public bool AreConsideredEqual(string? actual, string? expected) { }
        public aweXpect.Options.StringEqualityOptions AsRegex() { }
        public aweXpect.Options.StringEqualityOptions AsWildcard() { }
        public aweXpect.Options.StringEqualityOptions Exactly() { }
        public string GetExpectation(string? expected, bool useActiveGrammaticVoice) { }
        public string GetExtendedFailure(string it, string? actual, string? expected) { }
        public aweXpect.Options.StringEqualityOptions IgnoringCase(bool ignoreCase = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringLeadingWhiteSpace(bool ignoreLeadingWhiteSpace = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringTrailingWhiteSpace(bool ignoreTrailingWhiteSpace = true) { }
        public void SetMatchType(aweXpect.Core.IStringMatchType matchType) { }
        public override string ToString() { }
        public aweXpect.Options.StringEqualityOptions UsingComparer(System.Collections.Generic.IEqualityComparer<string>? comparer) { }
    }
    public class TimeTolerance
    {
        public TimeTolerance() { }
        public System.TimeSpan? Tolerance { get; }
        public void SetTolerance(System.TimeSpan tolerance) { }
        public string ToDayString() { }
        public override string ToString() { }
    }
    public class TriggerEventFilter
    {
        public TriggerEventFilter() { }
        public void AddPredicate(System.Func<object?[], bool> predicate, string predicateExpression) { }
        public bool IsMatch(object?[] parameters) { }
        public override string ToString() { }
    }
}
namespace aweXpect.Recording
{
    public interface IEventRecordingResult
    {
        int GetEventCount(string eventName, System.Func<object?[], bool>? filter = null);
        string ToString(string eventName);
    }
    public interface IEventRecording<TSubject>
    {
        aweXpect.Recording.IEventRecordingResult Stop();
    }
    public static class RecordExtensions
    {
        public static aweXpect.Recording.RecordingFactory<TSubject> Record<TSubject>(this TSubject subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "")
            where TSubject :  notnull { }
    }
    public class RecordingFactory<TSubject>
        where TSubject :  notnull
    {
        public RecordingFactory(TSubject subject, string subjectExpression) { }
        public aweXpect.Recording.IEventRecording<TSubject> Events(params string[] eventNames) { }
    }
}
namespace aweXpect.Results
{
    public class AndOrResult<TType, TThat> : aweXpect.Results.AndOrResult<TType, TThat, aweXpect.Results.AndOrResult<TType, TThat>>
    {
        public AndOrResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndOrResult<TType, TThat, TSelf> : aweXpect.Results.ExpectationResult<TType, TSelf>
        where TSelf : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
    {
        public AndOrResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public TThat And { get; }
        public TThat Or { get; }
    }
    public class AndOrWhichResult<TType, TThat> : aweXpect.Results.AndOrWhichResult<TType, TThat, aweXpect.Results.AndOrWhichResult<TType, TThat>>
    {
        public AndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndOrWhichResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>
    {
        public AndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>.AdditionalAndOrWhichResult Which<TMember>(System.Linq.Expressions.Expression<System.Func<TType, TMember?>> memberSelector, System.Action<aweXpect.Core.IExpectSubject<TMember?>> expectations) { }
        public class AdditionalAndOrWhichResult : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        {
            public AdditionalAndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
            public aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>.AdditionalAndOrWhichResult AndWhich<TMember>(System.Linq.Expressions.Expression<System.Func<TType, TMember?>> memberSelector, System.Action<aweXpect.Core.IExpectSubject<TMember?>> expectations) { }
        }
    }
    public class BetweenResult<TTarget>
    {
        public BetweenResult(System.Func<int, TTarget> callback) { }
        public TTarget And(aweXpect.Times maximum) { }
    }
    public class CollectionOrderResult<TMember, TType, TThat> : aweXpect.Results.AndOrResult<TType, TThat>
    {
        public CollectionOrderResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionOrderOptions<TMember> options) { }
        public aweXpect.Results.AndOrResult<TType, TThat> Using(System.Collections.Generic.IComparer<TMember> comparer) { }
    }
    public class CountResult<TType, TThat> : aweXpect.Results.CountResult<TType, TThat, aweXpect.Results.CountResult<TType, TThat>>
    {
        public CountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier) { }
    }
    public class CountResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.CountResult<TType, TThat, TSelf>
    {
        public CountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier) { }
        public TSelf AtLeast(aweXpect.Times minimum) { }
        public TSelf AtMost(aweXpect.Times maximum) { }
        public aweXpect.Results.BetweenResult<TSelf> Between(int minimum) { }
        public TSelf Exactly(aweXpect.Times expected) { }
        public TSelf Never() { }
        public TSelf Once() { }
    }
    [System.Diagnostics.StackTraceHidden]
    public abstract class Expectation
    {
        protected Expectation() { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public new System.Type GetType() { }
        public override string? ToString() { }
        public abstract class Combination : aweXpect.Results.Expectation
        {
            protected Combination(aweXpect.Results.Expectation[] expectations) { }
            public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() { }
            protected abstract string GetSubjectLine();
            protected abstract bool IsSuccess(int failureCount, int totalCount);
            public class All : aweXpect.Results.Expectation.Combination
            {
                public All(aweXpect.Results.Expectation[] expectations) { }
                protected override string GetSubjectLine() { }
                protected override bool IsSuccess(int failureCount, int totalCount) { }
            }
            public class Any : aweXpect.Results.Expectation.Combination
            {
                public Any(aweXpect.Results.Expectation[] expectations) { }
                protected override string GetSubjectLine() { }
                protected override bool IsSuccess(int failureCount, int totalCount) { }
            }
        }
    }
    [System.Diagnostics.StackTraceHidden]
    public class ExpectationResult : aweXpect.Results.Expectation
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Results.ExpectationResult Because(string reason) { }
        public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() { }
    }
    public class ExpectationResult<TType> : aweXpect.Results.ExpectationResult<TType, aweXpect.Results.ExpectationResult<TType>>
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public class ExpectationResult<TType, TSelf> : aweXpect.Results.Expectation
        where TSelf : aweXpect.Results.ExpectationResult<TType, TSelf>
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public TSelf Because(string reason) { }
        [System.Diagnostics.StackTraceHidden]
        public System.Runtime.CompilerServices.TaskAwaiter<TType> GetAwaiter() { }
        public TSelf WithCancellation(System.Threading.CancellationToken cancellationToken) { }
    }
    public class NullableNumberToleranceResult<TType, TThat> : aweXpect.Results.NullableNumberToleranceResult<TType, TThat, aweXpect.Results.NullableNumberToleranceResult<TType, TThat>>
        where TType :  struct, System.IComparable<TType>
    {
        public NullableNumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
    }
    public class NullableNumberToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType?, TThat, TSelf>
        where TType :  struct, System.IComparable<TType>
        where TSelf : aweXpect.Results.NullableNumberToleranceResult<TType, TThat, TSelf>
    {
        public NullableNumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
        public TSelf Within(TType tolerance) { }
    }
    public class NumberToleranceResult<TType, TThat> : aweXpect.Results.NumberToleranceResult<TType, TThat, aweXpect.Results.NumberToleranceResult<TType, TThat>>
        where TType :  struct, System.IComparable<TType>
    {
        public NumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
    }
    public class NumberToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TType :  struct, System.IComparable<TType>
        where TSelf : aweXpect.Results.NumberToleranceResult<TType, TThat, TSelf>
    {
        public NumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
        public TSelf Within(TType tolerance) { }
    }
    public class ObjectEqualityResult<TType, TThat> : aweXpect.Results.ObjectEqualityResult<TType, TThat, aweXpect.Results.ObjectEqualityResult<TType, TThat>>
    {
        public ObjectEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options) { }
    }
    public class ObjectEqualityResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.ObjectEqualityOptions>
        where TSelf : aweXpect.Results.ObjectEqualityResult<TType, TThat, TSelf>
    {
        public ObjectEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions options) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class StringCountResult<TType, TThat> : aweXpect.Results.StringCountResult<TType, TThat, aweXpect.Results.StringCountResult<TType, TThat>>
    {
        public StringCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringCountResult<TType, TThat, TSelf> : aweXpect.Results.CountResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.StringCountResult<TType, TThat, TSelf>
    {
        public StringCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf IgnoringCase(bool ignoreCase = true) { }
        public TSelf IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<string> comparer) { }
    }
    public class StringEqualityResult<TType, TThat> : aweXpect.Results.StringEqualityResult<TType, TThat, aweXpect.Results.StringEqualityResult<TType, TThat>>
    {
        public StringEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringEqualityResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.StringEqualityOptions>
        where TSelf : aweXpect.Results.StringEqualityResult<TType, TThat, TSelf>
    {
        public StringEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf IgnoringCase(bool ignoreCase = true) { }
        public TSelf IgnoringLeadingWhiteSpace(bool ignoreLeadingWhiteSpace = true) { }
        public TSelf IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public TSelf IgnoringTrailingWhiteSpace(bool ignoreTrailingWhiteSpace = true) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<string> comparer) { }
    }
    public class StringEqualityTypeCountResult<TType, TThat> : aweXpect.Results.StringCountResult<TType, TThat>
    {
        public StringEqualityTypeCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsRegex() { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsWildcard() { }
        public aweXpect.Results.StringCountResult<TType, TThat> Exactly() { }
    }
    public class StringEqualityTypeResult<TType, TThat> : aweXpect.Results.StringEqualityTypeResult<TType, TThat, aweXpect.Results.StringEqualityTypeResult<TType, TThat>>
    {
        public StringEqualityTypeResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringEqualityTypeResult<TType, TThat, TSelf> : aweXpect.Results.StringEqualityResult<TType, TThat>
        where TSelf : aweXpect.Results.StringEqualityTypeResult<TType, TThat, TSelf>
    {
        public StringEqualityTypeResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf AsRegex() { }
        public TSelf AsWildcard() { }
        public TSelf Exactly() { }
    }
    public class TimeToleranceResult<TType, TThat> : aweXpect.Results.TimeToleranceResult<TType, TThat, aweXpect.Results.TimeToleranceResult<TType, TThat>>
    {
        public TimeToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.TimeTolerance options) { }
    }
    public class TimeToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.TimeToleranceResult<TType, TThat, TSelf>
    {
        public TimeToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.TimeTolerance options) { }
        public TSelf Within(System.TimeSpan tolerance) { }
    }
}
namespace aweXpect.Signaling
{
    public class Signaler
    {
        public Signaler() { }
        public bool IsSignaled(aweXpect.Times? amount = default) { }
        public void Signal() { }
        public aweXpect.Signaling.SignalerResult Wait(System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
        public aweXpect.Signaling.SignalerResult Wait(aweXpect.Times amount, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class SignalerResult
    {
        public SignalerResult(bool isSuccess, int counter) { }
        public int Count { get; }
        public bool IsSuccess { get; }
    }
    public class SignalerResult<TParameter> : aweXpect.Signaling.SignalerResult
    {
        public SignalerResult(bool isSuccess, TParameter[] parameters) { }
        public TParameter[] Parameters { get; }
    }
    public class Signaler<TParameter>
    {
        public Signaler() { }
        public bool IsSignaled(aweXpect.Times? amount = default) { }
        public void Signal(TParameter parameter) { }
        public aweXpect.Signaling.SignalerResult<TParameter> Wait(System.Func<TParameter, bool>? predicate = null, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
        public aweXpect.Signaling.SignalerResult<TParameter> Wait(aweXpect.Times amount, System.Func<TParameter, bool>? predicate = null, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
    }
}