[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"aweXpect.Core.Tests, PublicKey=002400000480000094000000060200000024000052534131000400000100010091e3b299f2a31c904fbc5c2150944568b101ba409f5ee4cd95561c0c8cf50c1960d74f682c7f462f792ab37fe315ece00775c5bdda68c06d3abb67c1d531bf8c40d85d3d36ecf19fb05cc890ca7a5f39904e04ff754a55463236c5884f41083fae1ea626eb1f9b8c5c33f7bada7e650bed6ced9f0a75413d7e919f94f804efc9")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace aweXpect.Core.Adapters
{
    public interface ITestFrameworkAdapter
    {
        bool IsAvailable { get; }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        void Fail(string message);
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        void Inconclusive(string message);
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        void Skip(string message);
    }
}
namespace aweXpect.Core.Constraints
{
    public abstract class ConstraintResult
    {
        protected ConstraintResult(aweXpect.Core.Constraints.FurtherProcessingStrategy furtherProcessingStrategy) { }
        protected ConstraintResult(aweXpect.Core.ExpectationGrammars grammars) { }
        public aweXpect.Core.Constraints.FurtherProcessingStrategy FurtherProcessingStrategy { get; protected set; }
        public aweXpect.Core.ExpectationGrammars Grammars { get; }
        public virtual aweXpect.Core.Constraints.Outcome Outcome { get; protected set; }
        public abstract void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
        public abstract void AppendResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
        public abstract aweXpect.Core.Constraints.ConstraintResult Negate();
        public abstract bool TryGetValue<TValue>([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue? value);
        public class ExpectationOnly<T> : aweXpect.Core.Constraints.ConstraintResult, aweXpect.Core.Constraints.IConstraint, aweXpect.Core.Constraints.IValueConstraint<T>
        {
            public ExpectationOnly(aweXpect.Core.ExpectationGrammars grammars, string? expectation = null, string? negatedExpectation = null) { }
            public override aweXpect.Core.Constraints.Outcome Outcome { get; protected set; }
            public override void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected virtual void AppendNegatedExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected virtual void AppendNormalExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            public override void AppendResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            public aweXpect.Core.Constraints.ConstraintResult IsMetBy(T actual) { }
            public override aweXpect.Core.Constraints.ConstraintResult Negate() { }
            public override bool TryGetValue<TValue>([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue? value) { }
        }
        public abstract class WithEqualToValue<T> : aweXpect.Core.Constraints.ConstraintResult
        {
            protected WithEqualToValue(string it, aweXpect.Core.ExpectationGrammars grammars, bool isExpectedNull) { }
            protected T Actual { get; set; }
            protected bool IsNegated { get; }
            protected string It { get; }
            public override aweXpect.Core.Constraints.Outcome Outcome { get; protected set; }
            public override sealed void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected abstract void AppendNegatedExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNegatedResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            public override sealed void AppendResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected virtual void AppendUndecidedResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            public override aweXpect.Core.Constraints.ConstraintResult Negate() { }
            public override bool TryGetValue<TValue>([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue? value) { }
        }
        public abstract class WithNotNullValue<T> : aweXpect.Core.Constraints.ConstraintResult
        {
            protected WithNotNullValue(string it, aweXpect.Core.ExpectationGrammars grammars) { }
            protected T Actual { get; set; }
            protected bool IsNegated { get; }
            protected string It { get; }
            public override aweXpect.Core.Constraints.Outcome Outcome { get; protected set; }
            public override sealed void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected abstract void AppendNegatedExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNegatedResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            public override sealed void AppendResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected virtual void AppendUndecidedResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            public override aweXpect.Core.Constraints.ConstraintResult Negate() { }
            public override bool TryGetValue<TValue>([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue? value) { }
        }
        public abstract class WithValue<T> : aweXpect.Core.Constraints.ConstraintResult
        {
            protected WithValue(aweXpect.Core.ExpectationGrammars grammars) { }
            protected T Actual { get; set; }
            protected bool IsNegated { get; }
            public override aweXpect.Core.Constraints.Outcome Outcome { get; protected set; }
            public override sealed void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected abstract void AppendNegatedExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNegatedResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
            protected abstract void AppendNormalResult(System.Text.StringBuilder stringBuilder, string? indentation = null);
            public override sealed void AppendResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            protected virtual void AppendUndecidedResult(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
            public override aweXpect.Core.Constraints.ConstraintResult Negate() { }
            public override bool TryGetValue<TValue>([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue? value) { }
        }
    }
    public static class ConstraintResultExtensions
    {
        public static aweXpect.Core.Constraints.ConstraintResult AppendExpectationText(this aweXpect.Core.Constraints.ConstraintResult inner, System.Action<System.Text.StringBuilder>? suffix) { }
        public static aweXpect.Core.Constraints.ConstraintResult Fail<T>(this aweXpect.Core.Constraints.ConstraintResult inner, string failure, T value) { }
        public static bool HasSameResultTextAs(this aweXpect.Core.Constraints.ConstraintResult left, aweXpect.Core.Constraints.ConstraintResult right) { }
        public static T Invert<T>(this T constraintResult)
            where T : aweXpect.Core.Constraints.ConstraintResult { }
        public static aweXpect.Core.Constraints.ConstraintResult PrependExpectationText(this aweXpect.Core.Constraints.ConstraintResult inner, System.Action<System.Text.StringBuilder>? prefix) { }
        public static aweXpect.Core.Constraints.ConstraintResult UseValue<T>(this aweXpect.Core.Constraints.ConstraintResult inner, T value) { }
    }
    public enum FurtherProcessingStrategy
    {
        Continue = 0,
        IgnoreCompletely = 1,
        IgnoreResult = 2,
    }
    public interface IAsyncConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue actual, System.Threading.CancellationToken cancellationToken);
    }
    public interface IAsyncContextConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue actual, aweXpect.Core.EvaluationContext.IEvaluationContext context, System.Threading.CancellationToken cancellationToken);
    }
    public interface IConstraint
    {
        void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null);
    }
    public interface IContextConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        aweXpect.Core.Constraints.ConstraintResult IsMetBy(TValue actual, aweXpect.Core.EvaluationContext.IEvaluationContext context);
    }
    public interface IValueConstraint<in TValue> : aweXpect.Core.Constraints.IConstraint
    {
        aweXpect.Core.Constraints.ConstraintResult IsMetBy(TValue actual);
    }
    public enum Outcome
    {
        Success = 0,
        Failure = 1,
        Undecided = 2,
    }
}
namespace aweXpect.Core.EvaluationContext
{
    public interface IEvaluationContext
    {
        void Store<T>(string key, T value);
        bool TryReceive<T>(string key, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? value);
    }
}
namespace aweXpect.Core
{
    public abstract class ExpectationBuilder
    {
        protected ExpectationBuilder(string subjectExpression, aweXpect.Core.ExpectationGrammars grammars = 0) { }
        public aweXpect.Core.ExpectationGrammars ExpectationGrammars { get; }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IAsyncConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IAsyncContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IValueConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<aweXpect.Core.ExpectationBuilder, string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IAsyncConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<aweXpect.Core.ExpectationBuilder, string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IAsyncContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<aweXpect.Core.ExpectationBuilder, string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IContextConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder AddConstraint<TValue>(System.Func<aweXpect.Core.ExpectationBuilder, string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IValueConstraint<TValue>> constraintBuilder) { }
        public aweXpect.Core.ExpectationBuilder And(string textSeparator = " and ") { }
        public aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TTarget> ForAsyncMember<TSource, TTarget>(aweXpect.Core.MemberAccessor<TSource, System.Threading.Tasks.Task<TTarget>> memberAccessor, System.Action<aweXpect.Core.MemberAccessor, System.Text.StringBuilder>? expectationTextGenerator = null, bool replaceIt = true) { }
        public aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TTarget> ForMember<TSource, TTarget>(aweXpect.Core.MemberAccessor<TSource, TTarget> memberAccessor, System.Action<aweXpect.Core.MemberAccessor, System.Text.StringBuilder>? expectationTextGenerator = null, bool replaceIt = true) { }
        public aweXpect.Core.ExpectationBuilder ForWhich<TSource, TTarget>(System.Func<TSource, System.Threading.Tasks.Task<TTarget?>> asyncMemberAccessor, string? separator = null) { }
        public aweXpect.Core.ExpectationBuilder ForWhich<TSource, TTarget>(System.Func<TSource, TTarget?> memberAccessor, string? separator = null, string? replaceIt = null, System.Func<aweXpect.Core.ExpectationGrammars, aweXpect.Core.ExpectationGrammars>? expectationGrammar = null) { }
        public virtual aweXpect.Core.ExpectationBuilder UpdateContexts(System.Action<aweXpect.Core.ResultContexts> callback) { }
        public void WithCancellation(System.Threading.CancellationToken cancellationToken) { }
        public void WithTimeout(System.TimeSpan timeout) { }
        public class MemberExpectationBuilder<TSource, TMember>
        {
            public aweXpect.Core.ExpectationBuilder AddExpectations(System.Action<aweXpect.Core.ExpectationBuilder> expectation, System.Func<aweXpect.Core.ExpectationGrammars, aweXpect.Core.ExpectationGrammars>? expectationGrammars = null) { }
            public aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TMember> Validate(System.Func<string, aweXpect.Core.ExpectationGrammars, aweXpect.Core.Constraints.IValueConstraint<TSource>> constraintBuilder) { }
        }
    }
    public static class ExpectationBuilderExtensions
    {
        public static aweXpect.Core.ExpectationBuilder.MemberExpectationBuilder<TSource, TTarget> ForMember<TSource, TTarget>(this aweXpect.Core.ExpectationBuilder expectationBuilder, System.Func<TSource, TTarget> memberSelector, string displayName, bool replaceIt = true) { }
    }
    [System.Flags]
    public enum ExpectationGrammars
    {
        None = 0,
        Nested = 2,
        Plural = 4,
        Active = 8,
        Negated = 16,
    }
    public static class ExpectationGrammarsExtensions
    {
        public static bool HasAnyFlag(this aweXpect.Core.ExpectationGrammars grammars, params aweXpect.Core.ExpectationGrammars[] flags) { }
        public static bool IsNegated(this aweXpect.Core.ExpectationGrammars grammars) { }
        public static bool IsNested(this aweXpect.Core.ExpectationGrammars grammars) { }
        public static bool IsPlural(this aweXpect.Core.ExpectationGrammars grammars) { }
        public static aweXpect.Core.ExpectationGrammars Negate(this aweXpect.Core.ExpectationGrammars grammars) { }
    }
    public interface ICollectionMatcher<in T, out T2>
        where in T : T2
    {
        bool Verify(string it, T value, aweXpect.Core.IOptionsEquality<T2> options, int maximumNumber, out string? error);
        bool VerifyComplete(string it, aweXpect.Core.IOptionsEquality<T2> options, int maximumNumber, out string? error);
    }
    public interface IDescribableSubject
    {
        string GetDescription();
    }
    public interface IExpectThat<out T> : aweXpect.Core.IThat<T>
    {
        aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
    }
    public interface IObjectMatchType
    {
        bool AreConsideredEqual<TActual, TExpected>(TActual actual, TExpected expected);
        string GetExpectation(string expected, aweXpect.Core.ExpectationGrammars grammars);
        string GetExtendedFailure(string it, aweXpect.Core.ExpectationGrammars grammars, object? actual, object? expected);
    }
    public interface IOptionsEquality<in TSubject>
    {
        bool AreConsideredEqual<TExpected>(TSubject actual, TExpected expected);
    }
    public interface IOptionsProvider<out TOptions>
    {
        TOptions Options { get; }
    }
    public interface IStringMatchType
    {
        bool AreConsideredEqual(string? actual, string? expected, bool ignoreCase, System.Collections.Generic.IEqualityComparer<string> comparer);
        string GetExpectation(string? expected, aweXpect.Core.ExpectationGrammars grammars);
        string GetExtendedFailure(string it, string? actual, string? expected, bool ignoreCase, System.Collections.Generic.IEqualityComparer<string> comparer, aweXpect.Core.StringDifferenceSettings? settings);
        string GetOptionString(bool ignoreCase, System.Collections.Generic.IEqualityComparer<string>? comparer);
        string GetTypeString();
    }
    public interface IThatDelegateThrows<out T> : aweXpect.Core.IExpectThat<T>, aweXpect.Core.IThat<T> { }
    public interface IThat<out T>
    {
        bool Equals(object? obj);
        int GetHashCode();
        System.Type GetType();
        string? ToString();
    }
    public class ManualExpectationBuilder<TValue> : aweXpect.Core.ExpectationBuilder
    {
        public ManualExpectationBuilder(aweXpect.Core.ExpectationBuilder? inner, aweXpect.Core.ExpectationGrammars grammars = 0) { }
        public void AppendExpectation(System.Text.StringBuilder stringBuilder, string? indentation = null) { }
        public System.Threading.Tasks.Task<aweXpect.Core.Constraints.ConstraintResult> IsMetBy(TValue value, aweXpect.Core.EvaluationContext.IEvaluationContext context, System.Threading.CancellationToken cancellationToken) { }
        public override aweXpect.Core.ExpectationBuilder UpdateContexts(System.Action<aweXpect.Core.ResultContexts> callback) { }
    }
    public abstract class MemberAccessor
    {
        protected MemberAccessor(string name) { }
        public override string ToString() { }
    }
    public class MemberAccessor<TSource, TTarget> : aweXpect.Core.MemberAccessor
    {
        public static aweXpect.Core.MemberAccessor<TSource, TTarget?> FromExpression(System.Linq.Expressions.Expression<System.Func<TSource, TTarget?>> expression) { }
        public static aweXpect.Core.MemberAccessor<TSource, TTarget> FromFunc(System.Func<TSource, TTarget> func, string name) { }
        public static aweXpect.Core.MemberAccessor<TSource, TTarget> FromFuncAsMemberAccessor(System.Func<TSource, TTarget> func, string name) { }
    }
    public class ResultContext
    {
        public ResultContext(string title, System.Func<string?> syncContent, int priority = 0) { }
        public ResultContext(string title, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string?>> asyncContent, int priority = 0) { }
        public ResultContext(string title, string? content, int priority = 0) { }
        public int Priority { get; }
        public string Title { get; set; }
        public System.Threading.Tasks.Task<string?> GetContent(System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class ResultContexts : System.Collections.Generic.IEnumerable<aweXpect.Core.ResultContext>, System.Collections.IEnumerable
    {
        public ResultContexts() { }
        public aweXpect.Core.ResultContexts Add(aweXpect.Core.ResultContext context) { }
        public aweXpect.Core.ResultContexts Clear() { }
        public aweXpect.Core.ResultContexts Close() { }
        public System.Collections.Generic.IEnumerator<aweXpect.Core.ResultContext> GetEnumerator() { }
        public aweXpect.Core.ResultContexts Open() { }
        public aweXpect.Core.ResultContexts Remove(System.Predicate<aweXpect.Core.ResultContext> predicate) { }
        public aweXpect.Core.ResultContexts Remove(string title, System.StringComparison stringComparison = 5) { }
    }
    public sealed class StringDifference
    {
        public StringDifference(string? actual, string? expected, System.Collections.Generic.IEqualityComparer<string>? comparer = null, aweXpect.Core.StringDifferenceSettings? settings = null) { }
        public int IndexOfFirstMismatch(aweXpect.Core.StringDifference.MatchType matchType) { }
        public override string ToString() { }
        public string ToString(string prefix) { }
        public enum MatchType
        {
            Equality = 0,
            Wildcard = 1,
            Regex = 2,
        }
    }
    public class StringDifferenceSettings
    {
        public StringDifferenceSettings(int ignoredTrailingLines, int ignoredTrailingColumns) { }
        public int IgnoredTrailingColumns { get; }
        public int IgnoredTrailingLines { get; }
        public aweXpect.Core.StringDifference.MatchType MatchType { get; }
    }
    public static class StringDifferenceSettingsExtensions
    {
        public static aweXpect.Core.StringDifferenceSettings WithMatchType(this aweXpect.Core.StringDifferenceSettings? settings, aweXpect.Core.StringDifference.MatchType matchType) { }
    }
    [System.Diagnostics.DebuggerDisplay("ThatSubject<{typeof(T)}>: {ExpectationBuilder}")]
    public readonly struct ThatSubject<T> : aweXpect.Core.IExpectThat<T>, aweXpect.Core.IThat<T>
    {
        public ThatSubject(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
    }
    public readonly struct Times
    {
        public Times(int value) { }
        public int Value { get; }
        public static aweXpect.Core.Times op_Implicit(int value) { }
    }
    public static class TimesExtensions
    {
        public static aweXpect.Core.Times Times(this int value) { }
    }
}
namespace aweXpect.Core.Helpers
{
    [System.Flags]
    public enum MemberVisibilities
    {
        None = 0,
        Internal = 1,
        Public = 2,
        ExplicitlyImplemented = 4,
    }
}
namespace aweXpect.Core.Initialization
{
    public interface IAweXpectInitializer
    {
        void Initialize();
    }
}
namespace aweXpect.Core.Sources
{
    public class DelegateValue
    {
        public DelegateValue(System.Exception? exception, System.TimeSpan duration, bool isNull = false) { }
        public System.TimeSpan Duration { get; }
        public System.Exception? Exception { get; }
        public bool IsNull { get; }
        public override string ToString() { }
    }
    public class DelegateValue<TValue> : aweXpect.Core.Sources.DelegateValue
    {
        public DelegateValue(in TValue? value, System.Exception? exception, System.TimeSpan duration, bool isNull = false) { }
        public TValue Value { get; }
        public override string ToString() { }
    }
}
namespace aweXpect.Customization
{
    public class AwexpectCustomization : aweXpect.Customization.IAwexpectCustomization
    {
        public AwexpectCustomization() { }
        public aweXpect.Customization.CustomizationLifetime EnableTracing(aweXpect.Customization.ITraceWriter traceWriter) { }
        public aweXpect.Customization.AwexpectCustomization.EquivalencyCustomization Equivalency() { }
        public aweXpect.Customization.AwexpectCustomization.FormattingCustomization Formatting() { }
        public aweXpect.Customization.AwexpectCustomization.ReflectionCustomization Reflection() { }
        public aweXpect.Customization.AwexpectCustomization.SettingsCustomization Settings() { }
        public class EquivalencyCustomization : aweXpect.Customization.ICustomizationValueUpdater<aweXpect.Customization.AwexpectCustomization.EquivalencyCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValueSetter<aweXpect.Equivalency.EquivalencyOptions> DefaultEquivalencyOptions { get; }
            public aweXpect.Customization.AwexpectCustomization.EquivalencyCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomization.EquivalencyCustomizationValue, aweXpect.Customization.AwexpectCustomization.EquivalencyCustomizationValue> update) { }
        }
        public class EquivalencyCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomization.EquivalencyCustomizationValue>
        {
            public EquivalencyCustomizationValue() { }
            public aweXpect.Equivalency.EquivalencyOptions DefaultEquivalencyOptions { get; init; }
        }
        public class FormattingCustomization : aweXpect.Customization.ICustomizationValueUpdater<aweXpect.Customization.AwexpectCustomization.FormattingCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValueSetter<int> MaximumNumberOfCollectionItems { get; }
            public aweXpect.Customization.ICustomizationValueSetter<int> MinimumNumberOfCharactersAfterStringDifference { get; }
            public aweXpect.Customization.AwexpectCustomization.FormattingCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomization.FormattingCustomizationValue, aweXpect.Customization.AwexpectCustomization.FormattingCustomizationValue> update) { }
        }
        public class FormattingCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomization.FormattingCustomizationValue>
        {
            public FormattingCustomizationValue() { }
            public int MaximumNumberOfCollectionItems { get; init; }
            public int MinimumNumberOfCharactersAfterStringDifference { get; init; }
        }
        public class ReflectionCustomization : aweXpect.Customization.ICustomizationValueUpdater<aweXpect.Customization.AwexpectCustomization.ReflectionCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValueSetter<string[]> ExcludedAssemblyPrefixes { get; }
            public aweXpect.Customization.AwexpectCustomization.ReflectionCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomization.ReflectionCustomizationValue, aweXpect.Customization.AwexpectCustomization.ReflectionCustomizationValue> update) { }
        }
        public class ReflectionCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomization.ReflectionCustomizationValue>
        {
            public ReflectionCustomizationValue() { }
            public string[] ExcludedAssemblyPrefixes { get; init; }
        }
        public class SettingsCustomization : aweXpect.Customization.ICustomizationValueUpdater<aweXpect.Customization.AwexpectCustomization.SettingsCustomizationValue>
        {
            public aweXpect.Customization.ICustomizationValueSetter<System.TimeSpan> DefaultCheckInterval { get; }
            public aweXpect.Customization.ICustomizationValueSetter<System.TimeSpan> DefaultSignalerTimeout { get; }
            public aweXpect.Customization.ICustomizationValueSetter<System.TimeSpan> DefaultTimeComparisonTolerance { get; }
            public aweXpect.Customization.ICustomizationValueSetter<aweXpect.Customization.TestCancellation?> TestCancellation { get; }
            public aweXpect.Customization.AwexpectCustomization.SettingsCustomizationValue Get() { }
            public aweXpect.Customization.CustomizationLifetime Update(System.Func<aweXpect.Customization.AwexpectCustomization.SettingsCustomizationValue, aweXpect.Customization.AwexpectCustomization.SettingsCustomizationValue> update) { }
        }
        public class SettingsCustomizationValue : System.IEquatable<aweXpect.Customization.AwexpectCustomization.SettingsCustomizationValue>
        {
            public SettingsCustomizationValue() { }
            public System.TimeSpan DefaultCheckInterval { get; init; }
            public System.TimeSpan DefaultSignalerTimeout { get; init; }
            public System.TimeSpan DefaultTimeComparisonTolerance { get; init; }
            public aweXpect.Customization.TestCancellation? TestCancellation { get; init; }
        }
    }
    public sealed class CustomizationLifetime : System.IDisposable
    {
        public CustomizationLifetime(System.Action callback) { }
        public void Dispose() { }
    }
    public static class Customize
    {
        public static aweXpect.Customization.AwexpectCustomization aweXpect { get; }
    }
    public interface IAwexpectCustomization
    {
        TValue Get<TValue>(string key, TValue defaultValue);
        aweXpect.Customization.CustomizationLifetime Set<TValue>(string key, TValue value);
    }
    public interface ICustomizationValueSetter<TValue>
    {
        TValue Get();
        aweXpect.Customization.CustomizationLifetime Set(TValue value);
    }
    public interface ICustomizationValueUpdater<TValue>
    {
        TValue Get();
        aweXpect.Customization.CustomizationLifetime Update(System.Func<TValue, TValue> update);
    }
    public interface ITraceWriter
    {
        void WriteException(System.Exception exception);
        void WriteMessage(string message);
    }
    public class TestCancellation
    {
        public static aweXpect.Customization.TestCancellation FromCancellationToken(System.Func<System.Threading.CancellationToken> cancellationTokenFactory) { }
        public static aweXpect.Customization.TestCancellation FromTimeout(System.TimeSpan timeout) { }
        public static aweXpect.Customization.TestCancellation None() { }
    }
}
namespace aweXpect.Delegates
{
    public abstract class ThatDelegate
    {
        protected ThatDelegate(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
        public aweXpect.Delegates.ThatDelegateThrows<System.Exception> Throws(System.Type exceptionType) { }
        public aweXpect.Delegates.ThatDelegateThrows<TException> Throws<TException>()
            where TException : System.Exception { }
        public aweXpect.Delegates.ThatDelegateThrows<System.Exception> ThrowsExactly(System.Type exceptionType) { }
        public aweXpect.Delegates.ThatDelegateThrows<TException> ThrowsExactly<TException>()
            where TException : System.Exception { }
        public aweXpect.Delegates.ThatDelegateThrows<System.Exception> ThrowsException() { }
        public class ThrowsOption
        {
            public ThrowsOption() { }
            public bool DoCheckThrow { get; set; }
            public aweXpect.Options.TimeSpanEqualityOptions? ExecutionTimeOptions { get; set; }
        }
        public sealed class WithValue<T> : aweXpect.Delegates.ThatDelegate, aweXpect.Core.IExpectThat<aweXpect.Delegates.ThatDelegate.WithValue<T>>, aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithValue<T>>
        {
            public WithValue(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
            public aweXpect.Results.DelegateWithValueResult<T> DoesNotThrow() { }
            public aweXpect.Results.DelegateWithValueResult<T> DoesNotThrow(System.Type exceptionType) { }
            public aweXpect.Results.DelegateWithValueResult<T> DoesNotThrow<TException>()
                where TException : System.Exception { }
            public aweXpect.Results.DelegateWithValueResult<T> DoesNotThrowExactly(System.Type exceptionType) { }
            public aweXpect.Results.DelegateWithValueResult<T> DoesNotThrowExactly<TException>()
                where TException : System.Exception { }
            public aweXpect.Results.ExecutesInResult<aweXpect.Results.AndResult<aweXpect.Delegates.ThatDelegate.WithValue<T>>> ExecutesIn() { }
        }
        public sealed class WithoutValue : aweXpect.Delegates.ThatDelegate, aweXpect.Core.IExpectThat<aweXpect.Delegates.ThatDelegate.WithoutValue>, aweXpect.Core.IThat<aweXpect.Delegates.ThatDelegate.WithoutValue>
        {
            public WithoutValue(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
            public aweXpect.Results.ExpectationResult DoesNotThrow() { }
            public aweXpect.Results.ExpectationResult DoesNotThrow(System.Type exceptionType) { }
            public aweXpect.Results.ExpectationResult DoesNotThrow<TException>()
                where TException : System.Exception { }
            public aweXpect.Results.ExpectationResult DoesNotThrowExactly(System.Type exceptionType) { }
            public aweXpect.Results.ExpectationResult DoesNotThrowExactly<TException>()
                where TException : System.Exception { }
            public aweXpect.Results.ExecutesInResult<aweXpect.Results.AndResult<aweXpect.Delegates.ThatDelegate.WithoutValue>> ExecutesIn() { }
        }
    }
    public class ThatDelegateThrows<TException> : aweXpect.Results.ExpectationResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>>, aweXpect.Core.IExpectThat<TException>, aweXpect.Core.IThatDelegateThrows<TException>, aweXpect.Core.IThat<TException>
        where TException : System.Exception?
    {
        public ThatDelegateThrows(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Delegates.ThatDelegate.ThrowsOption throwOptions) { }
        public aweXpect.Core.ExpectationBuilder ExpectationBuilder { get; }
        public aweXpect.Delegates.ThatDelegate.ThrowsOption ThrowOptions { get; }
        public aweXpect.Core.IThat<TException> Which { get; }
        public aweXpect.Delegates.ThatDelegateThrows<TException?> OnlyIf(bool predicate) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> Whose<TMember>(System.Func<TException, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInner(System.Type innerExceptionType) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInner(System.Type innerExceptionType, System.Action<aweXpect.Core.IThat<System.Exception?>> expectations) { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInner<TInnerException>()
            where TInnerException : System.Exception? { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInner<TInnerException>(System.Action<aweXpect.Core.IThat<TInnerException?>> expectations)
            where TInnerException : System.Exception { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInnerException() { }
        public aweXpect.Results.AndOrResult<TException, aweXpect.Delegates.ThatDelegateThrows<TException>> WithInnerException(System.Action<aweXpect.Core.IThat<System.Exception?>> expectations) { }
        public aweXpect.Delegates.ThatDelegateThrows<TException> Within(System.TimeSpan duration) { }
    }
}
namespace aweXpect.Equivalency
{
    public static class EquivalencyComparison
    {
        public static bool Compare<TActual, TExpected>(TActual actual, TExpected expected, aweXpect.Equivalency.EquivalencyOptions equivalencyOptions, System.Text.StringBuilder failureBuilder) { }
    }
    public enum EquivalencyComparisonType
    {
        ByValue = 0,
        ByMembers = 1,
    }
    public static class EquivalencyDefaults
    {
        public static aweXpect.Equivalency.EquivalencyComparisonType DefaultComparisonType(System.Type type) { }
    }
    public class EquivalencyOptions : aweXpect.Equivalency.EquivalencyTypeOptions, System.IEquatable<aweXpect.Equivalency.EquivalencyOptions>
    {
        public EquivalencyOptions() { }
        public System.Collections.Generic.Dictionary<System.Type, aweXpect.Equivalency.EquivalencyTypeOptions> CustomOptions { get; init; }
        public System.Func<System.Type, aweXpect.Equivalency.EquivalencyComparisonType> DefaultComparisonTypeSelector { get; init; }
        public aweXpect.Equivalency.EquivalencyOptions For<TMember>(System.Func<aweXpect.Equivalency.EquivalencyTypeOptions, aweXpect.Equivalency.EquivalencyTypeOptions> options) { }
        public override string ToString() { }
    }
    public class EquivalencyOptions<TExpected> : aweXpect.Equivalency.EquivalencyOptions, System.IEquatable<aweXpect.Equivalency.EquivalencyOptions<TExpected>>
    {
        public EquivalencyOptions(aweXpect.Equivalency.EquivalencyOptions inner) { }
        public new aweXpect.Equivalency.EquivalencyOptions<TExpected> For<TMember>(System.Func<aweXpect.Equivalency.EquivalencyTypeOptions, aweXpect.Equivalency.EquivalencyTypeOptions> options) { }
        public override string ToString() { }
    }
    public class EquivalencyTypeOptions : System.IEquatable<aweXpect.Equivalency.EquivalencyTypeOptions>
    {
        public EquivalencyTypeOptions() { }
        public aweXpect.Equivalency.EquivalencyComparisonType? ComparisonType { get; init; }
        public aweXpect.Equivalency.IncludeMembers Fields { get; init; }
        public bool IgnoreCollectionOrder { get; init; }
        public string[] MembersToIgnore { get; init; }
        public aweXpect.Equivalency.IncludeMembers Properties { get; init; }
    }
    [System.Flags]
    public enum IncludeMembers
    {
        None = 0,
        Public = 2,
        Internal = 4,
        Private = 8,
    }
}
namespace aweXpect
{
    public static class Expect
    {
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Action @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Action<System.Threading.CancellationToken> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Func<System.Threading.Tasks.Task> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Func<System.Threading.Tasks.ValueTask> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithoutValue That(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<System.Threading.Tasks.Task<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<System.Threading.Tasks.ValueTask<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<TValue> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TValue>> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Delegates.ThatDelegate.WithValue<TValue> That<TValue>(System.Func<System.Threading.CancellationToken, TValue> @delegate, [System.Runtime.CompilerServices.CallerArgumentExpression("delegate")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IThat<T> That<T>(System.Threading.Tasks.Task<T> subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IThat<T> That<T>(System.Threading.Tasks.ValueTask<T> subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IThat<T> That<T>(T subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Core.IThat<T[]?> That<T>(T[]? subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "") { }
        public static aweXpect.Results.Expectation.Combination.All ThatAll(params aweXpect.Results.Expectation[] expectations) { }
        public static aweXpect.Results.Expectation.Combination.Any ThatAny(params aweXpect.Results.Expectation[] expectations) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public static class Fail
    {
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void Inconclusive(string reason) { }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void Test(string reason) { }
        public static void Unless([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(false)] bool condition, string reason) { }
        public static void When([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, string reason) { }
    }
    public class FailException : System.Exception
    {
        public FailException(string message) { }
    }
    public class InconclusiveException : System.Exception
    {
        public InconclusiveException(string message) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public static class Skip
    {
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void Test(string reason) { }
        public static void Unless([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(false)] bool condition, string reason) { }
        public static void When([System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, string reason) { }
    }
    public class SkipException : System.Exception
    {
        public SkipException(string message) { }
    }
}
namespace aweXpect.Formatting
{
    public static class Format
    {
        public static aweXpect.Formatting.ValueFormatter Formatter { get; }
    }
    public class FormattingContext
    {
        public FormattingContext() { }
        public System.Collections.Generic.HashSet<object> FormattedObjects { get; }
    }
    public class FormattingOptions : System.IEquatable<aweXpect.Formatting.FormattingOptions>
    {
        public FormattingOptions() { }
        public bool IncludeType { get; init; }
        public string Indentation { get; init; }
        public bool UseLineBreaks { get; init; }
        public static aweXpect.Formatting.FormattingOptions MultipleLines { get; }
        public static aweXpect.Formatting.FormattingOptions SingleLine { get; }
        public static aweXpect.Formatting.FormattingOptions WithType { get; }
        public static aweXpect.Formatting.FormattingOptions Indented(string? indentation = null, bool includeType = false) { }
    }
    public interface IValueFormatter
    {
        bool TryFormat(System.Text.StringBuilder stringBuilder, object value, aweXpect.Formatting.FormattingOptions? options);
    }
    public class ValueFormatter
    {
        public static readonly string NullString;
        public static System.IDisposable Register(aweXpect.Formatting.IValueFormatter formatter) { }
    }
    public static class ValueFormatters
    {
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.DateOnly value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.DateTime value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.DateTimeOffset value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.Guid value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.Half value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, nint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.Net.HttpStatusCode? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, System.TimeOnly value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, nuint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, bool value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, byte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, char value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, decimal value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, double value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, float value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, int value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, long value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, sbyte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, short value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, string? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, uint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, ulong value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter _, ushort value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.DateOnly? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.DateTime? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.DateTimeOffset? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Enum? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Guid? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Half? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.IntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.TimeOnly? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.TimeSpan value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.TimeSpan? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.Type? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, System.UIntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, bool? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, byte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, char? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, decimal? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, double? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, float? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, int? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, long? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, sbyte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, short? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, uint? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, ulong? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, ushort? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Collections.IEnumerable? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateOnly value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateOnly? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTime value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTime? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTimeOffset value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.DateTimeOffset? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Enum? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Guid value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Guid? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Half value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Half? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, nint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.IntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Net.HttpStatusCode? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeOnly value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeOnly? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeSpan value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.TimeSpan? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Type? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, nuint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.UIntPtr? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, bool value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, bool? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, byte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, byte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, char value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, char? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, decimal value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, decimal? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, double value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, double? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, float value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, float? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, int value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, int? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, long value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, long? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, sbyte value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, sbyte? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, short value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, short? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, string? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, uint value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, uint? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ulong value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ulong? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ushort value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, ushort? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static string Format(this aweXpect.Formatting.ValueFormatter formatter, object? value, aweXpect.Formatting.FormattingOptions? options = null, aweXpect.Formatting.FormattingContext? context = null) { }
        public static void Format(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, object? value, aweXpect.Formatting.FormattingOptions? options = null, aweXpect.Formatting.FormattingContext? context = null) { }
        public static string Format<T>(this aweXpect.Formatting.ValueFormatter formatter, System.Collections.Generic.IEnumerable<T>? value, aweXpect.Formatting.FormattingOptions? options = null) { }
        public static void Format<T>(this aweXpect.Formatting.ValueFormatter formatter, System.Text.StringBuilder stringBuilder, System.Collections.Generic.IEnumerable<T>? value, aweXpect.Formatting.FormattingOptions? options = null) { }
    }
}
namespace aweXpect.Options
{
    public class CollectionIndexOptions
    {
        public CollectionIndexOptions() { }
        public string GetDescription() { }
        public bool HasOnlySingleIndex() { }
        public bool? IsIndexInRange(int index) { }
        public void SetIndexRange(int? minimum, int? maximum) { }
    }
    public class CollectionMatchOptions
    {
        public CollectionMatchOptions(aweXpect.Options.CollectionMatchOptions.EquivalenceRelations equivalenceRelations = 1) { }
        public aweXpect.Core.ICollectionMatcher<T, T2> GetCollectionMatcher<T, T2>(System.Collections.Generic.IEnumerable<T> expected)
            where T : T2 { }
        public string GetExpectation(string expectedExpression, aweXpect.Core.ExpectationGrammars grammars) { }
        public void IgnoringDuplicates() { }
        public void IgnoringInterspersedItems() { }
        public void InAnyOrder() { }
        public void SetEquivalenceRelation(aweXpect.Options.CollectionMatchOptions.EquivalenceRelations equivalenceRelation) { }
        [System.Flags]
        public enum EquivalenceRelations
        {
            Equivalent = 1,
            IsContainedInProperly = 6,
            ContainsProperly = 10,
            IsContainedIn = 4,
            Contains = 8,
        }
    }
    public class CollectionOrderOptions<TItem> : System.IEquatable<aweXpect.Options.CollectionOrderOptions<TItem>>
    {
        public CollectionOrderOptions() { }
        public System.Collections.Generic.IComparer<TItem> GetComparer() { }
        public void SetComparer(System.Collections.Generic.IComparer<TItem> comparer) { }
        public override string ToString() { }
    }
    public class NumberTolerance<TNumber>
        where TNumber :  struct, System.Numerics.INumber<TNumber>
    {
        public NumberTolerance(System.Func<TNumber, TNumber, TNumber?> calculateDifference) { }
        public TNumber? Tolerance { get; }
        public TNumber? CalculateDifference(TNumber? actual, TNumber? expected) { }
        public bool IsWithinTolerance(TNumber? actual, TNumber? expected) { }
        public void SetTolerance(TNumber tolerance) { }
        public override string ToString() { }
    }
    public class ObjectEqualityOptions<TSubject> : aweXpect.Core.IOptionsEquality<TSubject>
    {
        protected aweXpect.Core.IObjectMatchType MatchType;
        public ObjectEqualityOptions() { }
        public bool AreConsideredEqual<TExpected>(TSubject? actual, TExpected? expected) { }
        public aweXpect.Options.ObjectEqualityOptions<TSubject> Equals() { }
        public string GetExpectation(string expectedExpression, aweXpect.Core.ExpectationGrammars grammars) { }
        public string GetExtendedFailure(string it, aweXpect.Core.ExpectationGrammars grammars, object? actual, object? expected) { }
        public void SetMatchType(aweXpect.Core.IObjectMatchType matchType) { }
        public override string? ToString() { }
        public aweXpect.Options.ObjectEqualityOptions<TSubject> Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class ObjectEqualityWithToleranceOptions<TSubject, TTolerance> : aweXpect.Options.ObjectEqualityOptions<TSubject>
    {
        public ObjectEqualityWithToleranceOptions(System.Func<TSubject, TSubject, TTolerance, bool> isWithinTolerance, System.Func<TTolerance, string>? toString = null) { }
        public aweXpect.Options.ObjectEqualityOptions<TSubject> Within(TTolerance tolerance) { }
    }
    public class Quantifier
    {
        public Quantifier() { }
        public bool IsNever { get; }
        public void AtLeast(int minimum) { }
        public void AtMost(int maximum) { }
        public void Between(int minimum, int maximum) { }
        public bool? Check(int amount, bool isLast) { }
        public void Exactly(int expected) { }
        public void LessThan(int maximum) { }
        public void MoreThan(int minimum) { }
        public void Negate() { }
        public override string ToString() { }
        public static aweXpect.Options.Quantifier Never() { }
    }
    public class SignalerOptions : System.IEquatable<aweXpect.Options.SignalerOptions>
    {
        public SignalerOptions() { }
        public System.TimeSpan? Timeout { get; set; }
        public override string ToString() { }
    }
    public class SignalerOptions<TParameter> : aweXpect.Options.SignalerOptions, System.IEquatable<aweXpect.Options.SignalerOptions<TParameter>>
    {
        public SignalerOptions() { }
        public bool Matches(TParameter parameter) { }
        public override string ToString() { }
        public void WithPredicate(System.Func<TParameter, bool> predicate, string predicateExpression) { }
    }
    public class StringEqualityOptions : aweXpect.Core.IOptionsEquality<string?>
    {
        public StringEqualityOptions() { }
        public bool AreConsideredEqual<TExpected>(string? actual, TExpected expected) { }
        public aweXpect.Options.StringEqualityOptions AsPrefix() { }
        public aweXpect.Options.StringEqualityOptions AsRegex() { }
        public aweXpect.Options.StringEqualityOptions AsSuffix() { }
        public aweXpect.Options.StringEqualityOptions AsWildcard() { }
        public aweXpect.Options.StringEqualityOptions Exactly() { }
        public string GetExpectation(string? expected, aweXpect.Core.ExpectationGrammars grammars) { }
        public string GetExtendedFailure(string it, aweXpect.Core.ExpectationGrammars grammars, string? actual, string? expected) { }
        public aweXpect.Options.StringEqualityOptions IgnoringCase(bool ignoreCase = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringLeadingWhiteSpace(bool ignoreLeadingWhiteSpace = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public aweXpect.Options.StringEqualityOptions IgnoringTrailingWhiteSpace(bool ignoreTrailingWhiteSpace = true) { }
        public void SetMatchType(aweXpect.Core.IStringMatchType matchType) { }
        public override string ToString() { }
        public aweXpect.Options.StringEqualityOptions UsingComparer(System.Collections.Generic.IEqualityComparer<string>? comparer) { }
    }
    public class TimeSpanEqualityOptions
    {
        public TimeSpanEqualityOptions() { }
        public void AppendFailureResult(System.Text.StringBuilder stringBuilder, System.TimeSpan actual) { }
        public void AppendTo(System.Text.StringBuilder stringBuilder, string prefix) { }
        public void Approximately(System.TimeSpan expected, System.TimeSpan tolerance) { }
        public void AtLeast(System.TimeSpan minimum) { }
        public void AtMost(System.TimeSpan maximum) { }
        public void Between(System.TimeSpan minimum, System.TimeSpan maximum) { }
        public bool IsWithinLimit(System.TimeSpan? actual) { }
        public void Within(System.TimeSpan duration) { }
    }
    public class TimeTolerance
    {
        public TimeTolerance() { }
        public System.TimeSpan? Tolerance { get; }
        public void SetTolerance(System.TimeSpan tolerance) { }
        public string ToDayString() { }
        public override string ToString() { }
    }
    public class TriggerEventFilter
    {
        public TriggerEventFilter() { }
        public void AddPredicate(System.Func<object?[], bool> predicate, string predicateExpression) { }
        public bool IsMatch(object?[] parameters) { }
        public override string ToString() { }
    }
}
namespace aweXpect.Recording
{
    public interface IEventRecordingResult
    {
        int GetEventCount(string eventName, System.Func<object?[], bool>? filter = null);
        string ToString(string eventName);
    }
    public interface IEventRecording<TSubject>
    {
        System.Threading.Tasks.Task<aweXpect.Recording.IEventRecordingResult> StopWhen(System.Func<aweXpect.Recording.IEventRecordingResult, bool> areFound, System.TimeSpan timeout);
    }
    public static class RecordExtensions
    {
        public static aweXpect.Recording.RecordingFactory<TSubject> Record<TSubject>(this TSubject subject, [System.Runtime.CompilerServices.CallerArgumentExpression("subject")] string doNotPopulateThisValue = "")
            where TSubject :  notnull { }
    }
    public class RecordingFactory<TSubject>
        where TSubject :  notnull
    {
        public RecordingFactory(TSubject subject, string subjectExpression) { }
        public aweXpect.Recording.IEventRecording<TSubject> Events(params string[] eventNames) { }
    }
}
namespace aweXpect.Results
{
    public class AndOrResult<TThat> : aweXpect.Results.ExpectationResult
    {
        public AndOrResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public TThat And { get; }
        public TThat Or { get; }
    }
    public class AndOrResult<TType, TThat> : aweXpect.Results.AndOrResult<TType, TThat, aweXpect.Results.AndOrResult<TType, TThat>>
    {
        public AndOrResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndOrResult<TType, TThat, TSelf> : aweXpect.Results.ExpectationResult<TType, TSelf>
        where TSelf : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
    {
        public AndOrResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public TThat And { get; }
        public TThat Or { get; }
    }
    public class AndOrWhichResult<TType, TThat> : aweXpect.Results.AndOrWhichResult<TType, TThat, aweXpect.Results.AndOrWhichResult<TType, TThat>>
    {
        public AndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndOrWhichResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>
    {
        public AndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>.AdditionalAndOrWhichResult Which<TMember>(System.Func<TType, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        public class AdditionalAndOrWhichResult : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        {
            public AdditionalAndOrWhichResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
            public aweXpect.Results.AndOrWhichResult<TType, TThat, TSelf>.AdditionalAndOrWhichResult AndWhich<TMember>(System.Func<TType, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        }
    }
    public class AndOrWhoseResult<TType, TThat> : aweXpect.Results.AndOrWhoseResult<TType, TThat, aweXpect.Results.AndOrWhoseResult<TType, TThat>>
    {
        public AndOrWhoseResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndOrWhoseResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.AndOrWhoseResult<TType, TThat, TSelf>
    {
        public AndOrWhoseResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public aweXpect.Results.AndOrWhoseResult<TType, TThat, TSelf>.AdditionalAndOrWhoseResult Whose<TMember>(System.Func<TType, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        public class AdditionalAndOrWhoseResult : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        {
            public AdditionalAndOrWhoseResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
            public aweXpect.Results.AndOrWhoseResult<TType, TThat, TSelf>.AdditionalAndOrWhoseResult AndWhose<TMember>(System.Func<TType, TMember?> memberSelector, System.Action<aweXpect.Core.IThat<TMember?>> expectations, [System.Runtime.CompilerServices.CallerArgumentExpression("memberSelector")] string doNotPopulateThisValue = "") { }
        }
    }
    public class AndResult<TThat> : aweXpect.Results.ExpectationResult
    {
        public AndResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public TThat And { get; }
    }
    public class AndResult<TType, TThat> : aweXpect.Results.AndResult<TType, TThat, aweXpect.Results.AndResult<TType, TThat>>
    {
        public AndResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
    }
    public class AndResult<TType, TThat, TSelf> : aweXpect.Results.ExpectationResult<TType, TSelf>
        where TSelf : aweXpect.Results.AndResult<TType, TThat, TSelf>
    {
        public AndResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue) { }
        public TThat And { get; }
    }
    public class BetweenResult<TTarget>
    {
        public BetweenResult(System.Func<int, TTarget> callback) { }
        public TTarget And(aweXpect.Core.Times maximum) { }
    }
    public class BetweenResult<TTarget, TType>
    {
        public BetweenResult(System.Func<TType, TTarget> callback) { }
        public TTarget And(TType maximum) { }
    }
    public class CollectionOrderResult<TMember, TType, TThat> : aweXpect.Results.AndOrResult<TType, TThat>
    {
        public CollectionOrderResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.CollectionOrderOptions<TMember> options) { }
        public aweXpect.Results.AndOrResult<TType, TThat> Using(System.Collections.Generic.IComparer<TMember> comparer) { }
    }
    public class CountResult<TType, TThat> : aweXpect.Results.CountResult<TType, TThat, aweXpect.Results.CountResult<TType, TThat>>
    {
        public CountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier) { }
    }
    public class CountResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.CountResult<TType, TThat, TSelf>
    {
        public CountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier) { }
        public aweXpect.Results.CountTimesResult<TSelf> AtLeast() { }
        public TSelf AtLeast(aweXpect.Core.Times minimum) { }
        public aweXpect.Results.CountTimesResult<TSelf> AtMost() { }
        public TSelf AtMost(aweXpect.Core.Times maximum) { }
        public aweXpect.Results.BetweenResult<TSelf> Between(int minimum) { }
        public TSelf Exactly(aweXpect.Core.Times expected) { }
        public aweXpect.Results.CountTimesResult<TSelf> LessThan() { }
        public TSelf LessThan(aweXpect.Core.Times maximum) { }
        public aweXpect.Results.CountTimesResult<TSelf> MoreThan() { }
        public TSelf MoreThan(aweXpect.Core.Times minimum) { }
        public TSelf Never() { }
        public TSelf Once() { }
        public TSelf Twice() { }
    }
    public class CountTimesResult<TTarget>
    {
        public CountTimesResult(System.Func<int, TTarget> callback) { }
        public TTarget Once() { }
        public TTarget Twice() { }
    }
    public class DelegateWithValueResult<T> : aweXpect.Results.ExpectationResult<T>
    {
        public DelegateWithValueResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Core.IThat<T> AndWhoseResult { get; }
    }
    public class ExecutesInResult<TResult>
    {
        public ExecutesInResult(TResult returnValue, aweXpect.Options.TimeSpanEqualityOptions options) { }
        public TResult Approximately(System.TimeSpan expected, System.TimeSpan tolerance) { }
        public TResult AtLeast(System.TimeSpan minimum) { }
        public TResult AtMost(System.TimeSpan maximum) { }
        public aweXpect.Results.ExecutesInResult<TResult>.BetweenResult Between(System.TimeSpan minimum) { }
        public class BetweenResult
        {
            public BetweenResult(System.Func<System.TimeSpan, TResult> callback) { }
            public TResult And(System.TimeSpan maximum) { }
        }
    }
    [System.Diagnostics.StackTraceHidden]
    public abstract class Expectation
    {
        protected Expectation() { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public System.Type GetType() { }
        public override string? ToString() { }
        public abstract class Combination : aweXpect.Results.Expectation
        {
            protected Combination(aweXpect.Results.Expectation[] expectations) { }
            protected abstract aweXpect.Core.Constraints.Outcome CheckOutcome(aweXpect.Core.Constraints.Outcome? previous, aweXpect.Core.Constraints.Outcome current);
            public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() { }
            protected abstract string GetSubjectLine();
            public class All : aweXpect.Results.Expectation.Combination
            {
                public All(aweXpect.Results.Expectation[] expectations) { }
                protected override aweXpect.Core.Constraints.Outcome CheckOutcome(aweXpect.Core.Constraints.Outcome? previous, aweXpect.Core.Constraints.Outcome current) { }
                protected override string GetSubjectLine() { }
            }
            public class Any : aweXpect.Results.Expectation.Combination
            {
                public Any(aweXpect.Results.Expectation[] expectations) { }
                protected override aweXpect.Core.Constraints.Outcome CheckOutcome(aweXpect.Core.Constraints.Outcome? previous, aweXpect.Core.Constraints.Outcome current) { }
                protected override string GetSubjectLine() { }
            }
        }
    }
    [System.Diagnostics.StackTraceHidden]
    public class ExpectationResult : aweXpect.Results.Expectation
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public aweXpect.Results.ExpectationResult Because(string reason) { }
        public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() { }
        public aweXpect.Results.ExpectationResult WithCancellation(System.Threading.CancellationToken cancellationToken) { }
        public aweXpect.Results.ExpectationResult WithTimeout(System.TimeSpan timeout) { }
    }
    public class ExpectationResult<TType> : aweXpect.Results.ExpectationResult<TType, aweXpect.Results.ExpectationResult<TType>>
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
    }
    [System.Diagnostics.StackTraceHidden]
    public class ExpectationResult<TType, TSelf> : aweXpect.Results.Expectation
        where TSelf : aweXpect.Results.ExpectationResult<TType, TSelf>
    {
        public ExpectationResult(aweXpect.Core.ExpectationBuilder expectationBuilder) { }
        public TSelf Because(string reason) { }
        [System.Diagnostics.StackTraceHidden]
        public System.Runtime.CompilerServices.TaskAwaiter<TType> GetAwaiter() { }
        public TSelf WithCancellation(System.Threading.CancellationToken cancellationToken) { }
        public TSelf WithTimeout(System.TimeSpan timeout) { }
    }
    public class HasItemResult<TCollection> : aweXpect.Results.AndOrResult<TCollection, aweXpect.Core.IThat<TCollection>>
    {
        public HasItemResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TCollection> collection, aweXpect.Options.CollectionIndexOptions collectionIndexOptions) { }
        public aweXpect.Results.AndOrResult<TCollection, aweXpect.Core.IThat<TCollection>> AtIndex(int index) { }
    }
    public class NullableNumberToleranceResult<TType, TThat> : aweXpect.Results.NullableNumberToleranceResult<TType, TThat, aweXpect.Results.NullableNumberToleranceResult<TType, TThat>>
        where TType :  struct, System.Numerics.INumber<TType>
    {
        public NullableNumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
    }
    public class NullableNumberToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType?, TThat, TSelf>
        where TType :  struct, System.Numerics.INumber<TType>
        where TSelf : aweXpect.Results.NullableNumberToleranceResult<TType, TThat, TSelf>
    {
        public NullableNumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
        public TSelf Within(TType tolerance) { }
    }
    public class NumberToleranceResult<TType, TThat> : aweXpect.Results.NumberToleranceResult<TType, TThat, aweXpect.Results.NumberToleranceResult<TType, TThat>>
        where TType :  struct, System.Numerics.INumber<TType>
    {
        public NumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
    }
    public class NumberToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TType :  struct, System.Numerics.INumber<TType>
        where TSelf : aweXpect.Results.NumberToleranceResult<TType, TThat, TSelf>
    {
        public NumberToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.NumberTolerance<TType> options) { }
        public TSelf Within(TType tolerance) { }
    }
    public class ObjectEqualityResult<TType, TThat, TElement> : aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement, aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement>>
    {
        public ObjectEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TElement> options) { }
    }
    public class ObjectEqualityResult<TType, TThat, TElement, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.ObjectEqualityOptions<TElement>>
        where TSelf : aweXpect.Results.ObjectEqualityResult<TType, TThat, TElement, TSelf>
    {
        public ObjectEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityOptions<TElement> options) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public class ObjectHasItemResult<TCollection, TItem> : aweXpect.Results.ObjectHasItemResult<TCollection, TItem, aweXpect.Results.ObjectHasItemResult<TCollection, TItem>>
    {
        public ObjectHasItemResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TCollection> collection, aweXpect.Options.CollectionIndexOptions collectionIndexOptions, aweXpect.Options.ObjectEqualityOptions<TItem> options) { }
    }
    public class ObjectHasItemResult<TCollection, TItem, TSelf> : aweXpect.Results.HasItemResult<TCollection>, aweXpect.Core.IOptionsProvider<aweXpect.Options.ObjectEqualityOptions<TItem>>
        where TSelf : aweXpect.Results.ObjectHasItemResult<TCollection, TItem, TSelf>
    {
        public ObjectHasItemResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TCollection> collection, aweXpect.Options.CollectionIndexOptions collectionIndexOptions, aweXpect.Options.ObjectEqualityOptions<TItem> options) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<object> comparer) { }
    }
    public static class PropertyResult
    {
        public class DateTimeKind<TItem>
        {
            public DateTimeKind(aweXpect.Core.IThat<TItem> source, System.Func<TItem, System.DateTimeKind?> mapper, string propertyExpression) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> EqualTo(System.DateTimeKind expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> NotEqualTo(System.DateTimeKind unexpected) { }
        }
        public class Int<TItem>
        {
            public Int(aweXpect.Core.IThat<TItem> source, System.Func<TItem, int?> mapper, string propertyExpression, System.Action<int?, string>? validation = null) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> EqualTo(int? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThan(int? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThanOrEqualTo(int? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThan(int? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThanOrEqualTo(int? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> NotEqualTo(int? unexpected) { }
        }
        public class Long<TItem>
        {
            public Long(aweXpect.Core.IThat<TItem> source, System.Func<TItem, long?> mapper, string propertyExpression, System.Action<long?, string>? validation = null) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> EqualTo(long? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThan(long? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThanOrEqualTo(long? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThan(long? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThanOrEqualTo(long? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> NotEqualTo(long? unexpected) { }
        }
        public class TimeSpan<TItem>
        {
            public TimeSpan(aweXpect.Core.IThat<TItem> source, System.Func<TItem, System.TimeSpan?> mapper, string propertyExpression) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> EqualTo(System.TimeSpan? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThan(System.TimeSpan? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> GreaterThanOrEqualTo(System.TimeSpan? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThan(System.TimeSpan? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> LessThanOrEqualTo(System.TimeSpan? expected) { }
            public aweXpect.Results.AndOrResult<TItem, aweXpect.Core.IThat<TItem>> NotEqualTo(System.TimeSpan? unexpected) { }
        }
    }
    public class StringCountResult<TType, TThat> : aweXpect.Results.StringCountResult<TType, TThat, aweXpect.Results.StringCountResult<TType, TThat>>
    {
        public StringCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringCountResult<TType, TThat, TSelf> : aweXpect.Results.CountResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.StringCountResult<TType, TThat, TSelf>
    {
        public StringCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf IgnoringCase(bool ignoreCase = true) { }
        public TSelf IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<string> comparer) { }
    }
    public class StringEqualityResult<TType, TThat> : aweXpect.Results.StringEqualityResult<TType, TThat, aweXpect.Results.StringEqualityResult<TType, TThat>>
    {
        public StringEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringEqualityResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.StringEqualityOptions>
        where TSelf : aweXpect.Results.StringEqualityResult<TType, TThat, TSelf>
    {
        public StringEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf IgnoringCase(bool ignoreCase = true) { }
        public TSelf IgnoringLeadingWhiteSpace(bool ignoreLeadingWhiteSpace = true) { }
        public TSelf IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public TSelf IgnoringTrailingWhiteSpace(bool ignoreTrailingWhiteSpace = true) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<string> comparer) { }
    }
    public class StringEqualityTypeCountResult<TType, TThat> : aweXpect.Results.StringCountResult<TType, TThat>
    {
        public StringEqualityTypeCountResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.Quantifier quantifier, aweXpect.Options.StringEqualityOptions options) { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsPrefix() { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsRegex() { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsSuffix() { }
        public aweXpect.Results.StringCountResult<TType, TThat> AsWildcard() { }
        public aweXpect.Results.StringCountResult<TType, TThat> Exactly() { }
    }
    public class StringEqualityTypeResult<TType, TThat> : aweXpect.Results.StringEqualityTypeResult<TType, TThat, aweXpect.Results.StringEqualityTypeResult<TType, TThat>>
    {
        public StringEqualityTypeResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringEqualityTypeResult<TType, TThat, TSelf> : aweXpect.Results.StringEqualityResult<TType, TThat>
        where TSelf : aweXpect.Results.StringEqualityTypeResult<TType, TThat, TSelf>
    {
        public StringEqualityTypeResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf AsPrefix() { }
        public TSelf AsRegex() { }
        public TSelf AsSuffix() { }
        public TSelf AsWildcard() { }
        public TSelf Exactly() { }
    }
    public class StringHasItemResult<TCollection> : aweXpect.Results.StringHasItemResult<TCollection, aweXpect.Results.StringHasItemResult<TCollection>>
    {
        public StringHasItemResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TCollection> collection, aweXpect.Options.CollectionIndexOptions collectionIndexOptions, aweXpect.Options.StringEqualityOptions options) { }
    }
    public class StringHasItemResult<TCollection, TSelf> : aweXpect.Results.HasItemResult<TCollection>, aweXpect.Core.IOptionsProvider<aweXpect.Options.StringEqualityOptions>
        where TSelf : aweXpect.Results.StringHasItemResult<TCollection, TSelf>
    {
        public StringHasItemResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TCollection> collection, aweXpect.Options.CollectionIndexOptions collectionIndexOptions, aweXpect.Options.StringEqualityOptions options) { }
        public TSelf AsPrefix() { }
        public TSelf AsRegex() { }
        public TSelf AsSuffix() { }
        public TSelf AsWildcard() { }
        public TSelf IgnoringCase(bool ignoreCase = true) { }
        public TSelf IgnoringLeadingWhiteSpace(bool ignoreLeadingWhiteSpace = true) { }
        public TSelf IgnoringNewlineStyle(bool ignoreNewlineStyle = true) { }
        public TSelf IgnoringTrailingWhiteSpace(bool ignoreTrailingWhiteSpace = true) { }
        public TSelf Using(System.Collections.Generic.IEqualityComparer<string> comparer) { }
    }
    public class TimeToleranceResult<TType, TThat> : aweXpect.Results.TimeToleranceResult<TType, TThat, aweXpect.Results.TimeToleranceResult<TType, TThat>>
    {
        public TimeToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.TimeTolerance options) { }
    }
    public class TimeToleranceResult<TType, TThat, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>
        where TSelf : aweXpect.Results.TimeToleranceResult<TType, TThat, TSelf>
    {
        public TimeToleranceResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.TimeTolerance options) { }
        public TSelf Within(System.TimeSpan tolerance) { }
    }
    public class ToleranceEqualityResult<TType, TThat, TElement, TTolerance> : aweXpect.Results.ToleranceEqualityResult<TType, TThat, TElement, TTolerance, aweXpect.Results.ToleranceEqualityResult<TType, TThat, TElement, TTolerance>>
    {
        public ToleranceEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityWithToleranceOptions<TElement, TTolerance> options) { }
    }
    public class ToleranceEqualityResult<TType, TThat, TElement, TTolerance, TSelf> : aweXpect.Results.AndOrResult<TType, TThat, TSelf>, aweXpect.Core.IOptionsProvider<aweXpect.Options.ObjectEqualityOptions<TElement>>
        where TSelf : aweXpect.Results.ToleranceEqualityResult<TType, TThat, TElement, TTolerance, TSelf>
    {
        public ToleranceEqualityResult(aweXpect.Core.ExpectationBuilder expectationBuilder, TThat returnValue, aweXpect.Options.ObjectEqualityWithToleranceOptions<TElement, TTolerance> options) { }
        public aweXpect.Results.AndOrResult<TType, TThat, TSelf> Within(TTolerance tolerance) { }
    }
}
namespace aweXpect.Signaling
{
    public class Signaler
    {
        public Signaler() { }
        public bool IsSignaled(aweXpect.Core.Times? amount = default) { }
        public void Signal() { }
        public aweXpect.Signaling.SignalerResult Wait(System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
        public aweXpect.Signaling.SignalerResult Wait(aweXpect.Core.Times amount, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class SignalerResult
    {
        public SignalerResult(bool isSuccess, int counter) { }
        public int Count { get; }
        public bool IsSuccess { get; }
    }
    public class SignalerResult<TParameter> : aweXpect.Signaling.SignalerResult
    {
        public SignalerResult(bool isSuccess, TParameter[] parameters) { }
        public TParameter[] Parameters { get; }
    }
    public class Signaler<TParameter>
    {
        public Signaler() { }
        public bool IsSignaled(aweXpect.Core.Times? amount = default) { }
        public void Signal(TParameter parameter) { }
        public aweXpect.Signaling.SignalerResult<TParameter> Wait(System.Func<TParameter, bool>? predicate = null, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
        public aweXpect.Signaling.SignalerResult<TParameter> Wait(aweXpect.Core.Times amount, System.Func<TParameter, bool>? predicate = null, System.TimeSpan? timeout = default, System.Threading.CancellationToken cancellationToken = default) { }
    }
}
namespace aweXpect.Synchronous
{
    public static class Synchronously
    {
        public static void Verify(aweXpect.Results.ExpectationResult result) { }
        public static TType Verify<TType, TSelf>(aweXpect.Results.ExpectationResult<TType, TSelf> result)
            where TSelf : aweXpect.Results.ExpectationResult<TType, TSelf> { }
    }
    public static class SynchronouslyExtensions
    {
        public static void VerifySynchronously(this aweXpect.Results.ExpectationResult result) { }
        public static TType VerifySynchronously<TType, TSelf>(this aweXpect.Results.ExpectationResult<TType, TSelf> result)
            where TSelf : aweXpect.Results.ExpectationResult<TType, TSelf> { }
    }
}